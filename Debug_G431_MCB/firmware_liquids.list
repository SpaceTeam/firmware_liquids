
firmware_liquids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b38c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012bc  0800b564  0800b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c820  0800c820  0002054c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c820  0800c820  0002054c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c820  0800c820  0002054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c820  0800c820  0001c820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000054c  20000000  0800c828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000550  0800cd74  00020550  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0800cd74  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002054c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e0d  00000000  00000000  0002057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007124  00000000  00000000  0004a389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  000514b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  00052f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002433a  00000000  00000000  000547b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db64  00000000  00000000  00078af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b43e0  00000000  00000000  00096656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014aa36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007360  00000000  00000000  0014aa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000550 	.word	0x20000550
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b54c 	.word	0x0800b54c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000554 	.word	0x20000554
 8000214:	0800b54c 	.word	0x0800b54c

08000218 <_ZN11AbstractComC1Em>:
#include <AbstractCom.h>

AbstractCom::AbstractCom(uint32_t nodeId) :
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
		nodeId(nodeId)
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <_ZN11AbstractComC1Em+0x24>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	605a      	str	r2, [r3, #4]
{
}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	0800b7d8 	.word	0x0800b7d8

08000240 <_ZN3CanC1Em>:
#include <cstdio>

Com_Receptor_t Can::standardReceptor = nullptr;
uint32_t Can::_nodeId = 0; // TODO fix this pfusch

Can::Can(uint32_t nodeId) :
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
		AbstractCom(nodeId)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6839      	ldr	r1, [r7, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffe2 	bl	8000218 <_ZN11AbstractComC1Em>
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <_ZN3CanC1Em+0x24>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]
{
}
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	0800b7e8 	.word	0x0800b7e8

08000268 <_ZN3Can8instanceEm>:

Can& Can::instance(uint32_t nodeId)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	static Can can(nodeId);
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	f3bf 8f5b 	dmb	ish
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	bf0c      	ite	eq
 8000282:	2301      	moveq	r3, #1
 8000284:	2300      	movne	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d011      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 800028e:	f00b f84b 	bl	800b328 <__cxa_guard_acquire>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf14      	ite	ne
 8000298:	2301      	movne	r3, #1
 800029a:	2300      	moveq	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d006      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	4809      	ldr	r0, [pc, #36]	; (80002cc <_ZN3Can8instanceEm+0x64>)
 80002a6:	f7ff ffcb 	bl	8000240 <_ZN3CanC1Em>
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 80002ac:	f00b f848 	bl	800b340 <__cxa_guard_release>

	if (nodeId != 0)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <_ZN3Can8instanceEm+0x54>
		_nodeId = nodeId;
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <_ZN3Can8instanceEm+0x68>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]

	return can;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <_ZN3Can8instanceEm+0x64>)
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000057c 	.word	0x2000057c
 80002cc:	20000574 	.word	0x20000574
 80002d0:	20000570 	.word	0x20000570

080002d4 <_ZN3Can4initEPFvmPhmEPFvvE>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	return Can::init(receptor, heartbeat, COMMode::STANDARD_COM_MODE);
 80002e0:	2300      	movs	r3, #0
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f000 f806 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 80002ec:	4603      	mov	r3, r0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat, COMMode mode)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a4      	sub	sp, #144	; 0x90
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	603b      	str	r3, [r7, #0]
	if(nodeId == 0)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d102      	bne.n	8000314 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x1c>
		return -1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000312:	e17a      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	standardReceptor = receptor;
 8000314:	4abf      	ldr	r2, [pc, #764]	; (8000614 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x31c>)
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	6013      	str	r3, [r2, #0]

	if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN1) != 0)
 800031a:	2000      	movs	r0, #0
 800031c:	f008 f854 	bl	80083c8 <STRHAL_CAN_Instance_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf14      	ite	ne
 8000326:	2301      	movne	r3, #1
 8000328:	2300      	moveq	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x3e>
		return -1;
 8000330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000334:	e169      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	//if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN2) != 0)
	//	return -1;

	if (STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_TIM7, 1600, 100) != 1000)
 8000336:	2264      	movs	r2, #100	; 0x64
 8000338:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800033c:	2001      	movs	r0, #1
 800033e:	f009 ff0d 	bl	800a15c <STRHAL_TIM_Heartbeat_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000348:	bf14      	ite	ne
 800034a:	2301      	movne	r3, #1
 800034c:	2300      	moveq	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x62>
		return -1;
 8000354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000358:	e157      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_TIM7, heartbeat) != 0)
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	2001      	movs	r0, #1
 800035e:	f009 ff59 	bl	800a214 <STRHAL_TIM_Heartbeat_Subscribe>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x80>
		return -1;
 8000372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000376:	e148      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (mode == COMMode::STANDARD_COM_MODE)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d16f      	bne.n	800045e <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x166>
	{
		Can_MessageId_t mask =
 800037e:	2300      	movs	r3, #0
 8000380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		{ 0 };
		mask.info.direction = 0x1;
 8000384:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.node_id = 0x3F;
 8000390:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000394:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 8000398:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.special_cmd = 0x3;
 800039c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80003a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003a4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		Can_MessageId_t id =
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 80003ae:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003b2:	f36f 0300 	bfc	r3, #0, #1
 80003b6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ba:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80003be:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003c2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		id.info.node_id = nodeId;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003d4:	f362 0346 	bfi	r3, r2, #1, #6
 80003d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		Can_MessageId_t id2 =
 80003dc:	2300      	movs	r3, #0
 80003de:	67fb      	str	r3, [r7, #124]	; 0x7c
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80003e0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003e4:	f36f 0300 	bfc	r3, #0, #1
 80003e8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ec:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80003f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003f4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		id2.info.node_id = 0;
 80003f8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003fc:	f36f 0346 	bfc	r3, #1, #6
 8000400:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

		STRHAL_FDCAN_Filter_t mainFilter[] =
 8000404:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]
 8000416:	2302      	movs	r3, #2
 8000418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800041a:	2302      	movs	r3, #2
 800041c:	67bb      	str	r3, [r7, #120]	; 0x78
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800041e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000422:	667b      	str	r3, [r7, #100]	; 0x64
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000428:	66bb      	str	r3, [r7, #104]	; 0x68
 800042a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800042c:	673b      	str	r3, [r7, #112]	; 0x70
 800042e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000432:	677b      	str	r3, [r7, #116]	; 0x74

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 2, receptor) != 2)
 8000434:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2302      	movs	r3, #2
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f008 f8c5 	bl	80085d0 <STRHAL_CAN_Subscribe>
 8000446:	4603      	mov	r3, r0
 8000448:	2b02      	cmp	r3, #2
 800044a:	bf14      	ite	ne
 800044c:	2301      	movne	r3, #1
 800044e:	2300      	moveq	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	f000 80d8 	beq.w	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045c:	e0d5      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::LISTENER_COM_MODE)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b02      	cmp	r3, #2
 8000462:	f040 809f 	bne.w	80005a4 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2ac>
	{
		Can_MessageId_t mask =
 8000466:	2300      	movs	r3, #0
 8000468:	663b      	str	r3, [r7, #96]	; 0x60
		{ 0 };
		mask.info.direction = 0x1;
 800046a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.node_id = 0x1F;
 8000476:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800047a:	221f      	movs	r2, #31
 800047c:	f362 0346 	bfi	r3, r2, #1, #6
 8000480:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.special_cmd = 0x3;
 8000484:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000488:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800048c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		Can_MessageId_t id =
 8000490:	2300      	movs	r3, #0
 8000492:	65fb      	str	r3, [r7, #92]	; 0x5c
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 8000494:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000498:	f36f 0300 	bfc	r3, #0, #1
 800049c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80004a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004a8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		id.info.node_id = nodeId;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80004ba:	f362 0346 	bfi	r3, r2, #1, #6
 80004be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

		Can_MessageId_t id2 =
 80004c2:	2300      	movs	r3, #0
 80004c4:	65bb      	str	r3, [r7, #88]	; 0x58
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80004c6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004ca:	f36f 0300 	bfc	r3, #0, #1
 80004ce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80004d6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		id2.info.node_id = 0;
 80004de:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004e2:	f36f 0346 	bfc	r3, #1, #6
 80004e6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

		Can_MessageId_t id3 =
 80004ea:	2300      	movs	r3, #0
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
		{ 0 };
		id3.info.direction = NODE2MASTER_DIRECTION;
 80004ee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		id3.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80004fe:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000502:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		id3.info.node_id = 6;
 8000506:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800050a:	2206      	movs	r2, #6
 800050c:	f362 0346 	bfi	r3, r2, #1, #6
 8000510:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

		Can_MessageId_t id4 =
 8000514:	2300      	movs	r3, #0
 8000516:	653b      	str	r3, [r7, #80]	; 0x50
		{ 0 };
		id4.info.direction = NODE2MASTER_DIRECTION;
 8000518:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		id4.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000524:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000528:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800052c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		id4.info.node_id = 7;
 8000530:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000534:	2207      	movs	r2, #7
 8000536:	f362 0346 	bfi	r3, r2, #1, #6
 800053a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		STRHAL_FDCAN_Filter_t mainFilter[] =
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f00a ff5a 	bl	800b400 <memset>
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
 8000550:	2302      	movs	r3, #2
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
 8000554:	2302      	movs	r3, #2
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
 8000558:	2302      	movs	r3, #2
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800055c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800055e:	617b      	str	r3, [r7, #20]
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000562:	61bb      	str	r3, [r7, #24]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000566:	623b      	str	r3, [r7, #32]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800056c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
 8000574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
 8000578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 4, receptor) != 4)
 800057c:	f107 0214 	add.w	r2, r7, #20
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2304      	movs	r3, #4
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f008 f821 	bl	80085d0 <STRHAL_CAN_Subscribe>
 800058e:	4603      	mov	r3, r0
 8000590:	2b04      	cmp	r3, #4
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d034      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a2:	e032      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::BRIDGE_COM_MODE)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d12e      	bne.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
	{
		STRHAL_FDCAN_Filter_t mainFilter[] =
 80005aa:	2300      	movs	r3, #0
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b4:	2300      	movs	r3, #0
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		{
		{ .value_id1 = 0x00, .mask_id2 = 0xFFFF, .type = FDCAN_FILTER_RANGE } };

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 1, Can::internalReceptor) != 1)
 80005b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x320>)
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f008 f803 	bl	80085d0 <STRHAL_CAN_Subscribe>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2e8>
			return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005de:	e014      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN2, STRHAL_FDCAN_RX0, mainFilter, 1, Can::externalReceptor) != 1)
 80005e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x324>)
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	2100      	movs	r1, #0
 80005ec:	2001      	movs	r0, #1
 80005ee:	f007 ffef 	bl	80085d0 <STRHAL_CAN_Subscribe>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000606:	e000      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}

	return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3788      	adds	r7, #136	; 0x88
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000056c 	.word	0x2000056c
 8000618:	0800081d 	.word	0x0800081d
 800061c:	0800083d 	.word	0x0800083d

08000620 <_ZN3Can4execEv>:

int Can::exec()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	STRHAL_CAN_Run();
 8000628:	f008 f98a 	bl	8008940 <STRHAL_CAN_Run>
	if (STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_TIM7) != 0)
 800062c:	2001      	movs	r0, #1
 800062e:	f009 fe19 	bl	800a264 <STRHAL_TIM_Heartbeat_StartHeartbeat>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <_ZN3Can4execEv+0x28>
		return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	e000      	b.n	800064a <_ZN3Can4execEv+0x2a>

	return 0;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <_ZN3Can4sendEmPhh>:

int Can::send(uint32_t id, uint8_t *data, uint8_t n)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
	Can_MessageId_t msgId =
 8000662:	2300      	movs	r3, #0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000666:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800066a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800066e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	msgId.info.direction = NODE2MASTER_DIRECTION;
 8000672:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	if (id == 0)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <_ZN3Can4sendEmPhh+0x48>
	{
		msgId.info.node_id = _nodeId;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <_ZN3Can4sendEmPhh+0xa0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800068c:	b2da      	uxtb	r2, r3
 800068e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000692:	f362 0346 	bfi	r3, r2, #1, #6
 8000696:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800069a:	e009      	b.n	80006b0 <_ZN3Can4sendEmPhh+0x5c>
	}
	else
	{
		msgId.info.node_id = id;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80006a8:	f362 0346 	bfi	r3, r2, #1, #6
 80006ac:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}
	msgId.info.priority = STANDARD_PRIORITY;
 80006b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80006b4:	2202      	movs	r2, #2
 80006b6:	f362 0342 	bfi	r3, r2, #1, #2
 80006ba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	Can_MessageData_t msgData =
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2242      	movs	r2, #66	; 0x42
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00a fe9a 	bl	800b400 <memset>
	{ 0 };

	memcpy(msgData.uint8, data, n);
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00a fe85 	bl	800b3e4 <memcpy>

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 80006da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f107 0210 	add.w	r2, r7, #16
 80006e2:	2000      	movs	r0, #0
 80006e4:	f008 f858 	bl	8008798 <STRHAL_CAN_Send>
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000570 	.word	0x20000570

080006f8 <_ZN3Can12sendAsMasterEhhhPhh>:

void Can::sendAsMaster(uint8_t receiverNodeId, uint8_t receiverChannelId, uint8_t commandId, uint8_t *data, uint8_t n)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	4608      	mov	r0, r1
 8000702:	4611      	mov	r1, r2
 8000704:	461a      	mov	r2, r3
 8000706:	4603      	mov	r3, r0
 8000708:	70fb      	strb	r3, [r7, #3]
 800070a:	460b      	mov	r3, r1
 800070c:	70bb      	strb	r3, [r7, #2]
 800070e:	4613      	mov	r3, r2
 8000710:	707b      	strb	r3, [r7, #1]
	Can_MessageId_t msgId =
 8000712:	2300      	movs	r3, #0
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000716:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800071a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800071e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	msgId.info.direction = MASTER2NODE_DIRECTION;
 8000722:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000726:	f36f 0300 	bfc	r3, #0, #1
 800072a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.node_id = receiverNodeId;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000734:	b2da      	uxtb	r2, r3
 8000736:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800073a:	f362 0346 	bfi	r3, r2, #1, #6
 800073e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.priority = STANDARD_PRIORITY;
 8000742:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000746:	2202      	movs	r2, #2
 8000748:	f362 0342 	bfi	r3, r2, #1, #2
 800074c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	Can_MessageData_t msgData =
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2242      	movs	r2, #66	; 0x42
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f00a fe51 	bl	800b400 <memset>
	{ 0 };
	msgData.bit.cmd_id = commandId;
 800075e:	787b      	ldrb	r3, [r7, #1]
 8000760:	727b      	strb	r3, [r7, #9]
	msgData.bit.info.channel_id = receiverChannelId;
 8000762:	78bb      	ldrb	r3, [r7, #2]
 8000764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000768:	b2da      	uxtb	r2, r3
 800076a:	7a3b      	ldrb	r3, [r7, #8]
 800076c:	f362 0305 	bfi	r3, r2, #0, #6
 8000770:	723b      	strb	r3, [r7, #8]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8000772:	7a3b      	ldrb	r3, [r7, #8]
 8000774:	f36f 1387 	bfc	r3, #6, #2
 8000778:	723b      	strb	r3, [r7, #8]

	memcpy(msgData.bit.data.uint8, data, n);
 800077a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	3302      	adds	r3, #2
 8000784:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000786:	4618      	mov	r0, r3
 8000788:	f00a fe2c 	bl	800b3e4 <memcpy>

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 800078c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800078e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000792:	f107 0208 	add.w	r2, r7, #8
 8000796:	2000      	movs	r0, #0
 8000798:	f007 fffe 	bl	8008798 <STRHAL_CAN_Send>
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>:

void Can::bridgeReceptor(STRHAL_FDCAN_Id_t bus_id, uint32_t id, uint8_t *data, uint32_t n)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4603      	mov	r3, r0
 80007b2:	73fb      	strb	r3, [r7, #15]
	Can_MessageId_t incoming_id;
	incoming_id.uint32 = id;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	617b      	str	r3, [r7, #20]

	if (incoming_id.info.node_id == _nodeId)
 80007b8:	7d3b      	ldrb	r3, [r7, #20]
 80007ba:	f3c3 0345 	ubfx	r3, r3, #1, #6
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x70>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d106      	bne.n	80007d8 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x34>
	{
		Can::standardReceptor(id, data, n);
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	68b8      	ldr	r0, [r7, #8]
 80007d4:	4798      	blx	r3
	}
	else
	{
		STRHAL_CAN_Send(bus_id, id, data, n);
	}
}
 80007d6:	e018      	b.n	800080a <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
	else if (incoming_id.info.node_id == 0)
 80007d8:	7d3b      	ldrb	r3, [r7, #20]
 80007da:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10c      	bne.n	80007fe <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x5a>
		STRHAL_CAN_Send(bus_id, id, data, n);
 80007e4:	7bf8      	ldrb	r0, [r7, #15]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	f007 ffd4 	bl	8008798 <STRHAL_CAN_Send>
		Can::standardReceptor(id, data, n);
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	4798      	blx	r3
}
 80007fc:	e005      	b.n	800080a <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
		STRHAL_CAN_Send(bus_id, id, data, n);
 80007fe:	7bf8      	ldrb	r0, [r7, #15]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	f007 ffc7 	bl	8008798 <STRHAL_CAN_Send>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000570 	.word	0x20000570
 8000818:	2000056c 	.word	0x2000056c

0800081c <_ZN3Can16internalReceptorEmPhm>:

void Can::internalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	//Can::bridgeReceptor(STRHAL_FDCAN2, id, data, n);
	STRHAL_CAN_Send(STRHAL_FDCAN2, id, data, n);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	68f9      	ldr	r1, [r7, #12]
 800082e:	2001      	movs	r0, #1
 8000830:	f007 ffb2 	bl	8008798 <STRHAL_CAN_Send>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <_ZN3Can16externalReceptorEmPhm>:

void Can::externalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	Can::bridgeReceptor(STRHAL_FDCAN1, id, data, n);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	68f9      	ldr	r1, [r7, #12]
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ffa8 	bl	80007a4 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN14GenericChannelD1Ev>:
#include <STRHAL.h>
#include <Radio.h>
#include "../Modules/W25Qxx_Flash.h"
#include <Can.h>

class GenericChannel: public AbstractChannel
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	4a05      	ldr	r2, [pc, #20]	; (800087c <_ZN14GenericChannelD1Ev+0x20>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fa61 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	0800b900 	.word	0x0800b900

08000880 <_ZN14GenericChannelD0Ev>:
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ffe7 	bl	800085c <_ZN14GenericChannelD1Ev>
 800088e:	21c8      	movs	r1, #200	; 0xc8
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f00a fd47 	bl	800b324 <_ZdlPvj>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_ZN3ECUC1Emmm>:
#include "../Inc/ECU.h"

#include <cstdio>
#include <cstring>

ECU::ECU(uint32_t node_id, uint32_t fw_version, uint32_t refresh_divider) :
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	b0cf      	sub	sp, #316	; 0x13c
 80008a4:	af06      	add	r7, sp, #24
 80008a6:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80008aa:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 80008ae:	6020      	str	r0, [r4, #0]
 80008b0:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80008b4:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80008b8:	6001      	str	r1, [r0, #0]
 80008ba:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008be:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80008c2:	600a      	str	r2, [r1, #0]
 80008c4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80008c8:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80008cc:	6013      	str	r3, [r2, #0]
		solenoid_1(19,{ ADC2, STRHAL_ADC_CHANNEL_18 },{ GPIOD, 8, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_OPAMP, 1),
		//pressure_control(20, press_1, solenoid_0, 1),
		pressure_control(20, (GenericChannel&)*this, 1, solenoid_0, 1),

		rocket(22, press_1, press_0, press_2, servo_1, servo_2, pyro_igniter0, pyro_igniter1, 1),
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 80008ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008e0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80008e4:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80008e8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008ec:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	6809      	ldr	r1, [r1, #0]
 80008f6:	f001 fc69 	bl	80021cc <_ZN14GenericChannelC1Emmm>
 80008fa:	4ada      	ldr	r2, [pc, #872]	; (8000c64 <_ZN3ECUC1Emmm+0x3c4>)
 80008fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000900:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800090c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4ad5      	ldr	r2, [pc, #852]	; (8000c68 <_ZN3ECUC1Emmm+0x3c8>)
 8000914:	33c8      	adds	r3, #200	; 0xc8
 8000916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091a:	e883 0003 	stmia.w	r3, {r0, r1}
 800091e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4ad0      	ldr	r2, [pc, #832]	; (8000c6c <_ZN3ECUC1Emmm+0x3cc>)
 800092a:	33d0      	adds	r3, #208	; 0xd0
 800092c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000930:	e883 0003 	stmia.w	r3, {r0, r1}
 8000934:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8000942:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800094a:	4ac9      	ldr	r2, [pc, #804]	; (8000c70 <_ZN3ECUC1Emmm+0x3d0>)
 800094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000950:	e883 0003 	stmia.w	r3, {r0, r1}
 8000954:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800095c:	2201      	movs	r2, #1
 800095e:	9200      	str	r2, [sp, #0]
 8000960:	cb0c      	ldmia	r3, {r2, r3}
 8000962:	2100      	movs	r1, #0
 8000964:	4620      	mov	r0, r4
 8000966:	f001 f80b 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 800096a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800096e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 8000978:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800097c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000980:	4abc      	ldr	r2, [pc, #752]	; (8000c74 <_ZN3ECUC1Emmm+0x3d4>)
 8000982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000986:	e883 0003 	stmia.w	r3, {r0, r1}
 800098a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800098e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000992:	2201      	movs	r2, #1
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	cb0c      	ldmia	r3, {r2, r3}
 8000998:	2101      	movs	r1, #1
 800099a:	4620      	mov	r0, r4
 800099c:	f000 fff0 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 80009a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f503 7488 	add.w	r4, r3, #272	; 0x110
 80009ae:	4ab2      	ldr	r2, [pc, #712]	; (8000c78 <_ZN3ECUC1Emmm+0x3d8>)
 80009b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80009bc:	2301      	movs	r3, #1
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c4:	cb0c      	ldmia	r3, {r2, r3}
 80009c6:	2102      	movs	r1, #2
 80009c8:	4620      	mov	r0, r4
 80009ca:	f000 ffd9 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 80009ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 80009dc:	4aa7      	ldr	r2, [pc, #668]	; (8000c7c <_ZN3ECUC1Emmm+0x3dc>)
 80009de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80009ea:	2301      	movs	r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f2:	cb0c      	ldmia	r3, {r2, r3}
 80009f4:	2103      	movs	r1, #3
 80009f6:	4620      	mov	r0, r4
 80009f8:	f000 ffc2 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 80009fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 8000a0a:	4a9d      	ldr	r2, [pc, #628]	; (8000c80 <_ZN3ECUC1Emmm+0x3e0>)
 8000a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a14:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a20:	cb0c      	ldmia	r3, {r2, r3}
 8000a22:	2104      	movs	r1, #4
 8000a24:	4620      	mov	r0, r4
 8000a26:	f000 ffab 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 8000a2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8000a38:	4a92      	ldr	r2, [pc, #584]	; (8000c84 <_ZN3ECUC1Emmm+0x3e4>)
 8000a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a42:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a46:	2301      	movs	r3, #1
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a4e:	cb0c      	ldmia	r3, {r2, r3}
 8000a50:	2105      	movs	r1, #5
 8000a52:	4620      	mov	r0, r4
 8000a54:	f000 ff94 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 8000a58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8000a66:	4a88      	ldr	r2, [pc, #544]	; (8000c88 <_ZN3ECUC1Emmm+0x3e8>)
 8000a68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a70:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a74:	2301      	movs	r3, #1
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a7c:	cb0c      	ldmia	r3, {r2, r3}
 8000a7e:	2106      	movs	r1, #6
 8000a80:	4620      	mov	r0, r4
 8000a82:	f000 ff7d 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 8000a86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8000a94:	4a7d      	ldr	r2, [pc, #500]	; (8000c8c <_ZN3ECUC1Emmm+0x3ec>)
 8000a96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aaa:	cb0c      	ldmia	r3, {r2, r3}
 8000aac:	2107      	movs	r1, #7
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f000 ff66 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 8000ab4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8000ac2:	4a73      	ldr	r2, [pc, #460]	; (8000c90 <_ZN3ECUC1Emmm+0x3f0>)
 8000ac4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000acc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ad8:	cb0c      	ldmia	r3, {r2, r3}
 8000ada:	2108      	movs	r1, #8
 8000adc:	4620      	mov	r0, r4
 8000ade:	f000 ff4f 	bl	8001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>
 8000ae2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ae6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
		servo_0(9, 0, STRHAL_TIM_TIM4, STRHAL_TIM_TIM4_CH2_PB7,{ ADC1, STRHAL_ADC_CHANNEL_9 },{ ADC1, STRHAL_ADC_CHANNEL_1 },{ GPIOC, 13, STRHAL_GPIO_TYPE_OPP }, 1),
 8000af0:	2303      	movs	r3, #3
 8000af2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8000af6:	233f      	movs	r3, #63	; 0x3f
 8000af8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000afc:	4a65      	ldr	r2, [pc, #404]	; (8000c94 <_ZN3ECUC1Emmm+0x3f4>)
 8000afe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b06:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b0a:	4a63      	ldr	r2, [pc, #396]	; (8000c98 <_ZN3ECUC1Emmm+0x3f8>)
 8000b0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b14:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b18:	4a60      	ldr	r2, [pc, #384]	; (8000c9c <_ZN3ECUC1Emmm+0x3fc>)
 8000b1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b22:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b26:	f107 0262 	add.w	r2, r7, #98	; 0x62
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9304      	str	r3, [sp, #16]
 8000b2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b32:	9303      	str	r3, [sp, #12]
 8000b34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	4613      	mov	r3, r2
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2109      	movs	r1, #9
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f003 f93b 	bl	8003dc8 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 8000b52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f503 7410 	add.w	r4, r3, #576	; 0x240
		servo_1(10, 1, STRHAL_TIM_TIM4, STRHAL_TIM_TIM4_CH3_PB8,{ ADC1, STRHAL_ADC_CHANNEL_2 },{ ADC1, STRHAL_ADC_CHANNEL_3 },{ GPIOC, 14, STRHAL_GPIO_TYPE_OPP }, 1),
 8000b60:	2303      	movs	r3, #3
 8000b62:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <_ZN3ECUC1Emmm+0x400>)
 8000b6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b76:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b7a:	4a4a      	ldr	r2, [pc, #296]	; (8000ca4 <_ZN3ECUC1Emmm+0x404>)
 8000b7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b84:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b88:	4a47      	ldr	r2, [pc, #284]	; (8000ca8 <_ZN3ECUC1Emmm+0x408>)
 8000b8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b92:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b96:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	9304      	str	r3, [sp, #16]
 8000b9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ba2:	9303      	str	r3, [sp, #12]
 8000ba4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	2201      	movs	r2, #1
 8000bba:	210a      	movs	r1, #10
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f003 f903 	bl	8003dc8 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 8000bc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
		servo_2(11, 2, STRHAL_TIM_TIM4, STRHAL_TIM_TIM4_CH4_PB9,{ ADC1, STRHAL_ADC_CHANNEL_4 },{ ADC2, STRHAL_ADC_CHANNEL_17 },{ GPIOC, 15, STRHAL_GPIO_TYPE_OPP }, 1),
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8000bd6:	2341      	movs	r3, #65	; 0x41
 8000bd8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000bdc:	4a33      	ldr	r2, [pc, #204]	; (8000cac <_ZN3ECUC1Emmm+0x40c>)
 8000bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bea:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <_ZN3ECUC1Emmm+0x410>)
 8000bec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bf8:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <_ZN3ECUC1Emmm+0x414>)
 8000bfa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c02:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c06:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9304      	str	r3, [sp, #16]
 8000c0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c12:	9303      	str	r3, [sp, #12]
 8000c14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4613      	mov	r3, r2
 8000c28:	2202      	movs	r2, #2
 8000c2a:	210b      	movs	r1, #11
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f003 f8cb 	bl	8003dc8 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 8000c32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <_ZN3ECUC1Emmm+0x418>)
 8000c42:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c4e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000c52:	2301      	movs	r3, #1
 8000c54:	210d      	movs	r1, #13
 8000c56:	4620      	mov	r0, r4
 8000c58:	f001 f87c 	bl	8001d54 <_ZN16DigitalInChannelC1EhRK13STRHAL_GPIO_tm>
 8000c5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c60:	e02c      	b.n	8000cbc <_ZN3ECUC1Emmm+0x41c>
 8000c62:	bf00      	nop
 8000c64:	0800b7f8 	.word	0x0800b7f8
 8000c68:	0800b564 	.word	0x0800b564
 8000c6c:	0800b56c 	.word	0x0800b56c
 8000c70:	0800b574 	.word	0x0800b574
 8000c74:	0800b57c 	.word	0x0800b57c
 8000c78:	0800b584 	.word	0x0800b584
 8000c7c:	0800b58c 	.word	0x0800b58c
 8000c80:	0800b594 	.word	0x0800b594
 8000c84:	0800b59c 	.word	0x0800b59c
 8000c88:	0800b5a4 	.word	0x0800b5a4
 8000c8c:	0800b5ac 	.word	0x0800b5ac
 8000c90:	0800b5b4 	.word	0x0800b5b4
 8000c94:	0800b5bc 	.word	0x0800b5bc
 8000c98:	0800b5c4 	.word	0x0800b5c4
 8000c9c:	0800b5cc 	.word	0x0800b5cc
 8000ca0:	0800b5d4 	.word	0x0800b5d4
 8000ca4:	0800b5dc 	.word	0x0800b5dc
 8000ca8:	0800b5e4 	.word	0x0800b5e4
 8000cac:	0800b5ec 	.word	0x0800b5ec
 8000cb0:	0800b5f4 	.word	0x0800b5f4
 8000cb4:	0800b5fc 	.word	0x0800b5fc
 8000cb8:	0800b604 	.word	0x0800b604
 8000cbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f503 744a 	add.w	r4, r3, #808	; 0x328
 8000cc6:	4add      	ldr	r2, [pc, #884]	; (800103c <_ZN3ECUC1Emmm+0x79c>)
 8000cc8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cd4:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000cd8:	2301      	movs	r3, #1
 8000cda:	210f      	movs	r1, #15
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f001 f839 	bl	8001d54 <_ZN16DigitalInChannelC1EhRK13STRHAL_GPIO_tm>
 8000ce2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ce6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f503 7450 	add.w	r4, r3, #832	; 0x340
 8000cf0:	4ad3      	ldr	r2, [pc, #844]	; (8001040 <_ZN3ECUC1Emmm+0x7a0>)
 8000cf2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cfe:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000d02:	2301      	movs	r3, #1
 8000d04:	2111      	movs	r1, #17
 8000d06:	4620      	mov	r0, r4
 8000d08:	f001 f824 	bl	8001d54 <_ZN16DigitalInChannelC1EhRK13STRHAL_GPIO_tm>
 8000d0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f503 7456 	add.w	r4, r3, #856	; 0x358
 8000d1a:	4aca      	ldr	r2, [pc, #808]	; (8001044 <_ZN3ECUC1Emmm+0x7a4>)
 8000d1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d24:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d28:	4ac7      	ldr	r2, [pc, #796]	; (8001048 <_ZN3ECUC1Emmm+0x7a8>)
 8000d2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d32:	e883 0003 	stmia.w	r3, {r0, r1}
		pyro_igniter0(12,{ ADC3, STRHAL_ADC_CHANNEL_2 },{ GPIOA, 9, STRHAL_GPIO_TYPE_OPP },pyro0_cont, 1),
 8000d36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f503 7344 	add.w	r3, r3, #784	; 0x310
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000d44:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000d48:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	9001      	str	r0, [sp, #4]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	460b      	mov	r3, r1
 8000d54:	210c      	movs	r1, #12
 8000d56:	4620      	mov	r0, r4
 8000d58:	f002 f91e 	bl	8002f98 <_ZN11PyroChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_tRK16DigitalInChannelm>
 8000d5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f503 7461 	add.w	r4, r3, #900	; 0x384
 8000d6a:	4ab8      	ldr	r2, [pc, #736]	; (800104c <_ZN3ECUC1Emmm+0x7ac>)
 8000d6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d74:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d78:	4ab5      	ldr	r2, [pc, #724]	; (8001050 <_ZN3ECUC1Emmm+0x7b0>)
 8000d7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d82:	e883 0003 	stmia.w	r3, {r0, r1}
		pyro_igniter1(14,{ ADC3, STRHAL_ADC_CHANNEL_6 },{ GPIOC, 9, STRHAL_GPIO_TYPE_OPP }, pyro1_cont, 1),
 8000d86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f503 734a 	add.w	r3, r3, #808	; 0x328
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000d94:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8000d98:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	9001      	str	r0, [sp, #4]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	460b      	mov	r3, r1
 8000da4:	210e      	movs	r1, #14
 8000da6:	4620      	mov	r0, r4
 8000da8:	f002 f8f6 	bl	8002f98 <_ZN11PyroChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_tRK16DigitalInChannelm>
 8000dac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000db0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
 8000dba:	4aa6      	ldr	r2, [pc, #664]	; (8001054 <_ZN3ECUC1Emmm+0x7b4>)
 8000dbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dc8:	4aa3      	ldr	r2, [pc, #652]	; (8001058 <_ZN3ECUC1Emmm+0x7b8>)
 8000dca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000dce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dd2:	e883 0003 	stmia.w	r3, {r0, r1}
		pyro_igniter2(16,{ ADC3, STRHAL_ADC_CHANNEL_4 },{ GPIOC, 7, STRHAL_GPIO_TYPE_OPP }, pyro2_cont, 1),
 8000dd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000dda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f503 7350 	add.w	r3, r3, #832	; 0x340
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000de4:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8000de8:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8000dec:	2001      	movs	r0, #1
 8000dee:	9001      	str	r0, [sp, #4]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	460b      	mov	r3, r1
 8000df4:	2110      	movs	r1, #16
 8000df6:	4620      	mov	r0, r4
 8000df8:	f002 f8ce 	bl	8002f98 <_ZN11PyroChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_tRK16DigitalInChannelm>
 8000dfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 8000e0a:	4a94      	ldr	r2, [pc, #592]	; (800105c <_ZN3ECUC1Emmm+0x7bc>)
 8000e0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e14:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e18:	4a91      	ldr	r2, [pc, #580]	; (8001060 <_ZN3ECUC1Emmm+0x7c0>)
 8000e1a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e22:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e26:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e2a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8000e2e:	2101      	movs	r1, #1
 8000e30:	9101      	str	r1, [sp, #4]
 8000e32:	2101      	movs	r1, #1
 8000e34:	9100      	str	r1, [sp, #0]
 8000e36:	2112      	movs	r1, #18
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f001 f85f 	bl	8001efc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000e3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 8000e4c:	4a85      	ldr	r2, [pc, #532]	; (8001064 <_ZN3ECUC1Emmm+0x7c4>)
 8000e4e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e56:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e5a:	4a83      	ldr	r2, [pc, #524]	; (8001068 <_ZN3ECUC1Emmm+0x7c8>)
 8000e5c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e64:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e68:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000e6c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000e70:	2101      	movs	r1, #1
 8000e72:	9101      	str	r1, [sp, #4]
 8000e74:	2101      	movs	r1, #1
 8000e76:	9100      	str	r1, [sp, #0]
 8000e78:	2113      	movs	r1, #19
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f001 f83e 	bl	8001efc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000e80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f503 6087 	add.w	r0, r3, #1080	; 0x438
 8000e8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e96:	681a      	ldr	r2, [r3, #0]
		pressure_control(20, (GenericChannel&)*this, 1, solenoid_0, 1),
 8000e98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	9101      	str	r1, [sp, #4]
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2114      	movs	r1, #20
 8000eb0:	f001 fe6c 	bl	8002b8c <_ZN22PressureControlChannelC1EhR14GenericChannelhR17DigitalOutChannelm>
 8000eb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000eb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f503 658d 	add.w	r5, r3, #1128	; 0x468
		rocket(22, press_1, press_0, press_2, servo_1, servo_2, pyro_igniter0, pyro_igniter1, 1),
 8000ec2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ec6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f103 06f4 	add.w	r6, r3, #244	; 0xf4
 8000ed0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ed4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f103 0cd8 	add.w	ip, r3, #216	; 0xd8
 8000ede:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000ef2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000efc:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000f00:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000f04:	6809      	ldr	r1, [r1, #0]
 8000f06:	f501 712a 	add.w	r1, r1, #680	; 0x2a8
 8000f0a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000f0e:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8000f12:	6800      	ldr	r0, [r0, #0]
 8000f14:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8000f18:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000f1c:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000f20:	6824      	ldr	r4, [r4, #0]
 8000f22:	f504 7461 	add.w	r4, r4, #900	; 0x384
		speaker(STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH3_PB10)
 8000f26:	2301      	movs	r3, #1
 8000f28:	9305      	str	r3, [sp, #20]
 8000f2a:	9404      	str	r4, [sp, #16]
 8000f2c:	9003      	str	r0, [sp, #12]
 8000f2e:	9102      	str	r1, [sp, #8]
 8000f30:	9201      	str	r2, [sp, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4663      	mov	r3, ip
 8000f38:	4632      	mov	r2, r6
 8000f3a:	2116      	movs	r1, #22
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f002 f98f 	bl	8003260 <_ZN13RocketChannelC1EhRK10ADCChannelS2_S2_R12ServoChannelS4_R11PyroChannelS6_m>
 8000f42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8000f50:	2201      	movs	r2, #1
 8000f52:	f887 211e 	strb.w	r2, [r7, #286]	; 0x11e
 8000f56:	2225      	movs	r2, #37	; 0x25
 8000f58:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 8000f5c:	f207 121f 	addw	r2, r7, #287	; 0x11f
 8000f60:	f507 718f 	add.w	r1, r7, #286	; 0x11e
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fbd7 	bl	8001718 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>
{
	registerChannel(&press_0);
 8000f6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	33d8      	adds	r3, #216	; 0xd8
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f001 fca6 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&press_1);
 8000f88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	33f4      	adds	r3, #244	; 0xf4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f001 fc97 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&press_2);
 8000fa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000faa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	f001 fc87 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&press_3);
 8000fc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	f001 fc77 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&press_4);
 8000fe6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ff4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f001 fc67 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&press_5);
 8001006:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800100a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001014:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800101e:	4619      	mov	r1, r3
 8001020:	4610      	mov	r0, r2
 8001022:	f001 fc57 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&temp_0);
 8001026:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800102a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001038:	e018      	b.n	800106c <_ZN3ECUC1Emmm+0x7cc>
 800103a:	bf00      	nop
 800103c:	0800b60c 	.word	0x0800b60c
 8001040:	0800b614 	.word	0x0800b614
 8001044:	0800b61c 	.word	0x0800b61c
 8001048:	0800b624 	.word	0x0800b624
 800104c:	0800b62c 	.word	0x0800b62c
 8001050:	0800b634 	.word	0x0800b634
 8001054:	0800b63c 	.word	0x0800b63c
 8001058:	0800b644 	.word	0x0800b644
 800105c:	0800b64c 	.word	0x0800b64c
 8001060:	0800b654 	.word	0x0800b654
 8001064:	0800b65c 	.word	0x0800b65c
 8001068:	0800b664 	.word	0x0800b664
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f001 fc2d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&temp_1);
 800107a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800107e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001088:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f001 fc1d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&temp_2);
 800109a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800109e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010b2:	4619      	mov	r1, r3
 80010b4:	4610      	mov	r0, r2
 80010b6:	f001 fc0d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&servo_0);
 80010ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f001 fbfd 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&servo_1);
 80010da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f001 fbed 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&servo_2);
 80010fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001108:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f001 fbdd 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pyro0_cont);
 800111a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800111e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001128:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001132:	4619      	mov	r1, r3
 8001134:	4610      	mov	r0, r2
 8001136:	f001 fbcd 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pyro1_cont);
 800113a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800113e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001148:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001152:	4619      	mov	r1, r3
 8001154:	4610      	mov	r0, r2
 8001156:	f001 fbbd 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pyro2_cont);
 800115a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800115e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001168:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f001 fbad 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pyro_igniter0);
 800117a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800117e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001188:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001192:	4619      	mov	r1, r3
 8001194:	4610      	mov	r0, r2
 8001196:	f001 fb9d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pyro_igniter1);
 800119a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800119e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80011b2:	4619      	mov	r1, r3
 80011b4:	4610      	mov	r0, r2
 80011b6:	f001 fb8d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pyro_igniter2);
 80011ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f001 fb7d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&solenoid_0);
 80011da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80011f2:	4619      	mov	r1, r3
 80011f4:	4610      	mov	r0, r2
 80011f6:	f001 fb6d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&solenoid_1);
 80011fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001208:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f001 fb5d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pressure_control);
 800121a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800121e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001228:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8001232:	4619      	mov	r1, r3
 8001234:	4610      	mov	r0, r2
 8001236:	f001 fb4d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&rocket);
 800123a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800123e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001248:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f001 fb3d 	bl	80028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>

	registerModule(&flash);
 800125a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800125e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001268:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001272:	4619      	mov	r1, r3
 8001274:	4610      	mov	r0, r2
 8001276:	f001 fb4b 	bl	8002910 <_ZN14GenericChannel14registerModuleEP14AbstractModule>
}
 800127a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800127e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800128a:	46bd      	mov	sp, r7
 800128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128e:	bf00      	nop

08001290 <_ZN3ECU4initEv>:

int ECU::init()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if (STRHAL_Init(STRHAL_SYSCLK_SRC_EXT, 8000000) != STRHAL_NOICE)
 8001298:	492d      	ldr	r1, [pc, #180]	; (8001350 <_ZN3ECU4initEv+0xc0>)
 800129a:	2002      	movs	r0, #2
 800129c:	f006 f8e2 	bl	8007464 <STRHAL_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <_ZN3ECU4initEv+0x26>
		return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b4:	e048      	b.n	8001348 <_ZN3ECU4initEv+0xb8>

	// init status LEDs
	STRHAL_GPIO_SingleInit(&ledRed, STRHAL_GPIO_TYPE_OPP);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	33c8      	adds	r3, #200	; 0xc8
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f007 fd8f 	bl	8008de0 <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&ledGreen, STRHAL_GPIO_TYPE_OPP);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	33d0      	adds	r3, #208	; 0xd0
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 fd89 	bl	8008de0 <STRHAL_GPIO_SingleInit>

	// init debug uart
	if (STRHAL_UART_Instance_Init(STRHAL_UART_DEBUG) != 0)
 80012ce:	2001      	movs	r0, #1
 80012d0:	f009 fc54 	bl	800ab7c <STRHAL_UART_Instance_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <_ZN3ECU4initEv+0x5a>
		return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e8:	e02e      	b.n	8001348 <_ZN3ECU4initEv+0xb8>

	if (can.init(receptor, heartbeatCan, COMMode::STANDARD_COM_MODE) != 0)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80012f0:	2300      	movs	r3, #0
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <_ZN3ECU4initEv+0xc4>)
 80012f4:	4918      	ldr	r1, [pc, #96]	; (8001358 <_ZN3ECU4initEv+0xc8>)
 80012f6:	f7fe ffff 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <_ZN3ECU4initEv+0x80>
		return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130e:	e01b      	b.n	8001348 <_ZN3ECU4initEv+0xb8>

	if (GenericChannel::init() != 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 ffb1 	bl	800227a <_ZN14GenericChannel4initEv>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <_ZN3ECU4initEv+0x9e>
		return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132c:	e00c      	b.n	8001348 <_ZN3ECU4initEv+0xb8>

	speaker.init();
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fa04 	bl	8001742 <_ZN7Speaker4initEv>

	STRHAL_GPIO_Write(&ledGreen, STRHAL_GPIO_VALUE_H);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	33d0      	adds	r3, #208	; 0xd0
 800133e:	2101      	movs	r1, #1
 8001340:	4618      	mov	r0, r3
 8001342:	f007 fda9 	bl	8008e98 <STRHAL_GPIO_Write>
	return 0;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	007a1200 	.word	0x007a1200
 8001354:	08002aa5 	.word	0x08002aa5
 8001358:	08002975 	.word	0x08002975

0800135c <_ZN3ECU4execEv>:

int ECU::exec()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	STRHAL_OPAMP_Run();
 8001364:	f007 ff4c 	bl	8009200 <STRHAL_OPAMP_Run>
	STRHAL_ADC_Run();
 8001368:	f006 fe9a 	bl	80080a0 <STRHAL_ADC_Run>
	STRHAL_QSPI_Run();
 800136c:	f008 f836 	bl	80093dc <STRHAL_QSPI_Run>

	if (can.exec() != 0)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3304      	adds	r3, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4610      	mov	r0, r2
 8001384:	4798      	blx	r3
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <_ZN3ECU4execEv+0x40>
		return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139a:	e022      	b.n	80013e2 <_ZN3ECU4execEv+0x86>

	STRHAL_GPIO_Write(&ledRed, STRHAL_GPIO_VALUE_H);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	33c8      	adds	r3, #200	; 0xc8
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 fd78 	bl	8008e98 <STRHAL_GPIO_Write>
	STRHAL_UART_Debug_Write_Blocking("RUNNING\n", 8, 50);
 80013a8:	2232      	movs	r2, #50	; 0x32
 80013aa:	2108      	movs	r1, #8
 80013ac:	480f      	ldr	r0, [pc, #60]	; (80013ec <_ZN3ECU4execEv+0x90>)
 80013ae:	f009 fd1f 	bl	800adf0 <STRHAL_UART_Debug_Write_Blocking>

	speaker.beep(2, 400, 300);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 80013b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80013bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80013c0:	2102      	movs	r1, #2
 80013c2:	f000 f9fa 	bl	80017ba <_ZN7Speaker4beepEhtt>
				// else ignore msg
			}

		}
#endif
		if (GenericChannel::exec() != 0)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 ffae 	bl	800232a <_ZN14GenericChannel4execEv>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f3      	beq.n	80013c6 <_ZN3ECU4execEv+0x6a>
			return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	speaker.beep(6, 100, 100);

	return 0;
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800b66c 	.word	0x0800b66c

080013f0 <_ZN3ECUD1Ev>:
#include <Can.h>
#include "../Modules/W25Qxx_Flash.h"
#include <Speaker.h>
#include <STRHAL.h>

class ECU: public GenericChannel
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4a46      	ldr	r2, [pc, #280]	; (8001514 <_ZN3ECUD1Ev+0x124>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f965 	bl	80016d4 <_ZN13RocketChannelD1Ev>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f93d 	bl	8001690 <_ZN22PressureControlChannelD1Ev>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f915 	bl	800164c <_ZN17DigitalOutChannelD1Ev>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f90f 	bl	800164c <_ZN17DigitalOutChannelD1Ev>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f8e7 	bl	8001608 <_ZN11PyroChannelD1Ev>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f8e1 	bl	8001608 <_ZN11PyroChannelD1Ev>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f8db 	bl	8001608 <_ZN11PyroChannelD1Ev>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f8b3 	bl	80015c4 <_ZN16DigitalInChannelD1Ev>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f8ad 	bl	80015c4 <_ZN16DigitalInChannelD1Ev>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f8a7 	bl	80015c4 <_ZN16DigitalInChannelD1Ev>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f87f 	bl	8001580 <_ZN12ServoChannelD1Ev>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f879 	bl	8001580 <_ZN12ServoChannelD1Ev>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f873 	bl	8001580 <_ZN12ServoChannelD1Ev>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f84b 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f845 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f83f 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 f839 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f833 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f82d 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f827 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	33f4      	adds	r3, #244	; 0xf4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f822 	bl	800153c <_ZN10ADCChannelD1Ev>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	33d8      	adds	r3, #216	; 0xd8
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f81d 	bl	800153c <_ZN10ADCChannelD1Ev>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f9a9 	bl	800085c <_ZN14GenericChannelD1Ev>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	0800b7f8 	.word	0x0800b7f8

08001518 <_ZN3ECUD0Ev>:
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff65 	bl	80013f0 <_ZN3ECUD1Ev>
 8001526:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f009 fefa 	bl	800b324 <_ZdlPvj>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <_ZN10ADCChannelD1Ev>:

#include "./Channels/AbstractChannel.h"
#include <can_houbolt/channels/adc16_channel_def.h>
#include <STRHAL.h>

class ADCChannel: public AbstractChannel
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <_ZN10ADCChannelD1Ev+0x20>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fbf1 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0800b840 	.word	0x0800b840

08001560 <_ZN10ADCChannelD0Ev>:
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe7 	bl	800153c <_ZN10ADCChannelD1Ev>
 800156e:	211c      	movs	r1, #28
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f009 fed7 	bl	800b324 <_ZdlPvj>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZN12ServoChannelD1Ev>:
	FAULT,
	MOVIN,
	CALIB,
};

class ServoChannel: public AbstractChannel
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_ZN12ServoChannelD1Ev+0x20>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fbcf 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800b9c4 	.word	0x0800b9c4

080015a4 <_ZN12ServoChannelD0Ev>:
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffe7 	bl	8001580 <_ZN12ServoChannelD1Ev>
 80015b2:	2168      	movs	r1, #104	; 0x68
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f009 feb5 	bl	800b324 <_ZdlPvj>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_ZN16DigitalInChannelD1Ev>:

#include "./Channels/AbstractChannel.h"
#include <can_houbolt/channels/adc16_channel_def.h>
#include <STRHAL.h>

class DigitalInChannel: public AbstractChannel
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <_ZN16DigitalInChannelD1Ev+0x20>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fbad 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800b8a0 	.word	0x0800b8a0

080015e8 <_ZN16DigitalInChannelD0Ev>:
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffe7 	bl	80015c4 <_ZN16DigitalInChannelD1Ev>
 80015f6:	2118      	movs	r1, #24
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f009 fe93 	bl	800b324 <_ZdlPvj>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZN11PyroChannelD1Ev>:
#include "./Channels/AbstractChannel.h"
#include "./Channels/DigitalInChannel.h"
#include <can_houbolt/channels/digital_out_channel_def.h>
#include <STRHAL.h>

class PyroChannel: public AbstractChannel
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_ZN11PyroChannelD1Ev+0x20>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fb8b 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800b960 	.word	0x0800b960

0800162c <_ZN11PyroChannelD0Ev>:
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffe7 	bl	8001608 <_ZN11PyroChannelD1Ev>
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f009 fe71 	bl	800b324 <_ZdlPvj>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN17DigitalOutChannelD1Ev>:

#include "./Channels/AbstractChannel.h"
#include <can_houbolt/channels/digital_out_channel_def.h>
#include <STRHAL.h>

class DigitalOutChannel: public AbstractChannel
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	4a05      	ldr	r2, [pc, #20]	; (800166c <_ZN17DigitalOutChannelD1Ev+0x20>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fb69 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	0800b8d0 	.word	0x0800b8d0

08001670 <_ZN17DigitalOutChannelD0Ev>:
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ffe7 	bl	800164c <_ZN17DigitalOutChannelD1Ev>
 800167e:	212c      	movs	r1, #44	; 0x2c
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f009 fe4f 	bl	800b324 <_ZdlPvj>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZN22PressureControlChannelD1Ev>:
#include "./Channels/DigitalOutChannel.h"
#include "./Channels/ADCChannel.h"
#include <can_houbolt/channels/control_channel_def.h>
#include <STRHAL.h>

class PressureControlChannel: public AbstractChannel
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <_ZN22PressureControlChannelD1Ev+0x20>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fb47 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	0800b930 	.word	0x0800b930

080016b4 <_ZN22PressureControlChannelD0Ev>:
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ffe7 	bl	8001690 <_ZN22PressureControlChannelD1Ev>
 80016c2:	2130      	movs	r1, #48	; 0x30
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f009 fe2d 	bl	800b324 <_ZdlPvj>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_ZN13RocketChannelD1Ev>:
	VALVES_SLOWLY_OPEN,
	VALVES_FULLY_OPEN,
	IGNITION_OFF
};

class RocketChannel: public AbstractChannel
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <_ZN13RocketChannelD1Ev+0x20>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fb25 	bl	8001d34 <_ZN15AbstractChannelD1Ev>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	0800b990 	.word	0x0800b990

080016f8 <_ZN13RocketChannelD0Ev>:
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ffe7 	bl	80016d4 <_ZN13RocketChannelD1Ev>
 8001706:	2160      	movs	r1, #96	; 0x60
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f009 fe0b 	bl	800b324 <_ZdlPvj>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>:
#include "../Inc/Speaker.h"

Speaker::Speaker(const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control) :
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
		pwmTimer(pwmTimer), ctrlChannelId(control)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	705a      	strb	r2, [r3, #1]
{
}
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_ZN7Speaker4initEv>:

int Speaker::init()
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	if (STRHAL_TIM_PWM_Init(pwmTimer, PWM_PSC, PWM_RES) < 0)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001752:	2158      	movs	r1, #88	; 0x58
 8001754:	4618      	mov	r0, r3
 8001756:	f008 fb83 	bl	8009e60 <STRHAL_TIM_PWM_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	0fdb      	lsrs	r3, r3, #31
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <_ZN7Speaker4initEv+0x28>
		return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001768:	e023      	b.n	80017b2 <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_AddChannel(&pwmChannel, ctrlChannelId, STRHAL_TIM_PWM_CHANNELTYPE_SO) < 0)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	1c98      	adds	r0, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	f008 fc05 	bl	8009f84 <STRHAL_TIM_PWM_AddChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	0fdb      	lsrs	r3, r3, #31
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <_ZN7Speaker4initEv+0x48>
		return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001788:	e013      	b.n	80017b2 <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_SetDuty(&pwmChannel, 1800) != 1800)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3302      	adds	r3, #2
 800178e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8001792:	4618      	mov	r0, r3
 8001794:	f008 fc6c 	bl	800a070 <STRHAL_TIM_PWM_SetDuty>
 8001798:	4603      	mov	r3, r0
 800179a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <_ZN7Speaker4initEv+0x6e>
	{
		return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ae:	e000      	b.n	80017b2 <_ZN7Speaker4initEv+0x70>
	}

	return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_ZN7Speaker4beepEhtt>:
{
	STRHAL_TIM_PWM_Enable(&pwmChannel, ena);
}

void Speaker::beep(uint8_t n, uint16_t tot1, uint16_t tot2)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	4608      	mov	r0, r1
 80017c4:	4611      	mov	r1, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	4603      	mov	r3, r0
 80017ca:	72fb      	strb	r3, [r7, #11]
 80017cc:	460b      	mov	r3, r1
 80017ce:	813b      	strh	r3, [r7, #8]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < n; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	da17      	bge.n	8001810 <_ZN7Speaker4beepEhtt+0x56>
	{
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3302      	adds	r3, #2
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f008 fc6e 	bl	800a0c8 <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot1);
 80017ec:	893b      	ldrh	r3, [r7, #8]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 fb7e 	bl	8006ef0 <LL_mDelay>
		STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3302      	adds	r3, #2
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f008 fc64 	bl	800a0c8 <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot2);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f005 fb74 	bl	8006ef0 <LL_mDelay>
	for (int i = 0; i < n; i++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e7e3      	b.n	80017d8 <_ZN7Speaker4beepEhtt+0x1e>
	}
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <main>:
#include "RCU.h"
#include "LCB.h"
#include "git_version.h"

int main(void)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
 800181e:	af00      	add	r7, sp, #0

#ifdef ECU_BOARD
#ifdef UART_DEBUG
	ECU ecu(6,GIT_COMMIT_HASH_VALUE,1000); //6 ECU, 7 PMU, 9 TW
#else
	ECU ecu(6,GIT_COMMIT_HASH_VALUE, 1);
 8001820:	4638      	mov	r0, r7
 8001822:	2301      	movs	r3, #1
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <main+0x5c>)
 8001826:	2106      	movs	r1, #6
 8001828:	f7ff f83a 	bl	80008a0 <_ZN3ECUC1Emmm>
#endif

	if(ecu.init() != 0)
 800182c:	463b      	mov	r3, r7
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fd2e 	bl	8001290 <_ZN3ECU4initEv>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <main+0x3a>
		return -1;
 8001844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	ECU ecu(6,GIT_COMMIT_HASH_VALUE, 1);
 8001848:	463b      	mov	r3, r7
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fdd0 	bl	80013f0 <_ZN3ECUD1Ev>
 8001850:	e009      	b.n	8001866 <main+0x4e>

	STRHAL_UART_Debug_Write_Blocking("ECU STARTED\n", 12, 50);
 8001852:	2232      	movs	r2, #50	; 0x32
 8001854:	210c      	movs	r1, #12
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <main+0x60>)
 8001858:	f009 faca 	bl	800adf0 <STRHAL_UART_Debug_Write_Blocking>
	ecu.exec();
 800185c:	463b      	mov	r3, r7
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fd7c 	bl	800135c <_ZN3ECU4execEv>

	STRHAL_UART_Debug_Write_Blocking("LCB STARTED\n", 12, 50);
	lcb.exec();
#endif

	while (1);
 8001864:	e7fe      	b.n	8001864 <main+0x4c>
}
 8001866:	4623      	mov	r3, r4
 8001868:	4618      	mov	r0, r3
 800186a:	f207 47d4 	addw	r7, r7, #1236	; 0x4d4
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	8bb1a754 	.word	0x8bb1a754
 8001878:	0800b784 	.word	0x0800b784

0800187c <STRHAL_OofHandler>:

void STRHAL_OofHandler(STRHAL_Oof_t oof, char *msg)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
	do
	{
	} while (0);
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <NMI_Handler>:
#include "stm32g4xx_it.h"
#include <STRHAL.h>

void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, (1 << 1));
 80018c4:	2102      	movs	r1, #2
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <HardFault_Handler+0x10>)
 80018c8:	f7ff ffe4 	bl	8001894 <LL_GPIO_ResetOutputPin>
	while (1)
 80018cc:	e7fe      	b.n	80018cc <HardFault_Handler+0xc>
 80018ce:	bf00      	nop
 80018d0:	48000c00 	.word	0x48000c00

080018d4 <MemManage_Handler>:
	{
	}
}

void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:
	{
	}
}

void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
	while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:
	{
	}
}

void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:
	{
	}
}

void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_kill>:

int _kill(int pid, int sig)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800192a:	f009 fd29 	bl	800b380 <__errno>
 800192e:	4603      	mov	r3, r0
 8001930:	2216      	movs	r2, #22
 8001932:	601a      	str	r2, [r3, #0]
	return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_exit>:

void _exit(int status)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffe7 	bl	8001920 <_kill>
	while (1)
 8001952:	e7fe      	b.n	8001952 <_exit+0x12>

08001954 <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <SystemInit+0x28>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <SystemInit+0x28>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <SystemInit+0x28>)
 800196a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196e:	609a      	str	r2, [r3, #8]
#endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm>:
#include <Channels/ADCChannel.h>
#include <cstring>
#include <cstdio>

ADCChannel::ADCChannel(uint8_t id, const STRHAL_ADC_Channel_t adcChannel, uint32_t refreshDivider) :
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	4608      	mov	r0, r1
 800198a:	4639      	mov	r1, r7
 800198c:	e881 000c 	stmia.w	r1, {r2, r3}
 8001990:	4603      	mov	r3, r0
 8001992:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_ADC16, id, refreshDivider), adcChannel(adcChannel)
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	7afa      	ldrb	r2, [r7, #11]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2103      	movs	r1, #3
 800199c:	f000 f8c6 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80019a0:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <_ZN10ADCChannelC1Eh20STRHAL_ADC_Channel_tm+0x44>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3310      	adds	r3, #16
 80019aa:	463a      	mov	r2, r7
 80019ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
{
}
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800b840 	.word	0x0800b840

080019c8 <_ZN10ADCChannel4initEv>:
		AbstractChannel(CHANNEL_TYPE_ADC16, id, refreshDivider), adcMeasurement(adcPtr)
{
}

int ADCChannel::init()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	if (adcMeasurement == nullptr)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <_ZN10ADCChannel4initEv+0x22>
		adcMeasurement = STRHAL_ADC_SubscribeChannel(&adcChannel, STRHAL_ADC_INTYPE_REGULAR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3310      	adds	r3, #16
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 fa4c 	bl	8007e7c <STRHAL_ADC_SubscribeChannel>
 80019e4:	4602      	mov	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]

	if (adcMeasurement == nullptr)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <_ZN10ADCChannel4initEv+0x30>
		return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f6:	e000      	b.n	80019fa <_ZN10ADCChannel4initEv+0x32>

	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZN10ADCChannel4execEv>:

int ADCChannel::exec()
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_ZN10ADCChannel5resetEv>:

int ADCChannel::reset()
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_ZN10ADCChannel14processMessageEhPhRh>:

int ADCChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	7af9      	ldrb	r1, [r7, #11]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	f000 f8fb 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 8001a4a:	4603      	mov	r3, r0
	}
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZN10ADCChannel13getSensorDataEPhRh>:

int ADCChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
//	*out = *adcMeasurement << 4; // shift it to 16bit full scale
	*out = *adcMeasurement; // with Oversampling enabled
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	801a      	strh	r2, [r3, #0]
	{
	 sprintf(buf,"%d\n", *adcMeasurement);
	 STRHAL_UART_Debug_Write_DMA(buf, strlen(buf));
	}
	*/
	n += ADC16_DATA_N_BYTES;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	701a      	strb	r2, [r3, #0]
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_ZN10ADCChannel11setVariableEhl>:

int ADCChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001aa0:	7afb      	ldrb	r3, [r7, #11]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <_ZN10ADCChannel11setVariableEhl+0x24>
	{
		case ADC16_REFRESH_DIVIDER:
			refreshDivider = data;
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
			return 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e001      	b.n	8001aba <_ZN10ADCChannel11setVariableEhl+0x28>
		default:
			return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_ZNK10ADCChannel11getVariableEhRl>:

int ADCChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <_ZNK10ADCChannel11getVariableEhRl+0x26>
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10f      	bne.n	8001afe <_ZNK10ADCChannel11getVariableEhRl+0x38>
	{
		case ADC16_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
			return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e00a      	b.n	8001b02 <_ZNK10ADCChannel11getVariableEhRl+0x3c>
		case ADC16_MEASUREMENT:
			data = (int32_t) *adcMeasurement;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
			return 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e001      	b.n	8001b02 <_ZNK10ADCChannel11getVariableEhRl+0x3c>
		default:
			return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_ZNK10ADCChannel14getMeasurementEv>:

uint16_t ADCChannel::getMeasurement() const
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return *adcMeasurement;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>:
#include "../Inc/Channels/AbstractChannel.h"

#include <cstring>

AbstractChannel::AbstractChannel(CHANNEL_TYPE type, uint8_t id, uint32_t refreshDivider) :
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	72fb      	strb	r3, [r7, #11]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	72bb      	strb	r3, [r7, #10]
		refreshDivider(refreshDivider), refreshCounter(0), channelType(type), channelId(id), channelStatus(CHANNEL_STATUS_NOICE)
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm+0x44>)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	7afa      	ldrb	r2, [r7, #11]
 8001b54:	731a      	strb	r2, [r3, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	7aba      	ldrb	r2, [r7, #10]
 8001b5a:	735a      	strb	r2, [r3, #13]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	739a      	strb	r2, [r3, #14]
{

}
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	0800b870 	.word	0x0800b870

08001b74 <_ZNK15AbstractChannel14getChannelTypeEv>:

CHANNEL_TYPE AbstractChannel::getChannelType() const
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	return channelType;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7b1b      	ldrb	r3, [r3, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_ZNK15AbstractChannel16getChannelStatusEv>:

CHANNEL_STATUS AbstractChannel::getChannelStatus() const
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	return channelStatus;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7b9b      	ldrb	r3, [r3, #14]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_ZNK15AbstractChannel12getChannelIdEv>:

uint8_t AbstractChannel::getChannelId() const
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	return channelId;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7b5b      	ldrb	r3, [r3, #13]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_ZNK15AbstractChannel11IsChannelIdEh>:
{
	return type == channelType;
}

bool AbstractChannel::IsChannelId(uint8_t id) const
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
	return channelId == id;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7b5b      	ldrb	r3, [r3, #13]
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_ZN15AbstractChannel11IsRefreshedEv>:

bool AbstractChannel::IsRefreshed()
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	if (refreshDivider == 0)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <_ZN15AbstractChannel11IsRefreshedEv+0x14>
		return false;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e010      	b.n	8001c1a <_ZN15AbstractChannel11IsRefreshedEv+0x36>
	refreshCounter++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	609a      	str	r2, [r3, #8]
	if (refreshCounter != refreshDivider)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <_ZN15AbstractChannel11IsRefreshedEv+0x2e>
		return false;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e003      	b.n	8001c1a <_ZN15AbstractChannel11IsRefreshedEv+0x36>

	refreshCounter = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
	return true;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_ZNK15AbstractChannel14getMeasurementEv>:


uint16_t AbstractChannel::getMeasurement() const
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <_ZN15AbstractChannel14processMessageEhPhRh>:

int AbstractChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	72fb      	strb	r3, [r7, #11]
	SetMsg_t *setMsg;
	setMsg = (SetMsg_t*) returnData;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	61fb      	str	r3, [r7, #28]
	int32_t temp = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
	int status = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
	switch (commandId)
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d862      	bhi.n	8001d28 <_ZN15AbstractChannel14processMessageEhPhRh+0xe8>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <_ZN15AbstractChannel14processMessageEhPhRh+0x28>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001cb3 	.word	0x08001cb3
 8001c6c:	08001d29 	.word	0x08001d29
 8001c70:	08001d1f 	.word	0x08001d1f
 8001c74:	08001d29 	.word	0x08001d29
 8001c78:	08001cc3 	.word	0x08001cc3
 8001c7c:	08001d29 	.word	0x08001d29
 8001c80:	08001c85 	.word	0x08001c85
	{
		case COMMON_REQ_GET_VARIABLE:
			status = getVariable(setMsg->variable_id, temp);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3324      	adds	r3, #36	; 0x24
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	7811      	ldrb	r1, [r2, #0]
 8001c90:	f107 0214 	add.w	r2, r7, #20
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	4798      	blx	r3
 8001c98:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3305      	adds	r3, #5
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	701a      	strb	r2, [r3, #0]
			return status;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	e03c      	b.n	8001d2c <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_RESET_SETTINGS:
			return reset();
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	330c      	adds	r3, #12
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	4798      	blx	r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	e034      	b.n	8001d2c <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_SET_VARIABLE:
			if (setVariable(setMsg->variable_id, setMsg->value) == -1)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3320      	adds	r3, #32
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	7811      	ldrb	r1, [r2, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	f8d2 2001 	ldr.w	r2, [r2, #1]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	4798      	blx	r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <_ZN15AbstractChannel14processMessageEhPhRh+0xb0>
				return -1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cee:	e01d      	b.n	8001d2c <_ZN15AbstractChannel14processMessageEhPhRh+0xec>
			status = getVariable(setMsg->variable_id, temp);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3324      	adds	r3, #36	; 0x24
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	7811      	ldrb	r1, [r2, #0]
 8001cfc:	f107 0214 	add.w	r2, r7, #20
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	4798      	blx	r3
 8001d04:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	3305      	adds	r3, #5
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
			return status;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	e006      	b.n	8001d2c <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_STATUS:
			return getChannelStatus();
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff ff34 	bl	8001b8c <_ZNK15AbstractChannel16getChannelStatusEv>
 8001d24:	4603      	mov	r3, r0
 8001d26:	e001      	b.n	8001d2c <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		default:
			return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN15AbstractChannelD1Ev>:

AbstractChannel::~AbstractChannel()
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <_ZN15AbstractChannelD1Ev+0x1c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	601a      	str	r2, [r3, #0]
{
}
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	0800b870 	.word	0x0800b870

08001d54 <_ZN16DigitalInChannelC1EhRK13STRHAL_GPIO_tm>:
#include <Channels/DigitalInChannel.h>

DigitalInChannel::DigitalInChannel(uint8_t id, const STRHAL_GPIO_t &digitalInPin, uint32_t refreshDivider) :
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	460b      	mov	r3, r1
 8001d62:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_ADC16, id, refreshDivider), digitalInPin(digitalInPin)
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	7afa      	ldrb	r2, [r7, #11]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	f7ff fede 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <_ZN16DigitalInChannelC1EhRK13STRHAL_GPIO_tm+0x3c>)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	3310      	adds	r3, #16
 8001d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d80:	e883 0003 	stmia.w	r3, {r0, r1}
{
}
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	0800b8a0 	.word	0x0800b8a0

08001d94 <_ZN16DigitalInChannel4initEv>:

int DigitalInChannel::init()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&digitalInPin, STRHAL_GPIO_TYPE_IHZ);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3310      	adds	r3, #16
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f007 f81c 	bl	8008de0 <STRHAL_GPIO_SingleInit>

	return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_ZN16DigitalInChannel4execEv>:

int DigitalInChannel::exec()
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_ZN16DigitalInChannel5resetEv>:

int DigitalInChannel::reset()
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_ZN16DigitalInChannel14processMessageEhPhRh>:

int DigitalInChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	460b      	mov	r3, r1
 8001dec:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	7af9      	ldrb	r1, [r7, #11]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	f7ff ff23 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 8001dfa:	4603      	mov	r3, r0
	}
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN16DigitalInChannel13getSensorDataEPhRh>:

int DigitalInChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
	*out = (STRHAL_GPIO_Read(&digitalInPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3310      	adds	r3, #16
 8001e20:	4618      	mov	r0, r3
 8001e22:	f007 f862 	bl	8008eea <STRHAL_GPIO_Read>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	801a      	strh	r2, [r3, #0]

	n += ADC16_DATA_N_BYTES;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	701a      	strb	r2, [r3, #0]
	return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_ZN16DigitalInChannel11setVariableEhl>:

int DigitalInChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	460b      	mov	r3, r1
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d107      	bne.n	8001e72 <_ZN16DigitalInChannel11setVariableEhl+0x24>
	{
		case ADC16_REFRESH_DIVIDER:
			refreshDivider = data;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
			return 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e001      	b.n	8001e76 <_ZN16DigitalInChannel11setVariableEhl+0x28>
		default:
			return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_ZNK16DigitalInChannel11getVariableEhRl>:

int DigitalInChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <_ZNK16DigitalInChannel11getVariableEhRl+0x26>
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d116      	bne.n	8001ec8 <_ZNK16DigitalInChannel11getVariableEhRl+0x46>
	{
		case ADC16_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
			return 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e011      	b.n	8001ecc <_ZNK16DigitalInChannel11getVariableEhRl+0x4a>
		case ADC16_MEASUREMENT:
			data = (int32_t) (STRHAL_GPIO_Read(&digitalInPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3310      	adds	r3, #16
 8001eac:	4618      	mov	r0, r3
 8001eae:	f007 f81c 	bl	8008eea <STRHAL_GPIO_Read>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
			return 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e001      	b.n	8001ecc <_ZNK16DigitalInChannel11getVariableEhRl+0x4a>
		default:
			return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNK16DigitalInChannel14getMeasurementEv>:

uint16_t DigitalInChannel::getMeasurement() const
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	return (STRHAL_GPIO_Read(&digitalInPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3310      	adds	r3, #16
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f007 f802 	bl	8008eea <STRHAL_GPIO_Read>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	b29b      	uxth	r3, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>:
#include <Channels/DigitalOutChannel.h>

DigitalOutChannel::DigitalOutChannel(uint8_t id, const STRHAL_ADC_Channel_t &adcChannel, const STRHAL_GPIO_t &cntrlPin, STRHAL_ADC_InType_t adcInType, uint32_t refreshDivider) :
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), adcChannel(adcChannel), cntrlPin(cntrlPin), adcInType(adcInType), hasFeedback(true)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	7afa      	ldrb	r2, [r7, #11]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2107      	movs	r1, #7
 8001f14:	f7ff fe0a 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8001f18:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x60>)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	3314      	adds	r3, #20
 8001f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f28:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	3320      	adds	r3, #32
 8001f38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	7e3a      	ldrb	r2, [r7, #24]
 8001f44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
{
}
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	0800b8d0 	.word	0x0800b8d0

08001f60 <_ZN17DigitalOutChannel4initEv>:
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), cntrlPin(cntrlPin)
{
}

int DigitalOutChannel::init()
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&cntrlPin, STRHAL_GPIO_TYPE_OPP);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3320      	adds	r3, #32
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f006 ff36 	bl	8008de0 <STRHAL_GPIO_SingleInit>
	if (hasFeedback)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d013      	beq.n	8001fa6 <_ZN17DigitalOutChannel4initEv+0x46>
	{
		adcMeasurement = STRHAL_ADC_SubscribeChannel(&adcChannel, adcInType);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f103 0214 	add.w	r2, r3, #20
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f005 ff75 	bl	8007e7c <STRHAL_ADC_SubscribeChannel>
 8001f92:	4602      	mov	r2, r0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	61da      	str	r2, [r3, #28]

		if (adcMeasurement == nullptr)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_ZN17DigitalOutChannel4initEv+0x46>
			return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa4:	e000      	b.n	8001fa8 <_ZN17DigitalOutChannel4initEv+0x48>
	}

	return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN17DigitalOutChannel4execEv>:

int DigitalOutChannel::exec()
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_ZN17DigitalOutChannel5resetEv>:

int DigitalOutChannel::reset()
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_ZN17DigitalOutChannel14processMessageEhPhRh>:

int DigitalOutChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	7af9      	ldrb	r1, [r7, #11]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	f7ff fe24 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 8001ff8:	4603      	mov	r3, r0
	}
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_ZN17DigitalOutChannel13getSensorDataEPhRh>:

int DigitalOutChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8002002:	b480      	push	{r7}
 8002004:	b087      	sub	sp, #28
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4413      	add	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
	*out = (hasFeedback) ? (*adcMeasurement << 4) : 0; // shift to 16bit full scale, if no feedback is present return 0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x30>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	b29a      	uxth	r2, r3
 8002030:	e000      	b.n	8002034 <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x32>
 8002032:	2200      	movs	r2, #0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	801a      	strh	r2, [r3, #0]

	n += DIGITAL_OUT_DATA_N_BYTES;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3302      	adds	r3, #2
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	701a      	strb	r2, [r3, #0]
	return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <_ZN17DigitalOutChannel11setVariableEhl>:

int DigitalOutChannel::setVariable(uint8_t variableId, int32_t data)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	460b      	mov	r3, r1
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d833      	bhi.n	80020d0 <_ZN17DigitalOutChannel11setVariableEhl+0x7c>
 8002068:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <_ZN17DigitalOutChannel11setVariableEhl+0x1c>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002085 	.word	0x08002085
 8002074:	080020a9 	.word	0x080020a9
 8002078:	080020b5 	.word	0x080020b5
 800207c:	080020d1 	.word	0x080020d1
 8002080:	080020c1 	.word	0x080020c1
	{
		case DIGITAL_OUT_STATE:
			if (setState(data) != 0)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4619      	mov	r1, r3
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f876 	bl	800217a <_ZN17DigitalOutChannel8setStateEm>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <_ZN17DigitalOutChannel11setVariableEhl+0x50>
				return -1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a2:	e017      	b.n	80020d4 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
			return 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e015      	b.n	80020d4 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_DUTY_CYCLE:
			dutyCycle = data;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	821a      	strh	r2, [r3, #16]
			return 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e00f      	b.n	80020d4 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_FREQUENCY:
			frequency = data;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	825a      	strh	r2, [r3, #18]
			return 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	e009      	b.n	80020d4 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
			return 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e001      	b.n	80020d4 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		default:
			return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZNK17DigitalOutChannel11getVariableEhRl>:

int DigitalOutChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	460b      	mov	r3, r1
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d82b      	bhi.n	8002148 <_ZNK17DigitalOutChannel11getVariableEhRl+0x6c>
 80020f0:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <_ZNK17DigitalOutChannel11getVariableEhRl+0x1c>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	0800210d 	.word	0x0800210d
 80020fc:	0800211f 	.word	0x0800211f
 8002100:	0800212d 	.word	0x0800212d
 8002104:	08002149 	.word	0x08002149
 8002108:	0800213b 	.word	0x0800213b
	{
		case DIGITAL_OUT_STATE:
			data = getState();
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f821 	bl	8002154 <_ZNK17DigitalOutChannel8getStateEv>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
			return 0;
 800211a:	2300      	movs	r3, #0
 800211c:	e016      	b.n	800214c <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_DUTY_CYCLE:
			data = dutyCycle;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8a1b      	ldrh	r3, [r3, #16]
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	601a      	str	r2, [r3, #0]
			return 0;
 8002128:	2300      	movs	r3, #0
 800212a:	e00f      	b.n	800214c <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_FREQUENCY:
			data = frequency;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8a5b      	ldrh	r3, [r3, #18]
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
			return 0;
 8002136:	2300      	movs	r3, #0
 8002138:	e008      	b.n	800214c <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]
			return 0;
 8002144:	2300      	movs	r3, #0
 8002146:	e001      	b.n	800214c <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		default:
			return -1;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZNK17DigitalOutChannel8getStateEv>:

uint32_t DigitalOutChannel::getState() const
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	return (STRHAL_GPIO_ReadOutput(&cntrlPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3320      	adds	r3, #32
 8002160:	4618      	mov	r0, r3
 8002162:	f006 fee1 	bl	8008f28 <STRHAL_GPIO_ReadOutput>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf14      	ite	ne
 800216c:	2301      	movne	r3, #1
 800216e:	2300      	moveq	r3, #0
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_ZN17DigitalOutChannel8setStateEm>:

int DigitalOutChannel::setState(uint32_t state)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
	if (state == 0)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <_ZN17DigitalOutChannel8setStateEm+0x1e>
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_L);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3320      	adds	r3, #32
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f006 fe81 	bl	8008e98 <STRHAL_GPIO_Write>
 8002196:	e005      	b.n	80021a4 <_ZN17DigitalOutChannel8setStateEm+0x2a>
	}
	else
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_H);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3320      	adds	r3, #32
 800219c:	2101      	movs	r1, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f006 fe7a 	bl	8008e98 <STRHAL_GPIO_Write>
	}
	return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_ZNK17DigitalOutChannel14getMeasurementEv>:
{
	return false;
}

uint16_t DigitalOutChannel::getMeasurement() const
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	return *adcMeasurement;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_ZN14GenericChannelC1Emmm>:
#include <git_version.h>

GenericChannel* GenericChannel::gcPtr = nullptr; // necessary for static callbacks
bool GenericChannel::loraActive = false;

GenericChannel::GenericChannel(uint32_t nodeId, uint32_t firmwareVersion, uint32_t refreshDivider) :
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
		AbstractChannel(CHANNEL_TYPE_NODE_GENERIC, GENERIC_CHANNEL_ID, refreshDivider), can(Can::instance(nodeId)), flash(W25Qxx_Flash::instance()), nodeId(nodeId), firmwareVersion(GIT_COMMIT_HASH_VALUE)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	223f      	movs	r2, #63	; 0x3f
 80021e0:	2101      	movs	r1, #1
 80021e2:	f7ff fca3 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <_ZN14GenericChannelC1Emmm+0x88>)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3310      	adds	r3, #16
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f009 f903 	bl	800b400 <memset>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3390      	adds	r3, #144	; 0x90
 80021fe:	2220      	movs	r2, #32
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f009 f8fc 	bl	800b400 <memset>
 8002208:	68b8      	ldr	r0, [r7, #8]
 800220a:	f7fe f82d 	bl	8000268 <_ZN3Can8instanceEm>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002216:	f002 fb4d 	bl	80048b4 <_ZN12W25Qxx_Flash8instanceEv>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <_ZN14GenericChannelC1Emmm+0x8c>)
 800222e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
{
	gcPtr = this;
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <_ZN14GenericChannelC1Emmm+0x90>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	0800b900 	.word	0x0800b900
 8002258:	8bb1a754 	.word	0x8bb1a754
 800225c:	200005e0 	.word	0x200005e0

08002260 <_ZNK14GenericChannel9getNodeIdEv>:

uint32_t GenericChannel::getNodeId() const
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	return nodeId;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_ZN14GenericChannel4initEv>:

int GenericChannel::init()
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b08a      	sub	sp, #40	; 0x28
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3390      	adds	r3, #144	; 0x90
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3320      	adds	r3, #32
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	429a      	cmp	r2, r3
 8002298:	d01a      	beq.n	80022d0 <_ZN14GenericChannel4initEv+0x56>
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00f      	beq.n	80022c6 <_ZN14GenericChannel4initEv+0x4c>
			continue;
		if (module->init() != 0)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6978      	ldr	r0, [r7, #20]
 80022ae:	4798      	blx	r3
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <_ZN14GenericChannel4initEv+0x4e>
			return -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c4:	e02d      	b.n	8002322 <_ZN14GenericChannel4initEv+0xa8>
			continue;
 80022c6:	bf00      	nop
	for (AbstractModule *module : modules)
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	3304      	adds	r3, #4
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	e7e0      	b.n	8002292 <_ZN14GenericChannel4initEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3310      	adds	r3, #16
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	623b      	str	r3, [r7, #32]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3380      	adds	r3, #128	; 0x80
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	6a3a      	ldr	r2, [r7, #32]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d01b      	beq.n	8002320 <_ZN14GenericChannel4initEv+0xa6>
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <_ZN14GenericChannel4initEv+0x9c>
			continue;
		if (channel->init() != 0)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3308      	adds	r3, #8
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68b8      	ldr	r0, [r7, #8]
 80022fe:	4798      	blx	r3
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <_ZN14GenericChannel4initEv+0x9e>
		{
			return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002314:	e005      	b.n	8002322 <_ZN14GenericChannel4initEv+0xa8>
			continue;
 8002316:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3304      	adds	r3, #4
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	e7df      	b.n	80022e0 <_ZN14GenericChannel4initEv+0x66>
		}
	}

	return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_ZN14GenericChannel4execEv>:

int GenericChannel::exec()
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b08a      	sub	sp, #40	; 0x28
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3390      	adds	r3, #144	; 0x90
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	3320      	adds	r3, #32
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	429a      	cmp	r2, r3
 8002348:	d01b      	beq.n	8002382 <_ZN14GenericChannel4execEv+0x58>
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <_ZN14GenericChannel4execEv+0x4e>
			continue;
		if (module->exec() != 0)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3308      	adds	r3, #8
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	4798      	blx	r3
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <_ZN14GenericChannel4execEv+0x50>
			return -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002376:	e02d      	b.n	80023d4 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 8002378:	bf00      	nop
	for (AbstractModule *module : modules)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3304      	adds	r3, #4
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	e7df      	b.n	8002342 <_ZN14GenericChannel4execEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3310      	adds	r3, #16
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3380      	adds	r3, #128	; 0x80
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	429a      	cmp	r2, r3
 8002398:	d01b      	beq.n	80023d2 <_ZN14GenericChannel4execEv+0xa8>
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <_ZN14GenericChannel4execEv+0x9e>
			continue;
		if (channel->exec() != 0)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3310      	adds	r3, #16
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	4798      	blx	r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <_ZN14GenericChannel4execEv+0xa0>
			return -1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c6:	e005      	b.n	80023d4 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 80023c8:	bf00      	nop
	for (AbstractChannel *channel : channels)
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	3304      	adds	r3, #4
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	e7df      	b.n	8002392 <_ZN14GenericChannel4execEv+0x68>
	}
	return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3728      	adds	r7, #40	; 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZN14GenericChannel5resetEv>:

int GenericChannel::reset()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	(void) flash.reset();
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3304      	adds	r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4610      	mov	r0, r2
 80023f8:	4798      	blx	r3
	return 0;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZN14GenericChannel14processMessageEhPhRh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	460b      	mov	r3, r1
 8002412:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	2b12      	cmp	r3, #18
 8002418:	d86d      	bhi.n	80024f6 <_ZN14GenericChannel14processMessageEhPhRh+0xf2>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <_ZN14GenericChannel14processMessageEhPhRh+0x1c>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	0800248f 	.word	0x0800248f
 8002424:	080024f7 	.word	0x080024f7
 8002428:	080024f7 	.word	0x080024f7
 800242c:	080024f7 	.word	0x080024f7
 8002430:	080024f7 	.word	0x080024f7
 8002434:	080024f7 	.word	0x080024f7
 8002438:	080024f7 	.word	0x080024f7
 800243c:	080024f7 	.word	0x080024f7
 8002440:	080024f7 	.word	0x080024f7
 8002444:	080024f7 	.word	0x080024f7
 8002448:	0800247b 	.word	0x0800247b
 800244c:	080024f7 	.word	0x080024f7
 8002450:	0800246d 	.word	0x0800246d
 8002454:	080024f7 	.word	0x080024f7
 8002458:	080024f7 	.word	0x080024f7
 800245c:	080024f7 	.word	0x080024f7
 8002460:	080024f7 	.word	0x080024f7
 8002464:	080024f7 	.word	0x080024f7
 8002468:	080024db 	.word	0x080024db
	{
		case GENERIC_REQ_NODE_INFO:
			//LL_mDelay(100*this->nodeId);
			return this->getNodeInfo(returnData, n);
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f9d2 	bl	800281a <_ZN14GenericChannel11getNodeInfoEPhRh>
 8002476:	4603      	mov	r3, r0
 8002478:	e045      	b.n	8002506 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_DATA:
			return this->getSensorData(returnData, n);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3318      	adds	r3, #24
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	4798      	blx	r3
 800248a:	4603      	mov	r3, r0
 800248c:	e03b      	b.n	8002506 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_RESET_ALL_SETTINGS:
			(void) flash.configReset();
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002494:	4618      	mov	r0, r3
 8002496:	f002 ff13 	bl	80052c0 <_ZN12W25Qxx_Flash11configResetEv>
			for (AbstractChannel *channel : channels)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3310      	adds	r3, #16
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	3380      	adds	r3, #128	; 0x80
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d011      	beq.n	80024d6 <_ZN14GenericChannel14processMessageEhPhRh+0xd2>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
			{
				if (channel == nullptr)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <_ZN14GenericChannel14processMessageEhPhRh+0xc8>
					continue;

				channel->reset(); // TODO implement good reset for every channel
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6938      	ldr	r0, [r7, #16]
 80024c8:	4798      	blx	r3
 80024ca:	e000      	b.n	80024ce <_ZN14GenericChannel14processMessageEhPhRh+0xca>
					continue;
 80024cc:	bf00      	nop
			for (AbstractChannel *channel : channels)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	e7e9      	b.n	80024aa <_ZN14GenericChannel14processMessageEhPhRh+0xa6>
			}
			return 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e015      	b.n	8002506 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_FLASH_CLEAR:
			(void) flash.setState(FlashState::CLEARING);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80024e0:	2101      	movs	r1, #1
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 fbc2 	bl	8004c6c <_ZN12W25Qxx_Flash8setStateE10FlashState>
			return this->getFlashClearInfo(returnData, n);
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f958 	bl	80027a2 <_ZN14GenericChannel17getFlashClearInfoEPhRh>
 80024f2:	4603      	mov	r3, r0
 80024f4:	e007      	b.n	8002506 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	7af9      	ldrb	r1, [r7, #11]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f7ff fb9f 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 8002502:	4603      	mov	r3, r0
 8002504:	bf00      	nop
	}
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop

08002510 <_ZN14GenericChannel14processMessageEhPhRhh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n, uint8_t channelId)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	460b      	mov	r3, r1
 800251e:	72fb      	strb	r3, [r7, #11]
	for (AbstractChannel *channel : channels)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3310      	adds	r3, #16
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	3380      	adds	r3, #128	; 0x80
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	d029      	beq.n	800258c <_ZN14GenericChannel14processMessageEhPhRhh+0x7c>
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	613b      	str	r3, [r7, #16]
	{
		if (channel->IsChannelId(channelId))
 800253e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002542:	4619      	mov	r1, r3
 8002544:	6938      	ldr	r0, [r7, #16]
 8002546:	f7ff fb39 	bl	8001bbc <_ZNK15AbstractChannel11IsChannelIdEh>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d019      	beq.n	8002584 <_ZN14GenericChannel14processMessageEhPhRhh+0x74>
		{
			if (channel == nullptr)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <_ZN14GenericChannel14processMessageEhPhRhh+0x72>
				continue;

			if (channel->processMessage(commandId, returnData, n) != 0)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	681c      	ldr	r4, [r3, #0]
 800255e:	7af9      	ldrb	r1, [r7, #11]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6938      	ldr	r0, [r7, #16]
 8002566:	47a0      	blx	r4
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <_ZN14GenericChannel14processMessageEhPhRhh+0x6e>
				return -1;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800257c:	e008      	b.n	8002590 <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
			return 0;
 800257e:	2300      	movs	r3, #0
 8002580:	e006      	b.n	8002590 <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
				continue;
 8002582:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3304      	adds	r3, #4
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e7d1      	b.n	8002530 <_ZN14GenericChannel14processMessageEhPhRhh+0x20>
		}

	}
	return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002590:	4618      	mov	r0, r3
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <_ZN14GenericChannel11setVariableEhl>:

int GenericChannel::setVariable(uint8_t variableId, int32_t data)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	460b      	mov	r3, r1
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 80025a6:	7afb      	ldrb	r3, [r7, #11]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d029      	beq.n	8002600 <_ZN14GenericChannel11setVariableEhl+0x68>
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	dc33      	bgt.n	8002618 <_ZN14GenericChannel11setVariableEhl+0x80>
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d002      	beq.n	80025ba <_ZN14GenericChannel11setVariableEhl+0x22>
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d008      	beq.n	80025ca <_ZN14GenericChannel11setVariableEhl+0x32>
 80025b8:	e02e      	b.n	8002618 <_ZN14GenericChannel11setVariableEhl+0x80>
	{
		case GENERIC_REFRESH_DIVIDER:
			refreshDivider = data;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
			return 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e028      	b.n	800261c <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LOGGING_ENABLED:
			loggingEnabled = data;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (loggingEnabled == 0)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d107      	bne.n	80025ee <_ZN14GenericChannel11setVariableEhl+0x56>
			{
				flash.setState(FlashState::IDLE);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fb40 	bl	8004c6c <_ZN12W25Qxx_Flash8setStateE10FlashState>
 80025ec:	e006      	b.n	80025fc <_ZN14GenericChannel11setVariableEhl+0x64>
			}
			else
			{
				flash.setState(FlashState::LOGGING);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80025f4:	2103      	movs	r1, #3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fb38 	bl	8004c6c <_ZN12W25Qxx_Flash8setStateE10FlashState>
			}
			return 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e00d      	b.n	800261c <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LORA_ENABLED:
			if (data == 0)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <_ZN14GenericChannel11setVariableEhl+0x76>
			{
				setLoraActive(false);
 8002606:	2000      	movs	r0, #0
 8002608:	f000 f9a4 	bl	8002954 <_ZN14GenericChannel13setLoraActiveEb>
 800260c:	e002      	b.n	8002614 <_ZN14GenericChannel11setVariableEhl+0x7c>
			}
			else
			{
				setLoraActive(true);
 800260e:	2001      	movs	r0, #1
 8002610:	f000 f9a0 	bl	8002954 <_ZN14GenericChannel13setLoraActiveEb>
			}
			return 0;
 8002614:	2300      	movs	r3, #0
 8002616:	e001      	b.n	800261c <_ZN14GenericChannel11setVariableEhl+0x84>
		default:
			return -1;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_ZNK14GenericChannel11getVariableEhRl>:

int GenericChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	460b      	mov	r3, r1
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d015      	beq.n	8002664 <_ZNK14GenericChannel11getVariableEhRl+0x40>
 8002638:	2b08      	cmp	r3, #8
 800263a:	dc20      	bgt.n	800267e <_ZNK14GenericChannel11getVariableEhRl+0x5a>
 800263c:	2b05      	cmp	r3, #5
 800263e:	d002      	beq.n	8002646 <_ZNK14GenericChannel11getVariableEhRl+0x22>
 8002640:	2b07      	cmp	r3, #7
 8002642:	d007      	beq.n	8002654 <_ZNK14GenericChannel11getVariableEhRl+0x30>
 8002644:	e01b      	b.n	800267e <_ZNK14GenericChannel11getVariableEhRl+0x5a>
	{
		case GENERIC_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	601a      	str	r2, [r3, #0]
			return 0;
 8002650:	2300      	movs	r3, #0
 8002652:	e016      	b.n	8002682 <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LOGGING_ENABLED:
			data = (int32_t) loggingEnabled;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800265a:	461a      	mov	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	601a      	str	r2, [r3, #0]
			return 0;
 8002660:	2300      	movs	r3, #0
 8002662:	e00e      	b.n	8002682 <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LORA_ENABLED:
			if (loraActive)
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <_ZNK14GenericChannel11getVariableEhRl+0x6c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <_ZNK14GenericChannel11getVariableEhRl+0x50>
				data = 1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e002      	b.n	800267a <_ZNK14GenericChannel11getVariableEhRl+0x56>
			else
				data = 0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
			return 0;
 800267a:	2300      	movs	r3, #0
 800267c:	e001      	b.n	8002682 <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		default:
			return -1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	200005e4 	.word	0x200005e4

08002694 <_ZN14GenericChannel13getSensorDataEPhRh>:
	n = sizeof(FlashStatusMsg_t);
	return 0;
}

int GenericChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
	if (!IsRefreshed())
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fa9e 	bl	8001be4 <_ZN15AbstractChannel11IsRefreshedEv>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <_ZN14GenericChannel13getSensorDataEPhRh+0x26>
		return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b8:	e06f      	b.n	800279a <_ZN14GenericChannel13getSensorDataEPhRh+0x106>

	DataMsg_t *dataMsg = (DataMsg_t*) data;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	623b      	str	r3, [r7, #32]
	dataMsg->channel_mask = 0;
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	705a      	strb	r2, [r3, #1]
 80026c8:	2200      	movs	r2, #0
 80026ca:	709a      	strb	r2, [r3, #2]
 80026cc:	2200      	movs	r2, #0
 80026ce:	70da      	strb	r2, [r3, #3]
	for (AbstractChannel *channel : channels)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3310      	adds	r3, #16
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3380      	adds	r3, #128	; 0x80
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d03a      	beq.n	800275e <_ZN14GenericChannel13getSensorDataEPhRh+0xca>
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr || !channel->IsRefreshed())
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <_ZN14GenericChannel13getSensorDataEPhRh+0x72>
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f7ff fa75 	bl	8001be4 <_ZN15AbstractChannel11IsRefreshedEv>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f083 0301 	eor.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <_ZN14GenericChannel13getSensorDataEPhRh+0x76>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <_ZN14GenericChannel13getSensorDataEPhRh+0x78>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11f      	bne.n	8002750 <_ZN14GenericChannel13getSensorDataEPhRh+0xbc>
			continue;
		if (channel->getSensorData(&dataMsg->uint8[0], n) == -1)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3318      	adds	r3, #24
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a3a      	ldr	r2, [r7, #32]
 800271a:	1d11      	adds	r1, r2, #4
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	4798      	blx	r3
 8002722:	4603      	mov	r3, r0
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10f      	bne.n	8002754 <_ZN14GenericChannel13getSensorDataEPhRh+0xc0>
			continue;
		dataMsg->channel_mask |= 1 << channel->getChannelId();
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f7ff fa35 	bl	8001ba4 <_ZNK15AbstractChannel12getChannelIdEv>
 800273a:	4603      	mov	r3, r0
 800273c:	461a      	mov	r2, r3
 800273e:	2301      	movs	r3, #1
 8002740:	fa03 f202 	lsl.w	r2, r3, r2
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	431a      	orrs	r2, r3
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e002      	b.n	8002756 <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8002750:	bf00      	nop
 8002752:	e000      	b.n	8002756 <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8002754:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	3304      	adds	r3, #4
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	e7c0      	b.n	80026e0 <_ZN14GenericChannel13getSensorDataEPhRh+0x4c>
	}
	n += 1 * sizeof(uint32_t);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	3304      	adds	r3, #4
 8002764:	b2da      	uxtb	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	701a      	strb	r2, [r3, #0]

	if (loggingEnabled && !flash.lock)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d011      	beq.n	8002798 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800277a:	791b      	ldrb	r3, [r3, #4]
 800277c:	f083 0301 	eor.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
		flash.addLog(data, n);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	f002 fafd 	bl	8004d92 <_ZN12W25Qxx_Flash6addLogEPhh>
	return 0;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3728      	adds	r7, #40	; 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZN14GenericChannel17getFlashClearInfoEPhRh>:

int GenericChannel::getFlashClearInfo(uint8_t *data, uint8_t &n)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]

	FlashStatusMsg_t *info = (FlashStatusMsg_t*) data;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	617b      	str	r3, [r7, #20]

	FlashState flashState = flash.getState();
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fa66 	bl	8004c8a <_ZN12W25Qxx_Flash8getStateEv>
 80027be:	6138      	str	r0, [r7, #16]
	if (flashState == FlashState::IDLE || flashState == FlashState::CLEARING)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x2a>
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d103      	bne.n	80027d4 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x32>
	{ //TODO actually check if clearing has initiated
		info->status = INITIATED;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e009      	b.n	80027e8 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else if (flashState == FlashState::READY)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d103      	bne.n	80027e2 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x40>
	{
		info->status = COMPLETED;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e002      	b.n	80027e8 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else
	{
		info->status = INITIATED;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
	}

	n = sizeof(FlashStatusMsg_t);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
	return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_ZN14GenericChannel22getControlInputChannelEh>:

AbstractChannel* GenericChannel::getControlInputChannel(uint8_t id)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
	return channels[id];
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3204      	adds	r2, #4
 800280a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_ZN14GenericChannel11getNodeInfoEPhRh>:


int GenericChannel::getNodeInfo(uint8_t *data, uint8_t &n)
{
 800281a:	b590      	push	{r4, r7, lr}
 800281c:	b08d      	sub	sp, #52	; 0x34
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
	NodeInfoMsg_t *info = (NodeInfoMsg_t*) data;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	623b      	str	r3, [r7, #32]

	info->firmware_version = firmwareVersion;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	601a      	str	r2, [r3, #0]

	info->channel_mask = 0x00000000;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2200      	movs	r2, #0
 8002838:	711a      	strb	r2, [r3, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	715a      	strb	r2, [r3, #5]
 800283e:	2200      	movs	r2, #0
 8002840:	719a      	strb	r2, [r3, #6]
 8002842:	2200      	movs	r2, #0
 8002844:	71da      	strb	r2, [r3, #7]
	uint32_t length = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t i = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (AbstractChannel *channel : channels)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3310      	adds	r3, #16
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3380      	adds	r3, #128	; 0x80
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	429a      	cmp	r2, r3
 8002866:	d02a      	beq.n	80028be <_ZN14GenericChannel11getNodeInfoEPhRh+0xa4>
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01f      	beq.n	80028b4 <_ZN14GenericChannel11getNodeInfoEPhRh+0x9a>
			continue;

		info->channel_type[i] = channel->getChannelType();
 8002874:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f7ff f97b 	bl	8001b74 <_ZNK15AbstractChannel14getChannelTypeEv>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	4423      	add	r3, r4
 8002886:	721a      	strb	r2, [r3, #8]
		info->channel_mask |= 1 << channel->getChannelId();
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff f98b 	bl	8001ba4 <_ZNK15AbstractChannel12getChannelIdEv>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	2301      	movs	r3, #1
 8002894:	fa03 f202 	lsl.w	r2, r3, r2
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	431a      	orrs	r2, r3
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	605a      	str	r2, [r3, #4]
		length++;
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	3301      	adds	r3, #1
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 80028a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028ac:	3301      	adds	r3, #1
 80028ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028b2:	e000      	b.n	80028b6 <_ZN14GenericChannel11getNodeInfoEPhRh+0x9c>
			continue;
 80028b4:	bf00      	nop
	for (AbstractChannel *channel : channels)
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	3304      	adds	r3, #4
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	e7d0      	b.n	8002860 <_ZN14GenericChannel11getNodeInfoEPhRh+0x46>
	}
	n = length + 2 * sizeof(uint32_t);
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3308      	adds	r3, #8
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	701a      	strb	r2, [r3, #0]
	return 0;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3734      	adds	r7, #52	; 0x34
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}

080028d4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>:

void GenericChannel::registerChannel(AbstractChannel *channel)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	if (channel->getChannelId() < MAX_CHANNELS)
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f7ff f960 	bl	8001ba4 <_ZNK15AbstractChannel12getChannelIdEv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b1f      	cmp	r3, #31
 80028e8:	bf94      	ite	ls
 80028ea:	2301      	movls	r3, #1
 80028ec:	2300      	movhi	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <_ZN14GenericChannel15registerChannelEP15AbstractChannel+0x34>
		channels[channel->getChannelId()] = channel;
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f7ff f955 	bl	8001ba4 <_ZNK15AbstractChannel12getChannelIdEv>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3204      	adds	r2, #4
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZN14GenericChannel14registerModuleEP14AbstractModule>:
		registerChannel(channels[i]);
	}
}

void GenericChannel::registerModule(AbstractModule *module)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	if (moduleIndex < MAX_MODULES)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8002920:	2b07      	cmp	r3, #7
 8002922:	d810      	bhi.n	8002946 <_ZN14GenericChannel14registerModuleEP14AbstractModule+0x36>
	{
		modules[moduleIndex] = module;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3224      	adds	r2, #36	; 0x24
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		moduleIndex++;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800293c:	3301      	adds	r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	}
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <_ZN14GenericChannel13setLoraActiveEb>:
	{
		printLog();
	}
}

void GenericChannel::setLoraActive(bool enable) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	loraActive = enable;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <_ZN14GenericChannel13setLoraActiveEb+0x1c>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	7013      	strb	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	200005e4 	.word	0x200005e4

08002974 <_ZN14GenericChannel8receptorEmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
}

void GenericChannel::receptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b09b      	sub	sp, #108	; 0x6c
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
	Can_MessageId_t msgId =
 8002980:	2300      	movs	r3, #0
 8002982:	65bb      	str	r3, [r7, #88]	; 0x58
	{ 0 };
	Can_MessageData_t msgData =
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	2242      	movs	r2, #66	; 0x42
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f008 fd37 	bl	800b400 <memset>
	{ 0 };

	msgId.uint32 = id;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	65bb      	str	r3, [r7, #88]	; 0x58
	memcpy(msgData.uint8, data, 64); //TODO only copy n bytes
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	461c      	mov	r4, r3
 800299a:	f107 0614 	add.w	r6, r7, #20
 800299e:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80029a2:	4635      	mov	r5, r6
 80029a4:	4623      	mov	r3, r4
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b0:	3410      	adds	r4, #16
 80029b2:	3610      	adds	r6, #16
 80029b4:	4564      	cmp	r4, ip
 80029b6:	d1f4      	bne.n	80029a2 <_ZN14GenericChannel8receptorEmPhm+0x2e>
	uint8_t commandId = msgData.bit.cmd_id;
 80029b8:	7d7b      	ldrb	r3, [r7, #21]
 80029ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t channelId = msgData.bit.info.channel_id;
 80029be:	7d3b      	ldrb	r3, [r7, #20]
 80029c0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ret_n = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	74fb      	strb	r3, [r7, #19]

	if (channelId == GENERIC_CHANNEL_ID)
 80029ce:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80029d2:	2b3f      	cmp	r3, #63	; 0x3f
 80029d4:	d118      	bne.n	8002a08 <_ZN14GenericChannel8receptorEmPhm+0x94>
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n) != 0)
 80029d6:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	681c      	ldr	r4, [r3, #0]
 80029e4:	f107 0513 	add.w	r5, r7, #19
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	1c9a      	adds	r2, r3, #2
 80029ee:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 80029f2:	462b      	mov	r3, r5
 80029f4:	47a0      	blx	r4
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d017      	beq.n	8002a36 <_ZN14GenericChannel8receptorEmPhm+0xc2>
			return;
 8002a06:	e047      	b.n	8002a98 <_ZN14GenericChannel8receptorEmPhm+0x124>
	}
	else
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n, channelId) != 0)
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	f107 0413 	add.w	r4, r7, #19
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	1c9a      	adds	r2, r3, #2
 8002a16:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8002a1a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4623      	mov	r3, r4
 8002a22:	f7ff fd75 	bl	8002510 <_ZN14GenericChannel14processMessageEhPhRhh>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d12f      	bne.n	8002a96 <_ZN14GenericChannel8receptorEmPhm+0x122>
			return;
	}

	msgId.info.direction = NODE2MASTER_DIRECTION;
 8002a36:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	msgId.info.node_id = gcPtr->getNodeId();
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fc0a 	bl	8002260 <_ZNK14GenericChannel9getNodeIdEv>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002a58:	f362 0346 	bfi	r3, r2, #1, #6
 8002a5c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8002a60:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002a64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8002a68:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	msgId.info.priority = STANDARD_PRIORITY;
 8002a6c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002a70:	2202      	movs	r2, #2
 8002a72:	f362 0342 	bfi	r3, r2, #1, #2
 8002a76:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	msgData.bit.cmd_id = commandId + 1;
 8002a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	757b      	strb	r3, [r7, #21]
	memcpy(&msgBuf[2], msgData.uint8, CAN_MSG_LENGTH(ret_n));
	msgBuf[CAN_MSG_LENGTH(ret_n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(ret_n) + 3);
#endif

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
 8002a84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	f107 0214 	add.w	r2, r7, #20
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f005 fe82 	bl	8008798 <STRHAL_CAN_Send>
 8002a94:	e000      	b.n	8002a98 <_ZN14GenericChannel8receptorEmPhm+0x124>
			return;
 8002a96:	bf00      	nop
}
 8002a98:	3764      	adds	r7, #100	; 0x64
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200005e0 	.word	0x200005e0

08002aa4 <_ZN14GenericChannel12heartbeatCanEv>:

void GenericChannel::heartbeatCan()
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b095      	sub	sp, #84	; 0x54
 8002aa8:	af00      	add	r7, sp, #0
	Can_MessageId_t msgId =
 8002aaa:	2300      	movs	r3, #0
 8002aac:	64fb      	str	r3, [r7, #76]	; 0x4c
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8002aae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ab2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8002ab6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	msgId.info.direction = NODE2MASTER_DIRECTION;
 8002aba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.node_id = gcPtr->getNodeId();
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fbc8 	bl	8002260 <_ZNK14GenericChannel9getNodeIdEv>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002adc:	f362 0346 	bfi	r3, r2, #1, #6
 8002ae0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.priority = STANDARD_PRIORITY;
 8002ae4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f362 0342 	bfi	r3, r2, #1, #2
 8002aee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	Can_MessageData_t msgData =
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	2242      	movs	r2, #66	; 0x42
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f008 fc80 	bl	800b400 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_DATA;
 8002b00:	230b      	movs	r3, #11
 8002b02:	727b      	strb	r3, [r7, #9]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8002b04:	7a3b      	ldrb	r3, [r7, #8]
 8002b06:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002b0a:	723b      	strb	r3, [r7, #8]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8002b0c:	7a3b      	ldrb	r3, [r7, #8]
 8002b0e:	f36f 1387 	bfc	r3, #6, #2
 8002b12:	723b      	strb	r3, [r7, #8]

	uint8_t n = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	71fb      	strb	r3, [r7, #7]
	if (gcPtr->getSensorData(&msgData.bit.data.uint8[0], n) != 0)
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3318      	adds	r3, #24
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	1dfc      	adds	r4, r7, #7
 8002b28:	f107 0208 	add.w	r2, r7, #8
 8002b2c:	1c91      	adds	r1, r2, #2
 8002b2e:	4622      	mov	r2, r4
 8002b30:	4798      	blx	r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <_ZN14GenericChannel12heartbeatCanEv+0xd0>
	{ // Sensor Data collection failed, or Refresh Divider not yet met
		return;
	}

	if (loraActive)
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <_ZN14GenericChannel12heartbeatCanEv+0xdc>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <_ZN14GenericChannel12heartbeatCanEv+0xc0>
	{
		Radio::msgArray[Radio::RCU_START_ADDR] = 1;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <_ZN14GenericChannel12heartbeatCanEv+0xe0>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		memcpy(&Radio::msgArray[Radio::RCU_START_ADDR + 1], msgData.bit.data.uint8, n);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480a      	ldr	r0, [pc, #40]	; (8002b88 <_ZN14GenericChannel12heartbeatCanEv+0xe4>)
 8002b60:	f008 fc40 	bl	800b3e4 <memcpy>
	memcpy(&msgBuf[2], msgData.uint8, CAN_MSG_LENGTH(n));
	msgBuf[CAN_MSG_LENGTH(n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(n) + 3);
#endif

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 8002b64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f107 0208 	add.w	r2, r7, #8
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f005 fe13 	bl	8008798 <STRHAL_CAN_Send>
 8002b72:	e000      	b.n	8002b76 <_ZN14GenericChannel12heartbeatCanEv+0xd2>
		return;
 8002b74:	bf00      	nop
}
 8002b76:	3754      	adds	r7, #84	; 0x54
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd90      	pop	{r4, r7, pc}
 8002b7c:	200005e0 	.word	0x200005e0
 8002b80:	200005e4 	.word	0x200005e4
 8002b84:	20000580 	.word	0x20000580
 8002b88:	200005b8 	.word	0x200005b8

08002b8c <_ZN22PressureControlChannelC1EhR14GenericChannelhR17DigitalOutChannelm>:
#include <Channels/PressureControlChannel.h>


PressureControlChannel::PressureControlChannel(uint8_t id, GenericChannel &parent, uint8_t inputChannelId, DigitalOutChannel &solenoidChannel, uint32_t refreshDivider):
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	72fb      	strb	r3, [r7, #11]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	72bb      	strb	r3, [r7, #10]
		AbstractChannel(CHANNEL_TYPE_CONTROL, id, refreshDivider), parent(parent),inputChannelId(inputChannelId), solenoidChannel(solenoidChannel)
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	7afa      	ldrb	r2, [r7, #11]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	210a      	movs	r1, #10
 8002ba8:	f7fe ffc0 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8002bac:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <_ZN22PressureControlChannelC1EhR14GenericChannelhR17DigitalOutChannelm+0x68>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	821a      	strh	r2, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	825a      	strh	r2, [r3, #18]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	829a      	strh	r2, [r3, #20]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	82da      	strh	r2, [r3, #22]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	7aba      	ldrb	r2, [r7, #10]
 8002bd4:	771a      	strb	r2, [r3, #28]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	621a      	str	r2, [r3, #32]
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
{
}
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	0800b930 	.word	0x0800b930

08002bf8 <_ZN22PressureControlChannel4initEv>:

int PressureControlChannel::init()
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

	return 0;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <_ZN22PressureControlChannel4execEv>:

int PressureControlChannel::exec()
{
 8002c0e:	b5b0      	push	{r4, r5, r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 8002c16:	f006 fe8f 	bl	8009938 <STRHAL_Systick_GetTick>
 8002c1a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c28:	1a84      	subs	r4, r0, r2
 8002c2a:	eb61 0503 	sbc.w	r5, r1, r3
 8002c2e:	2c64      	cmp	r4, #100	; 0x64
 8002c30:	f175 0300 	sbcs.w	r3, r5, #0
 8002c34:	d201      	bcs.n	8002c3a <_ZN22PressureControlChannel4execEv+0x2c>
		return 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e066      	b.n	8002d08 <_ZN22PressureControlChannel4execEv+0xfa>

	timeLastSample = time;
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c40:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (enabled == 1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8a1b      	ldrh	r3, [r3, #16]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d15c      	bne.n	8002d06 <_ZN22PressureControlChannel4execEv+0xf8>
	{

		uint16_t pressure = (parent.getControlInputChannel(inputChannelId))->getMeasurement(); //pressureChannel.getMeasurement();
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7f1b      	ldrb	r3, [r3, #28]
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f7ff fdce 	bl	80027f8 <_ZN14GenericChannel22getControlInputChannelEh>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	321c      	adds	r2, #28
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	4790      	blx	r2
 8002c68:	4603      	mov	r3, r0
 8002c6a:	81fb      	strh	r3, [r7, #14]
		if (pressure > threshold)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8a9b      	ldrh	r3, [r3, #20]
 8002c70:	89fa      	ldrh	r2, [r7, #14]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d925      	bls.n	8002cc2 <_ZN22PressureControlChannel4execEv+0xb4>
		{ // pressure too high
			threshold = targetPressure - hysteresis;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8a5a      	ldrh	r2, [r3, #18]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8adb      	ldrh	r3, [r3, #22]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	829a      	strh	r2, [r3, #20]
			if (solenoidChannel.getState() != 0)// if not already closed -> close
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fa62 	bl	8002154 <_ZNK17DigitalOutChannel8getStateEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d032      	beq.n	8002d06 <_ZN22PressureControlChannel4execEv+0xf8>
			{
				if (solenoidChannel.setState(0) != 0)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fa67 	bl	800217a <_ZN17DigitalOutChannel8setStateEm>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d024      	beq.n	8002d06 <_ZN22PressureControlChannel4execEv+0xf8>
					return -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc0:	e022      	b.n	8002d08 <_ZN22PressureControlChannel4execEv+0xfa>
			}
		}
		else
		{ // pressure below threshold
			threshold = targetPressure;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8a5a      	ldrh	r2, [r3, #18]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	829a      	strh	r2, [r3, #20]
			if (solenoidChannel.getState() != 1)// if not already open -> open
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fa40 	bl	8002154 <_ZNK17DigitalOutChannel8getStateEv>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d010      	beq.n	8002d06 <_ZN22PressureControlChannel4execEv+0xf8>
			{
				if (solenoidChannel.setState(1) != 0)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fa45 	bl	800217a <_ZN17DigitalOutChannel8setStateEm>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <_ZN22PressureControlChannel4execEv+0xf8>
					return -1;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d04:	e000      	b.n	8002d08 <_ZN22PressureControlChannel4execEv+0xfa>
			}
		}
	}
	return 0;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bdb0      	pop	{r4, r5, r7, pc}

08002d10 <_ZN22PressureControlChannel5resetEv>:

int PressureControlChannel::reset()
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	return 0;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <_ZN22PressureControlChannel14processMessageEhPhRh>:

int PressureControlChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	460b      	mov	r3, r1
 8002d34:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	7af9      	ldrb	r1, [r7, #11]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	f7fe ff7f 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 8002d42:	4603      	mov	r3, r0
	}
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_ZN22PressureControlChannel13getSensorDataEPhRh>:

int PressureControlChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4413      	add	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
	*out = (uint16_t) solenoidChannel.getState();
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f9f3 	bl	8002154 <_ZNK17DigitalOutChannel8getStateEv>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	801a      	strh	r2, [r3, #0]

	n += CONTROL_DATA_N_BYTES;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	701a      	strb	r2, [r3, #0]
	return 0;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZN22PressureControlChannel11setVariableEhl>:

int PressureControlChannel::setVariable(uint8_t variableId, int32_t data)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	460b      	mov	r3, r1
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d87a      	bhi.n	8002e96 <_ZN22PressureControlChannel11setVariableEhl+0x10a>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <_ZN22PressureControlChannel11setVariableEhl+0x1c>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002dc5 	.word	0x08002dc5
 8002dac:	08002e13 	.word	0x08002e13
 8002db0:	08002e4f 	.word	0x08002e4f
 8002db4:	08002e55 	.word	0x08002e55
 8002db8:	08002e75 	.word	0x08002e75
 8002dbc:	08002e7b 	.word	0x08002e7b
 8002dc0:	08002e87 	.word	0x08002e87
	{
		case CONTROL_ENABLED:
			enabled = data;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	821a      	strh	r2, [r3, #16]
			if (data == 0 && solenoidChannel.getState() != 0)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <_ZN22PressureControlChannel11setVariableEhl+0x5a>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f9bc 	bl	8002154 <_ZNK17DigitalOutChannel8getStateEv>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <_ZN22PressureControlChannel11setVariableEhl+0x5a>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <_ZN22PressureControlChannel11setVariableEhl+0x5c>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <_ZN22PressureControlChannel11setVariableEhl+0x82>
			{
				if (solenoidChannel.setState(0) != 0) // make sure solenoid is closed after disabling
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f9c1 	bl	800217a <_ZN17DigitalOutChannel8setStateEm>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <_ZN22PressureControlChannel11setVariableEhl+0x82>
					return -1;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0c:	e045      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
			}
			return 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e043      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_TARGET:
			targetPressure = data * 4095 / UINT16_MAX; // convert from 16 to 12bit scale
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	031b      	lsls	r3, r3, #12
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <_ZN22PressureControlChannel11setVariableEhl+0x118>)
 8002e1c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e20:	441a      	add	r2, r3
 8002e22:	13d2      	asrs	r2, r2, #15
 8002e24:	17db      	asrs	r3, r3, #31
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	825a      	strh	r2, [r3, #18]
			threshold = data * 4095 / UINT16_MAX;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	031b      	lsls	r3, r3, #12
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <_ZN22PressureControlChannel11setVariableEhl+0x118>)
 8002e38:	fb82 1203 	smull	r1, r2, r2, r3
 8002e3c:	441a      	add	r2, r3
 8002e3e:	13d2      	asrs	r2, r2, #15
 8002e40:	17db      	asrs	r3, r3, #31
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	829a      	strh	r2, [r3, #20]
			return 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e025      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_THRESHOLD: //cannot set threshold
			return -1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e52:	e022      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_HYSTERESIS:
			hysteresis = data * 4095 / UINT16_MAX;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	031b      	lsls	r3, r3, #12
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <_ZN22PressureControlChannel11setVariableEhl+0x118>)
 8002e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e62:	441a      	add	r2, r3
 8002e64:	13d2      	asrs	r2, r2, #15
 8002e66:	17db      	asrs	r3, r3, #31
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	82da      	strh	r2, [r3, #22]
			return 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e012      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_ACTUATOR_CHANNEL_ID:
			return -1;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e78:	e00f      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_SENSOR_CHANNEL_ID:
			inputChannelId = data;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	771a      	strb	r2, [r3, #28]
			return 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e009      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_REFRESH_DIVIDER:
			refreshDivider = data;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
			return 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e001      	b.n	8002e9a <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		default:
			return -1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	80008001 	.word	0x80008001

08002ea8 <_ZNK22PressureControlChannel11getVariableEhRl>:

int PressureControlChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d865      	bhi.n	8002f88 <_ZNK22PressureControlChannel11getVariableEhRl+0xe0>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <_ZNK22PressureControlChannel11getVariableEhRl+0x1c>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ee1 	.word	0x08002ee1
 8002ec8:	08002eef 	.word	0x08002eef
 8002ecc:	08002f11 	.word	0x08002f11
 8002ed0:	08002f33 	.word	0x08002f33
 8002ed4:	08002f55 	.word	0x08002f55
 8002ed8:	08002f6d 	.word	0x08002f6d
 8002edc:	08002f7b 	.word	0x08002f7b
	{
		case CONTROL_ENABLED:
			data = enabled;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8a1b      	ldrh	r3, [r3, #16]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
			return 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e04e      	b.n	8002f8c <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_TARGET:
			data = targetPressure * UINT16_MAX / 4095; // convert back to 16bit full scale
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8a5b      	ldrh	r3, [r3, #18]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <_ZNK22PressureControlChannel11getVariableEhRl+0xec>)
 8002efc:	fb82 1203 	smull	r1, r2, r2, r3
 8002f00:	441a      	add	r2, r3
 8002f02:	12d2      	asrs	r2, r2, #11
 8002f04:	17db      	asrs	r3, r3, #31
 8002f06:	1ad2      	subs	r2, r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
			return 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e03d      	b.n	8002f8c <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_THRESHOLD:
			data = threshold * UINT16_MAX / 4095;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8a9b      	ldrh	r3, [r3, #20]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4613      	mov	r3, r2
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <_ZNK22PressureControlChannel11getVariableEhRl+0xec>)
 8002f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f22:	441a      	add	r2, r3
 8002f24:	12d2      	asrs	r2, r2, #11
 8002f26:	17db      	asrs	r3, r3, #31
 8002f28:	1ad2      	subs	r2, r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	601a      	str	r2, [r3, #0]
			return 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e02c      	b.n	8002f8c <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_HYSTERESIS:
			data = hysteresis * UINT16_MAX / 4095;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8adb      	ldrh	r3, [r3, #22]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4613      	mov	r3, r2
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <_ZNK22PressureControlChannel11getVariableEhRl+0xec>)
 8002f40:	fb82 1203 	smull	r1, r2, r2, r3
 8002f44:	441a      	add	r2, r3
 8002f46:	12d2      	asrs	r2, r2, #11
 8002f48:	17db      	asrs	r3, r3, #31
 8002f4a:	1ad2      	subs	r2, r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	601a      	str	r2, [r3, #0]
			return 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e01b      	b.n	8002f8c <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_ACTUATOR_CHANNEL_ID:
			data = solenoidChannel.getChannelId();
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fe23 	bl	8001ba4 <_ZNK15AbstractChannel12getChannelIdEv>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
			return -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f6a:	e00f      	b.n	8002f8c <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_SENSOR_CHANNEL_ID:
			data = (int32_t) inputChannelId;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	7f1b      	ldrb	r3, [r3, #28]
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	601a      	str	r2, [r3, #0]
			return 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e008      	b.n	8002f8c <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	601a      	str	r2, [r3, #0]
			return 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e001      	b.n	8002f8c <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		default:
			return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	80080081 	.word	0x80080081

08002f98 <_ZN11PyroChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_tRK16DigitalInChannelm>:
#include <Channels/PyroChannel.h>

PyroChannel::PyroChannel(uint8_t id, const STRHAL_ADC_Channel_t &adcChannel, const STRHAL_GPIO_t &cntrlPin, const DigitalInChannel &continuityChannel, uint32_t refreshDivider) :
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), adcChannel(adcChannel), cntrlPin(cntrlPin), continuityChannel(continuityChannel)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	7afa      	ldrb	r2, [r7, #11]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2107      	movs	r1, #7
 8002fb0:	f7fe fdbc 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <_ZN11PyroChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_tRK16DigitalInChannelm+0x54>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	3320      	adds	r3, #32
 8002fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	0800b960 	.word	0x0800b960

08002ff0 <_ZN11PyroChannel4initEv>:

int PyroChannel::init()
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	adcMeasurement = STRHAL_ADC_SubscribeChannel(&adcChannel, STRHAL_ADC_INTYPE_REGULAR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 ff3c 	bl	8007e7c <STRHAL_ADC_SubscribeChannel>
 8003004:	4602      	mov	r2, r0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	61da      	str	r2, [r3, #28]
	STRHAL_GPIO_SingleInit(&cntrlPin, STRHAL_GPIO_TYPE_OPP);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3320      	adds	r3, #32
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fee5 	bl	8008de0 <STRHAL_GPIO_SingleInit>

	if (adcMeasurement == nullptr)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <_ZN11PyroChannel4initEv+0x34>
		return -1;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003022:	e000      	b.n	8003026 <_ZN11PyroChannel4initEv+0x36>

	return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_ZN11PyroChannel4execEv>:

int PyroChannel::exec()
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
	return 0;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_ZN11PyroChannel5resetEv>:

int PyroChannel::reset()
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <_ZN11PyroChannel14processMessageEhPhRh>:

int PyroChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	460b      	mov	r3, r1
 8003068:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	7af9      	ldrb	r1, [r7, #11]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	f7fe fde5 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 8003076:	4603      	mov	r3, r0
	}
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_ZN11PyroChannel13getSensorDataEPhRh>:

int PyroChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4413      	add	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
	*out = *adcMeasurement << 4; // shift it to 16bit full scale;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	801a      	strh	r2, [r3, #0]

	n += DIGITAL_OUT_DATA_N_BYTES;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	3302      	adds	r3, #2
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	701a      	strb	r2, [r3, #0]
	return 0;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <_ZN11PyroChannel11setVariableEhl>:

int PyroChannel::setVariable(uint8_t variableId, int32_t data)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	460b      	mov	r3, r1
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d833      	bhi.n	8003140 <_ZN11PyroChannel11setVariableEhl+0x7c>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <_ZN11PyroChannel11setVariableEhl+0x1c>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	080030f5 	.word	0x080030f5
 80030e4:	08003119 	.word	0x08003119
 80030e8:	08003125 	.word	0x08003125
 80030ec:	08003141 	.word	0x08003141
 80030f0:	08003131 	.word	0x08003131
	{
		case DIGITAL_OUT_STATE:
			if (setState(data) != 0)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4619      	mov	r1, r3
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f876 	bl	80031ea <_ZN11PyroChannel8setStateEm>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <_ZN11PyroChannel11setVariableEhl+0x50>
				return -1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003112:	e017      	b.n	8003144 <_ZN11PyroChannel11setVariableEhl+0x80>
			return 0;
 8003114:	2300      	movs	r3, #0
 8003116:	e015      	b.n	8003144 <_ZN11PyroChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_DUTY_CYCLE:
			dutyCycle = data;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	821a      	strh	r2, [r3, #16]
			return 0;
 8003120:	2300      	movs	r3, #0
 8003122:	e00f      	b.n	8003144 <_ZN11PyroChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_FREQUENCY:
			frequency = data;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	825a      	strh	r2, [r3, #18]
			return 0;
 800312c:	2300      	movs	r3, #0
 800312e:	e009      	b.n	8003144 <_ZN11PyroChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
			return 0;
 800313c:	2300      	movs	r3, #0
 800313e:	e001      	b.n	8003144 <_ZN11PyroChannel11setVariableEhl+0x80>
		default:
			return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZNK11PyroChannel11getVariableEhRl>:

int PyroChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	460b      	mov	r3, r1
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800315a:	7afb      	ldrb	r3, [r7, #11]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d82b      	bhi.n	80031b8 <_ZNK11PyroChannel11getVariableEhRl+0x6c>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <_ZNK11PyroChannel11getVariableEhRl+0x1c>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800317d 	.word	0x0800317d
 800316c:	0800318f 	.word	0x0800318f
 8003170:	0800319d 	.word	0x0800319d
 8003174:	080031b9 	.word	0x080031b9
 8003178:	080031ab 	.word	0x080031ab
	{
		case DIGITAL_OUT_STATE:
			data = getState();
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f821 	bl	80031c4 <_ZNK11PyroChannel8getStateEv>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
			return 0;
 800318a:	2300      	movs	r3, #0
 800318c:	e016      	b.n	80031bc <_ZNK11PyroChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_DUTY_CYCLE:
			data = dutyCycle;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8a1b      	ldrh	r3, [r3, #16]
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	601a      	str	r2, [r3, #0]
			return 0;
 8003198:	2300      	movs	r3, #0
 800319a:	e00f      	b.n	80031bc <_ZNK11PyroChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_FREQUENCY:
			data = frequency;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8a5b      	ldrh	r3, [r3, #18]
 80031a0:	461a      	mov	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
			return 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e008      	b.n	80031bc <_ZNK11PyroChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	601a      	str	r2, [r3, #0]
			return 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e001      	b.n	80031bc <_ZNK11PyroChannel11getVariableEhRl+0x70>
		default:
			return -1;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <_ZNK11PyroChannel8getStateEv>:

uint32_t PyroChannel::getState() const
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	return (STRHAL_GPIO_ReadOutput(&cntrlPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3320      	adds	r3, #32
 80031d0:	4618      	mov	r0, r3
 80031d2:	f005 fea9 	bl	8008f28 <STRHAL_GPIO_ReadOutput>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <_ZN11PyroChannel8setStateEm>:

int PyroChannel::setState(uint32_t state)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
	if (state == 0)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <_ZN11PyroChannel8setStateEm+0x1e>
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_L);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3320      	adds	r3, #32
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f005 fe49 	bl	8008e98 <STRHAL_GPIO_Write>
 8003206:	e005      	b.n	8003214 <_ZN11PyroChannel8setStateEm+0x2a>
	}
	else
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_H);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3320      	adds	r3, #32
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f005 fe42 	bl	8008e98 <STRHAL_GPIO_Write>
	}
	return 0;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_ZNK11PyroChannel14getMeasurementEv>:

uint16_t PyroChannel::getMeasurement() const
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	return *adcMeasurement;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_ZNK11PyroChannel13getContinuityEv>:

uint16_t PyroChannel::getContinuity() const
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
	return continuityChannel.getMeasurement();
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	331c      	adds	r3, #28
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <_ZN13RocketChannelC1EhRK10ADCChannelS2_S2_R12ServoChannelS4_R11PyroChannelS6_m>:
#include <Channels/RocketChannel.h>

RocketChannel::RocketChannel(uint8_t id, const ADCChannel &oxPressureChannel, const ADCChannel &fuelPressureChannel, const ADCChannel &chamberPressureChannel, ServoChannel &oxServoChannel, ServoChannel &fuelServoChannel, PyroChannel &igniter0Channel, PyroChannel &igniter1Channel,
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	72fb      	strb	r3, [r7, #11]
		fuelServoChannel(fuelServoChannel),
		igniter0Channel(igniter0Channel),
		igniter1Channel(igniter1Channel),
		state(PAD_IDLE),
		ignitionState(IgnitionSequence::INIT),
		can(Can::instance(0))
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	7afa      	ldrb	r2, [r7, #11]
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	210b      	movs	r1, #11
 8003278:	f7fe fc58 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <_ZN13RocketChannelC1EhRK10ADCChannelS2_S2_R12ServoChannelS4_R11PyroChannelS6_m+0xc8>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	611a      	str	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	615a      	str	r2, [r3, #20]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	619a      	str	r2, [r3, #24]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	61da      	str	r2, [r3, #28]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	621a      	str	r2, [r3, #32]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	869a      	strh	r2, [r3, #52]	; 0x34
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	871a      	strh	r2, [r3, #56]	; 0x38
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003312:	2000      	movs	r0, #0
 8003314:	f7fc ffa8 	bl	8000268 <_ZN3Can8instanceEm>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	65da      	str	r2, [r3, #92]	; 0x5c
{
}
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	0800b990 	.word	0x0800b990

0800332c <_ZN13RocketChannel4initEv>:

int RocketChannel::init()
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_ZN13RocketChannel4execEv>:

int RocketChannel::exec()
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 800334a:	f006 faf5 	bl	8009938 <STRHAL_Systick_GetTick>
 800334e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800335c:	4299      	cmp	r1, r3
 800335e:	bf08      	it	eq
 8003360:	4290      	cmpeq	r0, r2
 8003362:	d101      	bne.n	8003368 <_ZN13RocketChannel4execEv+0x26>
		return 0;
 8003364:	2300      	movs	r3, #0
 8003366:	e03e      	b.n	80033e6 <_ZN13RocketChannel4execEv+0xa4>

	timeLastSample = time;
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800336e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	// Current State Logic - executes state logic, also returns new state if transition conditions are met
	internalNextState = currentStateLogic(time);
 8003372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f83a 	bl	80033f0 <_ZN13RocketChannel17currentStateLogicEy>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	ROCKET_STATE nextState = state;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800338c:	75fb      	strb	r3, [r7, #23]

	if (externalNextState != state)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800339a:	429a      	cmp	r2, r3
 800339c:	d004      	beq.n	80033a8 <_ZN13RocketChannel4execEv+0x66>
	{ // Prioritize external event - there has to be some kind of priority, because internal could be different to external -> external means CAN -> either Sequence or Abort
		nextState = externalNextState;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80033a4:	75fb      	strb	r3, [r7, #23]
 80033a6:	e011      	b.n	80033cc <_ZN13RocketChannel4execEv+0x8a>
	}
	else if (internalNextState != state)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d009      	beq.n	80033cc <_ZN13RocketChannel4execEv+0x8a>
	{
		externalNextState = internalNextState; // Incase an internal state change happens, the external state, which is from some previous change would block it, so it is updated here
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		nextState = internalNextState;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033ca:	75fb      	strb	r3, [r7, #23]
	}

	// Next State Logic
	if (nextState != state)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033d2:	7dfa      	ldrb	r2, [r7, #23]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d005      	beq.n	80033e4 <_ZN13RocketChannel4execEv+0xa2>
	{
		nextStateLogic(nextState, time);
 80033d8:	7df9      	ldrb	r1, [r7, #23]
 80033da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f868 	bl	80034b4 <_ZN13RocketChannel14nextStateLogicE12ROCKET_STATEy>
	}

	return 0;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <_ZN13RocketChannel17currentStateLogicEy>:

ROCKET_STATE RocketChannel::currentStateLogic(uint64_t time)
{
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	e9c7 2300 	strd	r2, r3, [r7]
	switch (state)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003402:	2b07      	cmp	r3, #7
 8003404:	d84c      	bhi.n	80034a0 <_ZN13RocketChannel17currentStateLogicEy+0xb0>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <_ZN13RocketChannel17currentStateLogicEy+0x1c>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	080034a1 	.word	0x080034a1
 8003410:	0800342d 	.word	0x0800342d
 8003414:	0800343b 	.word	0x0800343b
 8003418:	08003449 	.word	0x08003449
 800341c:	08003457 	.word	0x08003457
 8003420:	08003465 	.word	0x08003465
 8003424:	08003485 	.word	0x08003485
 8003428:	08003493 	.word	0x08003493
	{
		case PAD_IDLE:
			// wait until auto sequence command from CAN
			break;
		case AUTO_CHECK:
			return autoCheck(time);
 800342c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f8b5 	bl	80035a0 <_ZN13RocketChannel9autoCheckEy>
 8003436:	4603      	mov	r3, r0
 8003438:	e038      	b.n	80034ac <_ZN13RocketChannel17currentStateLogicEy+0xbc>
		case IGNITION_SEQUENCE:
			return ignitionSequence(time);
 800343a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f90c 	bl	800365c <_ZN13RocketChannel16ignitionSequenceEy>
 8003444:	4603      	mov	r3, r0
 8003446:	e031      	b.n	80034ac <_ZN13RocketChannel17currentStateLogicEy+0xbc>
		case HOLD_DOWN:
			return holddown(time);
 8003448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fa1d 	bl	800388c <_ZN13RocketChannel8holddownEy>
 8003452:	4603      	mov	r3, r0
 8003454:	e02a      	b.n	80034ac <_ZN13RocketChannel17currentStateLogicEy+0xbc>
		case POWERED_ASCENT:
			return poweredAscent(time);
 8003456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa9c 	bl	8003998 <_ZN13RocketChannel13poweredAscentEy>
 8003460:	4603      	mov	r3, r0
 8003462:	e023      	b.n	80034ac <_ZN13RocketChannel17currentStateLogicEy+0xbc>
		case UNPOWERED_ASCENT:
			// wait until end of flight command from PMU2
			if (time - timeLastTransition > 1000)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800346a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800346e:	1a84      	subs	r4, r0, r2
 8003470:	eb61 0503 	sbc.w	r5, r1, r3
 8003474:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8003478:	429c      	cmp	r4, r3
 800347a:	f175 0300 	sbcs.w	r3, r5, #0
 800347e:	d311      	bcc.n	80034a4 <_ZN13RocketChannel17currentStateLogicEy+0xb4>
			{
				return DEPRESS;
 8003480:	2306      	movs	r3, #6
 8003482:	e013      	b.n	80034ac <_ZN13RocketChannel17currentStateLogicEy+0xbc>
			}
			break;
		case DEPRESS:
			return depress(time);
 8003484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 faa1 	bl	80039d0 <_ZN13RocketChannel7depressEy>
 800348e:	4603      	mov	r3, r0
 8003490:	e00c      	b.n	80034ac <_ZN13RocketChannel17currentStateLogicEy+0xbc>
		case ABORT:
			return abort(time);
 8003492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fac4 	bl	8003a24 <_ZN13RocketChannel5abortEy>
 800349c:	4603      	mov	r3, r0
 800349e:	e005      	b.n	80034ac <_ZN13RocketChannel17currentStateLogicEy+0xbc>
		default:
			break;
 80034a0:	bf00      	nop
 80034a2:	e000      	b.n	80034a6 <_ZN13RocketChannel17currentStateLogicEy+0xb6>
			break;
 80034a4:	bf00      	nop
	}
	return state;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}

080034b4 <_ZN13RocketChannel14nextStateLogicE12ROCKET_STATEy>:

void RocketChannel::nextStateLogic(ROCKET_STATE nextState, uint64_t time)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	e9c7 2300 	strd	r2, r3, [r7]
 80034c0:	460b      	mov	r3, r1
 80034c2:	72fb      	strb	r3, [r7, #11]
	timeLastTransition = time;
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	switch (nextState)
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	2b07      	cmp	r3, #7
 80034d2:	d85b      	bhi.n	800358c <_ZN13RocketChannel14nextStateLogicE12ROCKET_STATEy+0xd8>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <_ZN13RocketChannel14nextStateLogicE12ROCKET_STATEy+0x28>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	0800358d 	.word	0x0800358d
 80034e0:	0800358d 	.word	0x0800358d
 80034e4:	0800358d 	.word	0x0800358d
 80034e8:	0800358d 	.word	0x0800358d
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	0800358d 	.word	0x0800358d
 80034f4:	0800353d 	.word	0x0800353d
 80034f8:	0800355b 	.word	0x0800355b
			break;
		case HOLD_DOWN:
			break;
		case POWERED_ASCENT:
		{
			SetMsg_t setMsg =
 80034fc:	f107 0310 	add.w	r3, r7, #16
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	711a      	strb	r2, [r3, #4]
			{ 0 };
			setMsg.variable_id = 1; // servo target position
 8003506:	2301      	movs	r3, #1
 8003508:	743b      	strb	r3, [r7, #16]
			setMsg.value = 65000; // open servo
 800350a:	2300      	movs	r3, #0
 800350c:	f063 0317 	orn	r3, r3, #23
 8003510:	747b      	strb	r3, [r7, #17]
 8003512:	2300      	movs	r3, #0
 8003514:	f063 0302 	orn	r3, r3, #2
 8003518:	74bb      	strb	r3, [r7, #18]
 800351a:	2300      	movs	r3, #0
 800351c:	74fb      	strb	r3, [r7, #19]
 800351e:	2300      	movs	r3, #0
 8003520:	753b      	strb	r3, [r7, #20]
			can.sendAsMaster(9, 11, 4, (uint8_t*) &setMsg, 5 + sizeof(uint32_t)); // send REQ_SET_VARIABLE (4) command to holddown servo (channelId 11) on oxcart node (nodeId 9)*/
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003526:	2309      	movs	r3, #9
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	f107 0310 	add.w	r3, r7, #16
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2304      	movs	r3, #4
 8003532:	220b      	movs	r2, #11
 8003534:	2109      	movs	r1, #9
 8003536:	f7fd f8df 	bl	80006f8 <_ZN3Can12sendAsMasterEhhhPhh>
			 { 0 };
			 setMsg.variable_id = 0; // pyro state
			 setMsg.value = 65000; // enable pyro
			 cancom->sendAsMaster(7, 12, 4, (uint8_t *) &setMsg, 5+sizeof(uint32_t)); // send REQ_SET_VARIABLE (4) command to pmu pyro (channelId 12) on oxcart node (nodeId 7)
			 */
			break;
 800353a:	e028      	b.n	800358e <_ZN13RocketChannel14nextStateLogicE12ROCKET_STATEy+0xda>
			break;
		case DEPRESS:
			//if (chamberPressureChannel.getMeasurement() > chamberPressureMin)
				//return; // do not set next state to DEPRESS if there is still combustion going on

			fuelServoChannel.setTargetPos(65000);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8003544:	4618      	mov	r0, r3
 8003546:	f001 f861 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
			oxServoChannel.setTargetPos(65000);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8003552:	4618      	mov	r0, r3
 8003554:	f001 f85a 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
			break;
 8003558:	e019      	b.n	800358e <_ZN13RocketChannel14nextStateLogicE12ROCKET_STATEy+0xda>
		case ABORT:
			fuelServoChannel.setTargetPos(0);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f853 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
			oxServoChannel.setTargetPos(0);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f001 f84d 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
			(void) igniter0Channel.setState(0);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fe36 	bl	80031ea <_ZN11PyroChannel8setStateEm>
			(void) igniter1Channel.setState(0);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fe30 	bl	80031ea <_ZN11PyroChannel8setStateEm>
			break;
 800358a:	e000      	b.n	800358e <_ZN13RocketChannel14nextStateLogicE12ROCKET_STATEy+0xda>
		default:
			break;
 800358c:	bf00      	nop
	}
	state = nextState;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	7afa      	ldrb	r2, [r7, #11]
 8003592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	return;
 8003596:	bf00      	nop
}
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop

080035a0 <_ZN13RocketChannel9autoCheckEy>:

ROCKET_STATE RocketChannel::autoCheck(uint64_t time)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	e9c7 2300 	strd	r2, r3, [r7]
	if (time - timeLastTransition > 2000)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80035b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035b6:	1a84      	subs	r4, r0, r2
 80035b8:	eb61 0503 	sbc.w	r5, r1, r3
 80035bc:	f240 73d1 	movw	r3, #2001	; 0x7d1
 80035c0:	429c      	cmp	r4, r3
 80035c2:	f175 0300 	sbcs.w	r3, r5, #0
 80035c6:	d301      	bcc.n	80035cc <_ZN13RocketChannel9autoCheckEy+0x2c>
	{
		return PAD_IDLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e043      	b.n	8003654 <_ZN13RocketChannel9autoCheckEy+0xb4>
	}
	// TODO check Holddown
	if (igniter0Channel.getContinuity() == 1 || //no continuity
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fe32 	bl	800323a <_ZNK11PyroChannel13getContinuityEv>
 80035d6:	4603      	mov	r3, r0
			igniter1Channel.getContinuity() == 1 || //no continuity
			oxPressureChannel.getMeasurement() < oxPressureMin || fuelPressureChannel.getMeasurement() < fuelPressureMin)
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d025      	beq.n	8003628 <_ZN13RocketChannel9autoCheckEy+0x88>
			igniter1Channel.getContinuity() == 1 || //no continuity
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fe2a 	bl	800323a <_ZNK11PyroChannel13getContinuityEv>
 80035e6:	4603      	mov	r3, r0
	if (igniter0Channel.getContinuity() == 1 || //no continuity
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d01d      	beq.n	8003628 <_ZN13RocketChannel9autoCheckEy+0x88>
			oxPressureChannel.getMeasurement() < oxPressureMin || fuelPressureChannel.getMeasurement() < fuelPressureMin)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	331c      	adds	r3, #28
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4610      	mov	r0, r2
 80035fc:	4798      	blx	r3
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			igniter1Channel.getContinuity() == 1 || //no continuity
 8003606:	429a      	cmp	r2, r3
 8003608:	d30e      	bcc.n	8003628 <_ZN13RocketChannel9autoCheckEy+0x88>
			oxPressureChannel.getMeasurement() < oxPressureMin || fuelPressureChannel.getMeasurement() < fuelPressureMin)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	331c      	adds	r3, #28
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4610      	mov	r0, r2
 800361a:	4798      	blx	r3
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003624:	429a      	cmp	r2, r3
 8003626:	d201      	bcs.n	800362c <_ZN13RocketChannel9autoCheckEy+0x8c>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <_ZN13RocketChannel9autoCheckEy+0x8e>
 800362c:	2300      	movs	r3, #0
	if (igniter0Channel.getContinuity() == 1 || //no continuity
 800362e:	2b00      	cmp	r3, #0
 8003630:	d006      	beq.n	8003640 <_ZN13RocketChannel9autoCheckEy+0xa0>
	{

		autoCheckBadCounter++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003636:	3301      	adds	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800363e:	e002      	b.n	8003646 <_ZN13RocketChannel9autoCheckEy+0xa6>
	}
	else
	{
		autoCheckBadCounter = 0;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	if (autoCheckBadCounter > AUTO_CHECK_BAD_COUNT_MAX)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800364a:	2b0a      	cmp	r3, #10
 800364c:	d901      	bls.n	8003652 <_ZN13RocketChannel9autoCheckEy+0xb2>
		return ABORT;
 800364e:	2307      	movs	r3, #7
 8003650:	e000      	b.n	8003654 <_ZN13RocketChannel9autoCheckEy+0xb4>

	return AUTO_CHECK;
 8003652:	2301      	movs	r3, #1
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bdb0      	pop	{r4, r5, r7, pc}

0800365c <_ZN13RocketChannel16ignitionSequenceEy>:

ROCKET_STATE RocketChannel::ignitionSequence(uint64_t time)
{
 800365c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003660:	b08a      	sub	sp, #40	; 0x28
 8003662:	af00      	add	r7, sp, #0
 8003664:	6278      	str	r0, [r7, #36]	; 0x24
 8003666:	e9c7 2306 	strd	r2, r3, [r7, #24]
	switch (ignitionState)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	2b06      	cmp	r3, #6
 8003670:	f200 8105 	bhi.w	800387e <_ZN13RocketChannel16ignitionSequenceEy+0x222>
 8003674:	a201      	add	r2, pc, #4	; (adr r2, 800367c <_ZN13RocketChannel16ignitionSequenceEy+0x20>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	08003699 	.word	0x08003699
 8003680:	080036d1 	.word	0x080036d1
 8003684:	08003711 	.word	0x08003711
 8003688:	08003751 	.word	0x08003751
 800368c:	0800379d 	.word	0x0800379d
 8003690:	080037e7 	.word	0x080037e7
 8003694:	08003831 	.word	0x08003831
	{
		case IgnitionSequence::INIT: // Start of Ignition Sequence
			if (time - timeLastTransition >= 0)
			{
				fuelServoChannel.setTargetPos(0);
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 ffb4 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
				oxServoChannel.setTargetPos(0);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 ffae 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
				(void) igniter0Channel.setState(0);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fd97 	bl	80031ea <_ZN11PyroChannel8setStateEm>
				(void) igniter1Channel.setState(0);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fd91 	bl	80031ea <_ZN11PyroChannel8setStateEm>
				ignitionState = IgnitionSequence::IGNITION0_ON;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	2201      	movs	r2, #1
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
			}
			break;
 80036ce:	e0d6      	b.n	800387e <_ZN13RocketChannel16ignitionSequenceEy+0x222>
		case IgnitionSequence::IGNITION0_ON: // T-1.5 - Ignition
			if (time - timeLastTransition > 8500)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80036d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036da:	1a84      	subs	r4, r0, r2
 80036dc:	613c      	str	r4, [r7, #16]
 80036de:	eb61 0303 	sbc.w	r3, r1, r3
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	f242 1335 	movw	r3, #8501	; 0x2135
 80036e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036ec:	4602      	mov	r2, r0
 80036ee:	429a      	cmp	r2, r3
 80036f0:	460b      	mov	r3, r1
 80036f2:	f173 0300 	sbcs.w	r3, r3, #0
 80036f6:	f0c0 80b7 	bcc.w	8003868 <_ZN13RocketChannel16ignitionSequenceEy+0x20c>
			{
				(void) igniter0Channel.setState(65000);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fd71 	bl	80031ea <_ZN11PyroChannel8setStateEm>
				ignitionState = IgnitionSequence::IGNITION1_ON;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	2202      	movs	r2, #2
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
			}
			break;
 800370e:	e0ab      	b.n	8003868 <_ZN13RocketChannel16ignitionSequenceEy+0x20c>
		case IgnitionSequence::IGNITION1_ON: // T-0.5 - Ignition
			if (time - timeLastTransition > 9500)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003716:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800371a:	1a84      	subs	r4, r0, r2
 800371c:	60bc      	str	r4, [r7, #8]
 800371e:	eb61 0303 	sbc.w	r3, r1, r3
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	f242 531d 	movw	r3, #9501	; 0x251d
 8003728:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800372c:	4602      	mov	r2, r0
 800372e:	429a      	cmp	r2, r3
 8003730:	460b      	mov	r3, r1
 8003732:	f173 0300 	sbcs.w	r3, r3, #0
 8003736:	f0c0 8099 	bcc.w	800386c <_ZN13RocketChannel16ignitionSequenceEy+0x210>
			{
				(void) igniter1Channel.setState(65000);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fd51 	bl	80031ea <_ZN11PyroChannel8setStateEm>
				ignitionState = IgnitionSequence::T_0;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	2203      	movs	r2, #3
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
			}
			break;
 800374e:	e08d      	b.n	800386c <_ZN13RocketChannel16ignitionSequenceEy+0x210>
		case IgnitionSequence::T_0: // T - Valves to 0
			if (time - timeLastTransition > 10000)
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003756:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800375a:	1a84      	subs	r4, r0, r2
 800375c:	603c      	str	r4, [r7, #0]
 800375e:	eb61 0303 	sbc.w	r3, r1, r3
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	f242 7311 	movw	r3, #10001	; 0x2711
 8003768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800376c:	4602      	mov	r2, r0
 800376e:	429a      	cmp	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	f173 0300 	sbcs.w	r3, r3, #0
 8003776:	d37b      	bcc.n	8003870 <_ZN13RocketChannel16ignitionSequenceEy+0x214>
			{
				fuelServoChannel.setTargetPos(20000);
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003780:	4618      	mov	r0, r3
 8003782:	f000 ff43 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
				//oxServoChannel.setTargetPos(30000);
				oxServoChannel.setTargetPos(22000);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f245 51f0 	movw	r1, #22000	; 0x55f0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 ff3c 	bl	800460c <_ZN12ServoChannel12setTargetPosEt>
				ignitionState = IgnitionSequence::VALVES_SLOWLY_OPEN;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	2204      	movs	r2, #4
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
			}
			break;
 800379a:	e069      	b.n	8003870 <_ZN13RocketChannel16ignitionSequenceEy+0x214>
		case IgnitionSequence::VALVES_SLOWLY_OPEN: // T+0.5 -> T+1.2 Slowly move valves across the opening point (fuel: 22000, ox: 33000)
			if (time - timeLastTransition > 10500)
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80037a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037a6:	ebb0 0a02 	subs.w	sl, r0, r2
 80037aa:	eb61 0b03 	sbc.w	fp, r1, r3
 80037ae:	f642 1305 	movw	r3, #10501	; 0x2905
 80037b2:	459a      	cmp	sl, r3
 80037b4:	f17b 0300 	sbcs.w	r3, fp, #0
 80037b8:	d35c      	bcc.n	8003874 <_ZN13RocketChannel16ignitionSequenceEy+0x218>
			{
				fuelServoChannel.moveToPosInInterval(35000, 700);
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80037c2:	f648 01b8 	movw	r1, #35000	; 0x88b8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 ff2f 	bl	800462a <_ZN12ServoChannel19moveToPosInIntervalEtt>
				//oxServoChannel.moveToPosInInterval(43000, 700);
				oxServoChannel.moveToPosInInterval(35000, 700);
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80037d4:	f648 01b8 	movw	r1, #35000	; 0x88b8
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 ff26 	bl	800462a <_ZN12ServoChannel19moveToPosInIntervalEtt>
				ignitionState = IgnitionSequence::VALVES_FULLY_OPEN;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	2205      	movs	r2, #5
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
			}
			break;
 80037e4:	e046      	b.n	8003874 <_ZN13RocketChannel16ignitionSequenceEy+0x218>
		case IgnitionSequence::VALVES_FULLY_OPEN: // T+1.2 -> T+1.7 Valves to 100% open
			if (time - timeLastTransition > 11200)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80037ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037f0:	ebb0 0802 	subs.w	r8, r0, r2
 80037f4:	eb61 0903 	sbc.w	r9, r1, r3
 80037f8:	f642 33c1 	movw	r3, #11201	; 0x2bc1
 80037fc:	4598      	cmp	r8, r3
 80037fe:	f179 0300 	sbcs.w	r3, r9, #0
 8003802:	d339      	bcc.n	8003878 <_ZN13RocketChannel16ignitionSequenceEy+0x21c>
			{
				fuelServoChannel.moveToPosInInterval(65000, 500);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800380c:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8003810:	4618      	mov	r0, r3
 8003812:	f000 ff0a 	bl	800462a <_ZN12ServoChannel19moveToPosInIntervalEtt>
				oxServoChannel.moveToPosInInterval(65000, 500);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800381e:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8003822:	4618      	mov	r0, r3
 8003824:	f000 ff01 	bl	800462a <_ZN12ServoChannel19moveToPosInIntervalEtt>
				ignitionState = IgnitionSequence::IGNITION_OFF;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	2206      	movs	r2, #6
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
			}
			break;
 800382e:	e023      	b.n	8003878 <_ZN13RocketChannel16ignitionSequenceEy+0x21c>
		case IgnitionSequence::IGNITION_OFF: // T+1.5 - Ignition off
			if (time - timeLastTransition > 11500)
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003836:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800383a:	1a84      	subs	r4, r0, r2
 800383c:	eb61 0503 	sbc.w	r5, r1, r3
 8003840:	f642 43ed 	movw	r3, #11501	; 0x2ced
 8003844:	429c      	cmp	r4, r3
 8003846:	f175 0300 	sbcs.w	r3, r5, #0
 800384a:	d317      	bcc.n	800387c <_ZN13RocketChannel16ignitionSequenceEy+0x220>
			{
				(void) igniter0Channel.setState(0);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fcc9 	bl	80031ea <_ZN11PyroChannel8setStateEm>
				(void) igniter1Channel.setState(0);
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fcc3 	bl	80031ea <_ZN11PyroChannel8setStateEm>
				return HOLD_DOWN;
 8003864:	2303      	movs	r3, #3
 8003866:	e00b      	b.n	8003880 <_ZN13RocketChannel16ignitionSequenceEy+0x224>
			break;
 8003868:	bf00      	nop
 800386a:	e008      	b.n	800387e <_ZN13RocketChannel16ignitionSequenceEy+0x222>
			break;
 800386c:	bf00      	nop
 800386e:	e006      	b.n	800387e <_ZN13RocketChannel16ignitionSequenceEy+0x222>
			break;
 8003870:	bf00      	nop
 8003872:	e004      	b.n	800387e <_ZN13RocketChannel16ignitionSequenceEy+0x222>
			break;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <_ZN13RocketChannel16ignitionSequenceEy+0x222>
			break;
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <_ZN13RocketChannel16ignitionSequenceEy+0x222>
			}
			break;
 800387c:	bf00      	nop
	}

	return IGNITION_SEQUENCE;
 800387e:	2302      	movs	r3, #2

}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop

0800388c <_ZN13RocketChannel8holddownEy>:

ROCKET_STATE RocketChannel::holddown(uint64_t time)
{
 800388c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	e9c7 2300 	strd	r2, r3, [r7]
	if (holdDownTimeout > 0)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d046      	beq.n	8003932 <_ZN13RocketChannel8holddownEy+0xa6>
	{
		if (time - timeLastTransition > holdDownTimeout)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80038aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038ae:	1a84      	subs	r4, r0, r2
 80038b0:	eb61 0503 	sbc.w	r5, r1, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	4698      	mov	r8, r3
 80038c0:	4691      	mov	r9, r2
 80038c2:	45a0      	cmp	r8, r4
 80038c4:	eb79 0305 	sbcs.w	r3, r9, r5
 80038c8:	d22c      	bcs.n	8003924 <_ZN13RocketChannel8holddownEy+0x98>
		{ // release after x s to lessen apogee
			if (chamberPressureChannel.getMeasurement() < chamberPressureMin)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	331c      	adds	r3, #28
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4610      	mov	r0, r2
 80038da:	4798      	blx	r3
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80038e4:	429a      	cmp	r2, r3
 80038e6:	bf34      	ite	cc
 80038e8:	2301      	movcc	r3, #1
 80038ea:	2300      	movcs	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <_ZN13RocketChannel8holddownEy+0x7a>
			{ // if holddown timeout has passed, still check for chamber pressure
				chamberPressureGoodCounter = 0;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	871a      	strh	r2, [r3, #56]	; 0x38
				chamberPressureLowCounter++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fc:	3301      	adds	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	86da      	strh	r2, [r3, #54]	; 0x36
 8003904:	e008      	b.n	8003918 <_ZN13RocketChannel8holddownEy+0x8c>
			}
			else
			{
				chamberPressureLowCounter = 0;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	86da      	strh	r2, [r3, #54]	; 0x36
				chamberPressureGoodCounter++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003910:	3301      	adds	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	871a      	strh	r2, [r3, #56]	; 0x38
			if (chamberPressureLowCounter > CHAMBER_PRESSURE_LOW_COUNT_MAX)
			{
				//return ABORT; do not abort in test environment
			}

			if (chamberPressureGoodCounter > CHAMBER_PRESSURE_GOOD_COUNT_MIN)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800391c:	2b32      	cmp	r3, #50	; 0x32
 800391e:	d935      	bls.n	800398c <_ZN13RocketChannel8holddownEy+0x100>
			{
				//TODO calibrate holddown servo
				return POWERED_ASCENT;
 8003920:	2304      	movs	r3, #4
 8003922:	e034      	b.n	800398e <_ZN13RocketChannel8holddownEy+0x102>
			}
		}
		else
		{
			chamberPressureGoodCounter = 0;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	871a      	strh	r2, [r3, #56]	; 0x38
			chamberPressureLowCounter = 0;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003930:	e02c      	b.n	800398c <_ZN13RocketChannel8holddownEy+0x100>
	{
		//if (chamberPressureChannel.getMeasurement() >= chamberPressureMin)
		//{
		//	return POWERED_ASCENT;
		//}
		if (chamberPressureChannel.getMeasurement() < chamberPressureMin)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	331c      	adds	r3, #28
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4610      	mov	r0, r2
 8003942:	4798      	blx	r3
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800394c:	429a      	cmp	r2, r3
 800394e:	bf34      	ite	cc
 8003950:	2301      	movcc	r3, #1
 8003952:	2300      	movcs	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <_ZN13RocketChannel8holddownEy+0xe2>
		{ // if holddown timeout has passed, still check for chamber pressure
			chamberPressureGoodCounter = 0;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	871a      	strh	r2, [r3, #56]	; 0x38
			chamberPressureLowCounter++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	3301      	adds	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	86da      	strh	r2, [r3, #54]	; 0x36
 800396c:	e008      	b.n	8003980 <_ZN13RocketChannel8holddownEy+0xf4>
		}
		else
		{
			chamberPressureLowCounter = 0;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	86da      	strh	r2, [r3, #54]	; 0x36
			chamberPressureGoodCounter++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003978:	3301      	adds	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	871a      	strh	r2, [r3, #56]	; 0x38
		if (chamberPressureLowCounter > CHAMBER_PRESSURE_LOW_COUNT_MAX)
		{
			//return ABORT; do not abort in test environment
		}

		if (chamberPressureGoodCounter > CHAMBER_PRESSURE_GOOD_COUNT_MIN)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003984:	2b32      	cmp	r3, #50	; 0x32
 8003986:	d901      	bls.n	800398c <_ZN13RocketChannel8holddownEy+0x100>
		{
			//TODO calibrate holddown servo
			return POWERED_ASCENT;
 8003988:	2304      	movs	r3, #4
 800398a:	e000      	b.n	800398e <_ZN13RocketChannel8holddownEy+0x102>
		}
	}
	return HOLD_DOWN;
 800398c:	2303      	movs	r3, #3

}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003998 <_ZN13RocketChannel13poweredAscentEy>:

ROCKET_STATE RocketChannel::poweredAscent(uint64_t time)
{
 8003998:	b4b0      	push	{r4, r5, r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	e9c7 2300 	strd	r2, r3, [r7]
	if (time - timeLastTransition > 8500)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80039aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039ae:	1a84      	subs	r4, r0, r2
 80039b0:	eb61 0503 	sbc.w	r5, r1, r3
 80039b4:	f242 1335 	movw	r3, #8501	; 0x2135
 80039b8:	429c      	cmp	r4, r3
 80039ba:	f175 0300 	sbcs.w	r3, r5, #0
 80039be:	d301      	bcc.n	80039c4 <_ZN13RocketChannel13poweredAscentEy+0x2c>
	{ // motor burnout, close valves, IMPORTANT!: total burn time before shutoff is powered + unpowered ascent
		return UNPOWERED_ASCENT;
 80039c0:	2305      	movs	r3, #5
 80039c2:	e000      	b.n	80039c6 <_ZN13RocketChannel13poweredAscentEy+0x2e>
	}
	return POWERED_ASCENT;
 80039c4:	2304      	movs	r3, #4
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bcb0      	pop	{r4, r5, r7}
 80039ce:	4770      	bx	lr

080039d0 <_ZN13RocketChannel7depressEy>:

ROCKET_STATE RocketChannel::depress(uint64_t time)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	e9c7 2300 	strd	r2, r3, [r7]
	if (oxPressureChannel.getMeasurement() < 10 && fuelPressureChannel.getMeasurement() < 10)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	331c      	adds	r3, #28
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4610      	mov	r0, r2
 80039ec:	4798      	blx	r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b09      	cmp	r3, #9
 80039f2:	d80d      	bhi.n	8003a10 <_ZN13RocketChannel7depressEy+0x40>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	331c      	adds	r3, #28
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4610      	mov	r0, r2
 8003a04:	4798      	blx	r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	d801      	bhi.n	8003a10 <_ZN13RocketChannel7depressEy+0x40>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <_ZN13RocketChannel7depressEy+0x42>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <_ZN13RocketChannel7depressEy+0x4a>
	{ // PMU2 sent end of flight, depress rocket and go to idle state once pressures drop below a minimum
		// TODO: add variable for depress maximum pressures
		return PAD_IDLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <_ZN13RocketChannel7depressEy+0x4c>
	}
	return DEPRESS;
 8003a1a:	2306      	movs	r3, #6
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZN13RocketChannel5abortEy>:

ROCKET_STATE RocketChannel::abort(uint64_t time)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	e9c7 2300 	strd	r2, r3, [r7]
	return ABORT;
 8003a30:	2307      	movs	r3, #7
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_ZN13RocketChannel5resetEv>:

int RocketChannel::reset()
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
	externalNextState = PAD_IDLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	internalNextState = PAD_IDLE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	ignitionState = IgnitionSequence::INIT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
	chamberPressureMin = 0;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	869a      	strh	r2, [r3, #52]	; 0x34
	chamberPressureLowCounter = 0;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
	chamberPressureGoodCounter = 0;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	871a      	strh	r2, [r3, #56]	; 0x38
	autoCheckBadCounter = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	875a      	strh	r2, [r3, #58]	; 0x3a
	state = PAD_IDLE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	return 0;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <_ZN13RocketChannel14processMessageEhPhRh>:

int RocketChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
 8003a9e:	3b08      	subs	r3, #8
 8003aa0:	2b0a      	cmp	r3, #10
 8003aa2:	d84e      	bhi.n	8003b42 <_ZN13RocketChannel14processMessageEhPhRh+0xb6>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <_ZN13RocketChannel14processMessageEhPhRh+0x20>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003b11 	.word	0x08003b11
 8003ab0:	08003b43 	.word	0x08003b43
 8003ab4:	08003b1f 	.word	0x08003b1f
 8003ab8:	08003b43 	.word	0x08003b43
 8003abc:	08003ad9 	.word	0x08003ad9
 8003ac0:	08003b43 	.word	0x08003b43
 8003ac4:	08003aef 	.word	0x08003aef
 8003ac8:	08003b43 	.word	0x08003b43
 8003acc:	08003afb 	.word	0x08003afb
 8003ad0:	08003b43 	.word	0x08003b43
 8003ad4:	08003b2d 	.word	0x08003b2d
	{
		case ROCKET_REQ_INTERNAL_CONTROL:
			if (state == PAD_IDLE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <_ZN13RocketChannel14processMessageEhPhRh+0x5e>
			{
				externalNextState = IGNITION_SEQUENCE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			return 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e031      	b.n	8003b52 <_ZN13RocketChannel14processMessageEhPhRh+0xc6>
		case ROCKET_REQ_ABORT:
			externalNextState = ABORT;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2207      	movs	r2, #7
 8003af2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			return 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e02b      	b.n	8003b52 <_ZN13RocketChannel14processMessageEhPhRh+0xc6>
		case ROCKET_REQ_END_OF_FLIGHT:
			if (state == UNPOWERED_ASCENT)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d103      	bne.n	8003b0c <_ZN13RocketChannel14processMessageEhPhRh+0x80>
			{
				externalNextState = DEPRESS;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2206      	movs	r2, #6
 8003b08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			return 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e020      	b.n	8003b52 <_ZN13RocketChannel14processMessageEhPhRh+0xc6>
		case ROCKET_REQ_SET_ROCKET_STATE:
			setRocketState(returnData, n);
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f907 	bl	8003d28 <_ZN13RocketChannel14setRocketStateEPhRh>
			return 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e019      	b.n	8003b52 <_ZN13RocketChannel14processMessageEhPhRh+0xc6>
		case ROCKET_REQ_GET_ROCKET_STATE:
			getRocketState(returnData, n);
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f92b 	bl	8003d7e <_ZN13RocketChannel14getRocketStateEPhRh>
			return 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e012      	b.n	8003b52 <_ZN13RocketChannel14processMessageEhPhRh+0xc6>
		case ROCKET_REQ_AUTO_CHECK:
			if (state == PAD_IDLE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <_ZN13RocketChannel14processMessageEhPhRh+0xb2>
			{
				externalNextState = AUTO_CHECK;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			return 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e007      	b.n	8003b52 <_ZN13RocketChannel14processMessageEhPhRh+0xc6>
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	7af9      	ldrb	r1, [r7, #11]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	f7fe f879 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	bf00      	nop
	}
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <_ZN13RocketChannel13getSensorDataEPhRh>:

int RocketChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4413      	add	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
	*out = state;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	801a      	strh	r2, [r3, #0]

	n += ROCKET_DATA_N_BYTES;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	3302      	adds	r3, #2
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	701a      	strb	r2, [r3, #0]
	return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <_ZN13RocketChannel11setVariableEhl>:

int RocketChannel::setVariable(uint8_t variableId, int32_t data)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d84c      	bhi.n	8003c4a <_ZN13RocketChannel11setVariableEhl+0xae>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <_ZN13RocketChannel11setVariableEhl+0x1c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bdd 	.word	0x08003bdd
 8003bbc:	08003bfd 	.word	0x08003bfd
 8003bc0:	08003c1d 	.word	0x08003c1d
 8003bc4:	08003c3d 	.word	0x08003c3d
 8003bc8:	08003bcd 	.word	0x08003bcd
	{
		case ROCKET_STATE_REFRESH_DIVIDER:
			refreshDivider = data;
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
			return 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e038      	b.n	8003c4e <_ZN13RocketChannel11setVariableEhl+0xb2>
		case ROCKET_MINIMUM_CHAMBER_PRESSURE:
			chamberPressureMin = data * 4095 / UINT16_MAX; // convert from 16 to 12bit scale
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <_ZN13RocketChannel11setVariableEhl+0xc0>)
 8003be6:	fb82 1203 	smull	r1, r2, r2, r3
 8003bea:	441a      	add	r2, r3
 8003bec:	13d2      	asrs	r2, r2, #15
 8003bee:	17db      	asrs	r3, r3, #31
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	869a      	strh	r2, [r3, #52]	; 0x34
			return 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e028      	b.n	8003c4e <_ZN13RocketChannel11setVariableEhl+0xb2>
		case ROCKET_MINIMUM_FUEL_PRESSURE:
			fuelPressureMin = data * 4095 / UINT16_MAX;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <_ZN13RocketChannel11setVariableEhl+0xc0>)
 8003c06:	fb82 1203 	smull	r1, r2, r2, r3
 8003c0a:	441a      	add	r2, r3
 8003c0c:	13d2      	asrs	r2, r2, #15
 8003c0e:	17db      	asrs	r3, r3, #31
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	879a      	strh	r2, [r3, #60]	; 0x3c
			return 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e018      	b.n	8003c4e <_ZN13RocketChannel11setVariableEhl+0xb2>
		case ROCKET_MINIMUM_OX_PRESSURE:
			oxPressureMin = data * 4095 / UINT16_MAX;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	031b      	lsls	r3, r3, #12
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <_ZN13RocketChannel11setVariableEhl+0xc0>)
 8003c26:	fb82 1203 	smull	r1, r2, r2, r3
 8003c2a:	441a      	add	r2, r3
 8003c2c:	13d2      	asrs	r2, r2, #15
 8003c2e:	17db      	asrs	r3, r3, #31
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	87da      	strh	r2, [r3, #62]	; 0x3e
			return 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e008      	b.n	8003c4e <_ZN13RocketChannel11setVariableEhl+0xb2>
		case ROCKET_HOLDDOWN_TIMEOUT:
			holdDownTimeout = data;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			return 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e001      	b.n	8003c4e <_ZN13RocketChannel11setVariableEhl+0xb2>
		default:
			return -1;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	80008001 	.word	0x80008001

08003c60 <_ZNK13RocketChannel11getVariableEhRl>:

int RocketChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8003c6e:	7afb      	ldrb	r3, [r7, #11]
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d84f      	bhi.n	8003d14 <_ZNK13RocketChannel11getVariableEhRl+0xb4>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <_ZNK13RocketChannel11getVariableEhRl+0x1c>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003cc1 	.word	0x08003cc1
 8003c84:	08003ce3 	.word	0x08003ce3
 8003c88:	08003d05 	.word	0x08003d05
 8003c8c:	08003c91 	.word	0x08003c91
	{
		case ROCKET_STATE_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	461a      	mov	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
			return 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e03c      	b.n	8003d18 <_ZNK13RocketChannel11getVariableEhRl+0xb8>
		case ROCKET_MINIMUM_CHAMBER_PRESSURE:
			data = (int32_t) chamberPressureMin * UINT16_MAX / 4095;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <_ZNK13RocketChannel11getVariableEhRl+0xc4>)
 8003cac:	fb82 1203 	smull	r1, r2, r2, r3
 8003cb0:	441a      	add	r2, r3
 8003cb2:	12d2      	asrs	r2, r2, #11
 8003cb4:	17db      	asrs	r3, r3, #31
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	601a      	str	r2, [r3, #0]
			return 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e02b      	b.n	8003d18 <_ZNK13RocketChannel11getVariableEhRl+0xb8>
		case ROCKET_MINIMUM_FUEL_PRESSURE:
			data = (int32_t) fuelPressureMin * UINT16_MAX / 4095;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <_ZNK13RocketChannel11getVariableEhRl+0xc4>)
 8003cce:	fb82 1203 	smull	r1, r2, r2, r3
 8003cd2:	441a      	add	r2, r3
 8003cd4:	12d2      	asrs	r2, r2, #11
 8003cd6:	17db      	asrs	r3, r3, #31
 8003cd8:	1ad2      	subs	r2, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	601a      	str	r2, [r3, #0]
			return 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e01a      	b.n	8003d18 <_ZNK13RocketChannel11getVariableEhRl+0xb8>
		case ROCKET_MINIMUM_OX_PRESSURE:
			data = (int32_t) oxPressureMin * UINT16_MAX / 4095;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4613      	mov	r3, r2
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <_ZNK13RocketChannel11getVariableEhRl+0xc4>)
 8003cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8003cf4:	441a      	add	r2, r3
 8003cf6:	12d2      	asrs	r2, r2, #11
 8003cf8:	17db      	asrs	r3, r3, #31
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
			return 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e009      	b.n	8003d18 <_ZNK13RocketChannel11getVariableEhRl+0xb8>
		case ROCKET_HOLDDOWN_TIMEOUT:
			data = (int32_t) holdDownTimeout;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	601a      	str	r2, [r3, #0]
			return 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e001      	b.n	8003d18 <_ZNK13RocketChannel11getVariableEhRl+0xb8>
		default:
			return -1;
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	80080081 	.word	0x80080081

08003d28 <_ZN13RocketChannel14setRocketStateEPhRh>:

void RocketChannel::setRocketState(uint8_t *data, uint8_t &n)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
	RocketStateReqMsg_t *rocketStateRequestMsg;
	RocketStateResMsg_t *rocketStateResponseMsg;
	rocketStateRequestMsg = (RocketStateReqMsg_t*) data;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	617b      	str	r3, [r7, #20]
	externalNextState = static_cast<ROCKET_STATE>(rocketStateRequestMsg->state);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	rocketStateResponseMsg = (RocketStateResMsg_t*) data;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	613b      	str	r3, [r7, #16]
	rocketStateResponseMsg->state = state;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d4e:	461a      	mov	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	601a      	str	r2, [r3, #0]
	rocketStateResponseMsg->status = SUCCESS;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2200      	movs	r2, #0
 8003d58:	711a      	strb	r2, [r3, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	715a      	strb	r2, [r3, #5]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	719a      	strb	r2, [r3, #6]
 8003d62:	2200      	movs	r2, #0
 8003d64:	71da      	strb	r2, [r3, #7]
	n += sizeof(RocketStateResMsg_t);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	701a      	strb	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <_ZN13RocketChannel14getRocketStateEPhRh>:

void RocketChannel::getRocketState(uint8_t *data, uint8_t &n)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b087      	sub	sp, #28
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
	RocketStateResMsg_t *rocketStateResponseMsg;

	rocketStateResponseMsg = (RocketStateResMsg_t*) data;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	617b      	str	r3, [r7, #20]
	rocketStateResponseMsg->state = state;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d94:	461a      	mov	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	601a      	str	r2, [r3, #0]
	rocketStateResponseMsg->status = WRITABLE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f042 0202 	orr.w	r2, r2, #2
 8003da2:	711a      	strb	r2, [r3, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	715a      	strb	r2, [r3, #5]
 8003da8:	2200      	movs	r2, #0
 8003daa:	719a      	strb	r2, [r3, #6]
 8003dac:	2200      	movs	r2, #0
 8003dae:	71da      	strb	r2, [r3, #7]
	n += sizeof(RocketStateResMsg_t);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	701a      	strb	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>:

constexpr ServoRefPos ServoChannel::com0Ref;
constexpr ServoRefPos ServoChannel::pwm0Ref;
constexpr ServoRefPos ServoChannel::adc0Ref;

ServoChannel::ServoChannel(uint8_t id, uint8_t servoId, const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control, const STRHAL_ADC_Channel_t &feedbackChannel, const STRHAL_ADC_Channel_t &currentChannel, const STRHAL_GPIO_t &led, uint32_t refreshDivider) :
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	72fb      	strb	r3, [r7, #11]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	72bb      	strb	r3, [r7, #10]
		AbstractChannel(CHANNEL_TYPE_SERVO, id, refreshDivider), servoId(servoId), pwmTimer(pwmTimer), ctrlChannelId(control), feedbackChannel(feedbackChannel), currentChannel(currentChannel), led(led), flash(W25Qxx_Flash::instance()), servoState(ServoState::IDLE), reqCalib(false)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	7afa      	ldrb	r2, [r7, #11]
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	2108      	movs	r1, #8
 8003de2:	f7fd fea3 	bl	8001b2c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8003de6:	4a35      	ldr	r2, [pc, #212]	; (8003ebc <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm+0xf4>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	7aba      	ldrb	r2, [r7, #10]
 8003df0:	73da      	strb	r2, [r3, #15]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	741a      	strb	r2, [r3, #16]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	745a      	strb	r2, [r3, #17]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	615a      	str	r2, [r3, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	619a      	str	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	331c      	adds	r3, #28
 8003e14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e18:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a3a      	ldr	r2, [r7, #32]
 8003e20:	3324      	adds	r3, #36	; 0x24
 8003e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e26:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2e:	332c      	adds	r3, #44	; 0x2c
 8003e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e34:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	869a      	strh	r2, [r3, #52]	; 0x34
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	871a      	strh	r2, [r3, #56]	; 0x38
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm+0xf8>)
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
 8003e66:	f000 fd25 	bl	80048b4 <_ZN12W25Qxx_Flash8instanceEv>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	649a      	str	r2, [r3, #72]	; 0x48
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
{
}
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	0800b9c4 	.word	0x0800b9c4
 8003ec0:	0800b9b8 	.word	0x0800b9b8

08003ec4 <_ZN12ServoChannel4initEv>:

int ServoChannel::init()
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&led, STRHAL_GPIO_TYPE_OPP);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	332c      	adds	r3, #44	; 0x2c
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f004 ff84 	bl	8008de0 <STRHAL_GPIO_SingleInit>

	if (STRHAL_TIM_PWM_Init(pwmTimer, PWM_PSC, PWM_RES) < 0)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7c1b      	ldrb	r3, [r3, #16]
 8003edc:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8003ee0:	2158      	movs	r1, #88	; 0x58
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f005 ffbc 	bl	8009e60 <STRHAL_TIM_PWM_Init>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	0fdb      	lsrs	r3, r3, #31
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <_ZN12ServoChannel4initEv+0x34>
		return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef6:	e0a7      	b.n	8004048 <_ZN12ServoChannel4initEv+0x184>

	if (STRHAL_TIM_PWM_AddChannel(&pwmChannel, ctrlChannelId, STRHAL_TIM_PWM_CHANNELTYPE_SO) < 0)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f103 0012 	add.w	r0, r3, #18
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7c5b      	ldrb	r3, [r3, #17]
 8003f02:	2200      	movs	r2, #0
 8003f04:	4619      	mov	r1, r3
 8003f06:	f006 f83d 	bl	8009f84 <STRHAL_TIM_PWM_AddChannel>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	0fdb      	lsrs	r3, r3, #31
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <_ZN12ServoChannel4initEv+0x56>
		return -1;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f18:	e096      	b.n	8004048 <_ZN12ServoChannel4initEv+0x184>


	feedbackMeasurement = STRHAL_ADC_SubscribeChannel(&feedbackChannel, STRHAL_ADC_INTYPE_REGULAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	331c      	adds	r3, #28
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f003 ffab 	bl	8007e7c <STRHAL_ADC_SubscribeChannel>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	615a      	str	r2, [r3, #20]
	if(currentChannel.ADCx)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <_ZN12ServoChannel4initEv+0x82>
	currentMeasurement = STRHAL_ADC_SubscribeChannel(&currentChannel, STRHAL_ADC_INTYPE_REGULAR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 ff9e 	bl	8007e7c <STRHAL_ADC_SubscribeChannel>
 8003f40:	4602      	mov	r2, r0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	619a      	str	r2, [r3, #24]

	// Load and assign config
	if (!flash.readConfig())
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f982 	bl	8005254 <_ZN12W25Qxx_Flash10readConfigEv>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f083 0301 	eor.w	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <_ZN12ServoChannel4initEv+0x9e>
		return -1;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f60:	e072      	b.n	8004048 <_ZN12ServoChannel4initEv+0x184>

	// Read config values starting from the servos config register start address
	uint32_t configAddrStart = SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7bdb      	ldrb	r3, [r3, #15]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	61fb      	str	r3, [r7, #28]
	adcRef.start = flash.readConfigReg(configAddrStart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f987 	bl	8005284 <_ZN12W25Qxx_Flash13readConfigRegEm>
 8003f76:	4603      	mov	r3, r0
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
	adcRef.end = flash.readConfigReg(configAddrStart + 1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3301      	adds	r3, #1
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f001 f97b 	bl	8005284 <_ZN12W25Qxx_Flash13readConfigRegEm>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	87da      	strh	r2, [r3, #62]	; 0x3e
	pwmRef.start = flash.readConfigReg(configAddrStart + 2);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f001 f96f 	bl	8005284 <_ZN12W25Qxx_Flash13readConfigRegEm>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pwmRef.end = flash.readConfigReg(configAddrStart + 3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	3303      	adds	r3, #3
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f001 f962 	bl	8005284 <_ZN12W25Qxx_Flash13readConfigRegEm>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	if (pwmRef.start == 0 && pwmRef.end == 0) // flash never written -> init default
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d12e      	bne.n	8004032 <_ZN12ServoChannel4initEv+0x16e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d129      	bne.n	8004032 <_ZN12ServoChannel4initEv+0x16e>
	{
		uint32_t vals[4] =
 8003fde:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <_ZN12ServoChannel4initEv+0x18c>)
 8003fe0:	f107 040c 	add.w	r4, r7, #12
 8003fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{ (uint32_t) adc0Ref.start, (uint32_t) adc0Ref.end, (uint32_t) pwm0Ref.start, (uint32_t) pwm0Ref.end };
		flash.writeConfigRegsFromAddr(SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH, vals, 4);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7bdb      	ldrb	r3, [r3, #15]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f107 020c 	add.w	r2, r7, #12
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	f001 f8e2 	bl	80051c4 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>
		adcRef = adc0Ref;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f640 72ff 	movw	r2, #4095	; 0xfff
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
		pwmRef = pwm0Ref;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a10      	ldr	r2, [pc, #64]	; (8004054 <_ZN12ServoChannel4initEv+0x190>)
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

		if(!flash.writeTempConfig())
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	4618      	mov	r0, r3
 800401c:	f001 f870 	bl	8005100 <_ZN12W25Qxx_Flash15writeTempConfigEv>
 8004020:	4603      	mov	r3, r0
 8004022:	f083 0301 	eor.w	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <_ZN12ServoChannel4initEv+0x16e>
			return -1;;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004030:	e00a      	b.n	8004048 <_ZN12ServoChannel4initEv+0x184>
	}

	if (feedbackMeasurement == nullptr)// || currentMeasurement == nullptr)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <_ZN12ServoChannel4initEv+0x17c>
		return -1;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800403e:	e003      	b.n	8004048 <_ZN12ServoChannel4initEv+0x184>

	servoState = ServoState::READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	649a      	str	r2, [r3, #72]	; 0x48
	return 0;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3724      	adds	r7, #36	; 0x24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd90      	pop	{r4, r7, pc}
 8004050:	0800b794 	.word	0x0800b794
 8004054:	0800b9b8 	.word	0x0800b9b8

08004058 <_ZN12ServoChannel4execEv>:

int ServoChannel::exec()
{
 8004058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800405c:	b08f      	sub	sp, #60	; 0x3c
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 8004062:	f005 fc69 	bl	8009938 <STRHAL_Systick_GetTick>
 8004066:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004070:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004074:	ebb0 0802 	subs.w	r8, r0, r2
 8004078:	eb61 0903 	sbc.w	r9, r1, r3
 800407c:	f1b8 0f05 	cmp.w	r8, #5
 8004080:	f179 0300 	sbcs.w	r3, r9, #0
 8004084:	d201      	bcs.n	800408a <_ZN12ServoChannel4execEv+0x32>
		return 0;
 8004086:	2300      	movs	r3, #0
 8004088:	e14f      	b.n	800432a <_ZN12ServoChannel4execEv+0x2d2>

	timeLastSample = time;
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004090:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	feedbackPositionLast = feedbackPosition;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	feedbackPosition = tPosToCanonic(*feedbackMeasurement, adcRef);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	333c      	adds	r3, #60	; 0x3c
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 faf1 	bl	8004694 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	86da      	strh	r2, [r3, #54]	; 0x36
	if (step != 0)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d033      	beq.n	800412c <_ZN12ServoChannel4execEv+0xd4>
	{
		if (finalPosition != targetPosition)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d02a      	beq.n	8004126 <_ZN12ServoChannel4execEv+0xce>
		{
			targetPosition += step;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	4413      	add	r3, r2
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	869a      	strh	r2, [r3, #52]	; 0x34
			if (step > 0)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	dd0d      	ble.n	800410a <_ZN12ServoChannel4execEv+0xb2>
				targetPosition = (targetPosition > finalPosition) ? finalPosition : targetPosition;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d902      	bls.n	8004100 <_ZN12ServoChannel4execEv+0xa8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80040fe:	e001      	b.n	8004104 <_ZN12ServoChannel4execEv+0xac>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	8693      	strh	r3, [r2, #52]	; 0x34
 8004108:	e010      	b.n	800412c <_ZN12ServoChannel4execEv+0xd4>
			else
				targetPosition = (targetPosition < finalPosition) ? finalPosition : targetPosition;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004112:	429a      	cmp	r2, r3
 8004114:	d202      	bcs.n	800411c <_ZN12ServoChannel4execEv+0xc4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800411a:	e001      	b.n	8004120 <_ZN12ServoChannel4execEv+0xc8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	8693      	strh	r3, [r2, #52]	; 0x34
 8004124:	e002      	b.n	800412c <_ZN12ServoChannel4execEv+0xd4>
		}
		else
		{
			step = 0;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	875a      	strh	r2, [r3, #58]	; 0x3a
		}
	}
	if (targetPosition != targetPositionLast)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004136:	429a      	cmp	r2, r3
 8004138:	d034      	beq.n	80041a4 <_ZN12ServoChannel4execEv+0x14c>
	{

		STRHAL_TIM_PWM_SetDuty(&pwmChannel, tPosFromCanonic(targetPosition, pwmRef));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f103 0612 	add.w	r6, r3, #18
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3340      	adds	r3, #64	; 0x40
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f000 fb04 	bl	8004758 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 8004150:	4603      	mov	r3, r0
 8004152:	4619      	mov	r1, r3
 8004154:	4630      	mov	r0, r6
 8004156:	f005 ff8b 	bl	800a070 <STRHAL_TIM_PWM_SetDuty>
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3312      	adds	r3, #18
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f005 ffb1 	bl	800a0c8 <STRHAL_TIM_PWM_Enable>
		STRHAL_GPIO_Write(&led, STRHAL_GPIO_VALUE_H);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	332c      	adds	r3, #44	; 0x2c
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f004 fe93 	bl	8008e98 <STRHAL_GPIO_Write>
		targetPositionLast = targetPosition;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		targetHitCount = 0;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		timeLastCommand = time;
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800418a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		servoState = ServoState::MOVIN;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2203      	movs	r2, #3
 8004192:	649a      	str	r2, [r3, #72]	; 0x48

		if (reqCalib)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <_ZN12ServoChannel4execEv+0x14c>
		{
			servoState = ServoState::CALIB;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2204      	movs	r2, #4
 80041a2:	649a      	str	r2, [r3, #72]	; 0x48
			//reqCalib = false;
		}
	}

	switch (servoState)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d049      	beq.n	8004240 <_ZN12ServoChannel4execEv+0x1e8>
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	f300 80b5 	bgt.w	800431c <_ZN12ServoChannel4execEv+0x2c4>
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	dc02      	bgt.n	80041bc <_ZN12ServoChannel4execEv+0x164>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da03      	bge.n	80041c2 <_ZN12ServoChannel4execEv+0x16a>
 80041ba:	e0af      	b.n	800431c <_ZN12ServoChannel4execEv+0x2c4>
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d00d      	beq.n	80041dc <_ZN12ServoChannel4execEv+0x184>
 80041c0:	e0ac      	b.n	800431c <_ZN12ServoChannel4execEv+0x2c4>
	{
		case ServoState::IDLE:
		case ServoState::READY:
			STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3312      	adds	r3, #18
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f005 ff7d 	bl	800a0c8 <STRHAL_TIM_PWM_Enable>
			STRHAL_GPIO_Write(&led, STRHAL_GPIO_VALUE_L);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	332c      	adds	r3, #44	; 0x2c
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f004 fe5f 	bl	8008e98 <STRHAL_GPIO_Write>
			break;
 80041da:	e0a5      	b.n	8004328 <_ZN12ServoChannel4execEv+0x2d0>

		case ServoState::MOVIN:
			if (distPos(targetPosition, feedbackPosition) < POS_DEV)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 faf9 	bl	80047de <_ZN12ServoChannel7distPosEtt>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	f240 136b 	movw	r3, #363	; 0x16b
 80041f4:	429a      	cmp	r2, r3
 80041f6:	bf94      	ite	ls
 80041f8:	2301      	movls	r3, #1
 80041fa:	2300      	movhi	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <_ZN12ServoChannel4execEv+0x1ba>
			{
				targetHitCount++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004208:	3301      	adds	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			}

			if (targetHitCount >= TARG_HIT_MIN || time - timeLastCommand > 800)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004218:	2b13      	cmp	r3, #19
 800421a:	d80d      	bhi.n	8004238 <_ZN12ServoChannel4execEv+0x1e0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004222:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004226:	1a84      	subs	r4, r0, r2
 8004228:	eb61 0503 	sbc.w	r5, r1, r3
 800422c:	f240 3321 	movw	r3, #801	; 0x321
 8004230:	429c      	cmp	r4, r3
 8004232:	f175 0300 	sbcs.w	r3, r5, #0
 8004236:	d374      	bcc.n	8004322 <_ZN12ServoChannel4execEv+0x2ca>
			{
				servoState = ServoState::IDLE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	649a      	str	r2, [r3, #72]	; 0x48
			}
			break;
 800423e:	e070      	b.n	8004322 <_ZN12ServoChannel4execEv+0x2ca>

		case ServoState::CALIB: //TODO make config load/save more efficient
			if (distPos(feedbackPosition, feedbackPositionLast) < POS_DEV)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f000 fac6 	bl	80047de <_ZN12ServoChannel7distPosEtt>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	f240 136b 	movw	r3, #363	; 0x16b
 800425a:	429a      	cmp	r2, r3
 800425c:	bf94      	ite	ls
 800425e:	2301      	movls	r3, #1
 8004260:	2300      	movhi	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <_ZN12ServoChannel4execEv+0x222>
			{
				targetHitCount++;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800426e:	3301      	adds	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8004278:	e003      	b.n	8004282 <_ZN12ServoChannel4execEv+0x22a>
			}
			else
			{
				targetHitCount = 0;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			}

			if (targetHitCount >= CALIB_HIT_MIN)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004288:	2bfe      	cmp	r3, #254	; 0xfe
 800428a:	d94c      	bls.n	8004326 <_ZN12ServoChannel4execEv+0x2ce>
			{
				uint32_t configAddrStart = SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7bdb      	ldrb	r3, [r3, #15]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c

				if (targetPosition == 0)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11b      	bne.n	80042d4 <_ZN12ServoChannel4execEv+0x27c>
				{
					adcRef.start = *feedbackMeasurement;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	879a      	strh	r2, [r3, #60]	; 0x3c
					Config regs[2] =
					{ static_cast<Config>(configAddrStart), static_cast<Config>(configAddrStart + 2) };
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	3302      	adds	r3, #2
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
					uint32_t vals[2] =
					{ (uint32_t) adcRef.start, (uint32_t) pwmRef.start };
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042be:	623b      	str	r3, [r7, #32]
					flash.writeConfigRegs(regs, vals, 2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80042c4:	f107 021c 	add.w	r2, r7, #28
 80042c8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80042cc:	2302      	movs	r3, #2
 80042ce:	f000 ff2f 	bl	8005130 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>
 80042d2:	e01b      	b.n	800430c <_ZN12ServoChannel4execEv+0x2b4>
				}
				else
				{
					adcRef.end = *feedbackMeasurement;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	87da      	strh	r2, [r3, #62]	; 0x3e
					Config regs[2] =
					{ static_cast<Config>(configAddrStart + 1), static_cast<Config>(configAddrStart + 3) };
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	3301      	adds	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	3303      	adds	r3, #3
 80042ea:	61bb      	str	r3, [r7, #24]
					uint32_t vals[2] =
					{ (uint32_t) adcRef.end, (uint32_t) pwmRef.end };
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80042f8:	613b      	str	r3, [r7, #16]
					flash.writeConfigRegs(regs, vals, 2);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80042fe:	f107 020c 	add.w	r2, r7, #12
 8004302:	f107 0114 	add.w	r1, r7, #20
 8004306:	2302      	movs	r3, #2
 8004308:	f000 ff12 	bl	8005130 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>
				}
				servoState = ServoState::IDLE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	649a      	str	r2, [r3, #72]	; 0x48
				reqCalib = false;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			break;
 800431a:	e004      	b.n	8004326 <_ZN12ServoChannel4execEv+0x2ce>
		default:
			return -1;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004320:	e003      	b.n	800432a <_ZN12ServoChannel4execEv+0x2d2>
			break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <_ZN12ServoChannel4execEv+0x2d0>
			break;
 8004326:	bf00      	nop
	}
	return 0;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	373c      	adds	r7, #60	; 0x3c
 800432e:	46bd      	mov	sp, r7
 8004330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004334 <_ZN12ServoChannel5resetEv>:

int ServoChannel::reset()
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	return 0;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <_ZN12ServoChannel14processMessageEhPhRh>:

int ServoChannel::processMessage(uint8_t cmd_id, uint8_t *ret_data, uint8_t &ret_n)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	460b      	mov	r3, r1
 800435a:	72fb      	strb	r3, [r7, #11]
	switch (cmd_id)
 800435c:	7afb      	ldrb	r3, [r7, #11]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11d      	bne.n	800439e <_ZN12ServoChannel14processMessageEhPhRh+0x52>
	{
		case SERVO_REQ_RESET_SETTINGS:
		{
			uint32_t vals[4] =
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <_ZN12ServoChannel14processMessageEhPhRh+0x6c>)
 8004364:	f107 0410 	add.w	r4, r7, #16
 8004368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800436a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ (uint32_t) adc0Ref.start, (uint32_t) adc0Ref.end, (uint32_t) pwm0Ref.start, (uint32_t) pwm0Ref.end };
			flash.writeConfigRegsFromAddr(SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH, vals, 4);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	7bdb      	ldrb	r3, [r3, #15]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4619      	mov	r1, r3
 800437a:	f107 0210 	add.w	r2, r7, #16
 800437e:	2304      	movs	r3, #4
 8004380:	f000 ff20 	bl	80051c4 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>
			adcRef = adc0Ref;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	879a      	strh	r2, [r3, #60]	; 0x3c
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
			pwmRef = pwm0Ref;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a09      	ldr	r2, [pc, #36]	; (80043bc <_ZN12ServoChannel14processMessageEhPhRh+0x70>)
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
			return 0;
 800439a:	2300      	movs	r3, #0
 800439c:	e007      	b.n	80043ae <_ZN12ServoChannel14processMessageEhPhRh+0x62>
		}
		default:
			return AbstractChannel::processMessage(cmd_id, ret_data, ret_n);
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	7af9      	ldrb	r1, [r7, #11]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	f7fd fc4b 	bl	8001c40 <_ZN15AbstractChannel14processMessageEhPhRh>
 80043aa:	4603      	mov	r3, r0
 80043ac:	bf00      	nop
	}
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	; 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd90      	pop	{r4, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	0800b794 	.word	0x0800b794
 80043bc:	0800b9b8 	.word	0x0800b9b8

080043c0 <_ZN12ServoChannel13getSensorDataEPhRh>:



int ServoChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
	uint32_t *out = (uint32_t*) (data + n);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4413      	add	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
	*out = (uint32_t) getPos();
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f948 	bl	800466e <_ZNK12ServoChannel6getPosEv>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	601a      	str	r2, [r3, #0]

	n += SERVO_DATA_N_BYTES;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	701a      	strb	r2, [r3, #0]
	return 0;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZN12ServoChannel11setVariableEhl>:
{
	return true;
}

int ServoChannel::setVariable(uint8_t variable_id, int32_t data)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	460b      	mov	r3, r1
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	72fb      	strb	r3, [r7, #11]
	uint16_t pos_data;
	switch (variable_id)
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	2b18      	cmp	r3, #24
 800440e:	d874      	bhi.n	80044fa <_ZN12ServoChannel11setVariableEhl+0xfe>
 8004410:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <_ZN12ServoChannel11setVariableEhl+0x1c>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	080044df 	.word	0x080044df
 800441c:	0800447d 	.word	0x0800447d
 8004420:	080044fb 	.word	0x080044fb
 8004424:	080044fb 	.word	0x080044fb
 8004428:	080044fb 	.word	0x080044fb
 800442c:	080044fb 	.word	0x080044fb
 8004430:	080044fb 	.word	0x080044fb
 8004434:	080044fb 	.word	0x080044fb
 8004438:	080044fb 	.word	0x080044fb
 800443c:	080044fb 	.word	0x080044fb
 8004440:	08004489 	.word	0x08004489
 8004444:	080044b3 	.word	0x080044b3
 8004448:	080044fb 	.word	0x080044fb
 800444c:	080044eb 	.word	0x080044eb
 8004450:	080044fb 	.word	0x080044fb
 8004454:	080044fb 	.word	0x080044fb
 8004458:	080044fb 	.word	0x080044fb
 800445c:	080044fb 	.word	0x080044fb
 8004460:	080044fb 	.word	0x080044fb
 8004464:	080044fb 	.word	0x080044fb
 8004468:	080044fb 	.word	0x080044fb
 800446c:	080044fb 	.word	0x080044fb
 8004470:	080044fb 	.word	0x080044fb
 8004474:	080044fb 	.word	0x080044fb
 8004478:	080044e5 	.word	0x080044e5
	{
		case SERVO_TARGET_POSITION:
			targetPosition = (uint16_t) (data & 0xFFFF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	869a      	strh	r2, [r3, #52]	; 0x34
			return 0;
 8004484:	2300      	movs	r3, #0
 8004486:	e03a      	b.n	80044fe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_STARTPOINT:
			pos_data = (uint16_t) (data & 0xFFFF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	82fb      	strh	r3, [r7, #22]
			pwmRef.start = tPosFromCanonic(pos_data, pwm0Ref);
 800448c:	8afb      	ldrh	r3, [r7, #22]
 800448e:	491e      	ldr	r1, [pc, #120]	; (8004508 <_ZN12ServoChannel11setVariableEhl+0x10c>)
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f961 	bl	8004758 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			targetPosition = 0;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	869a      	strh	r2, [r3, #52]	; 0x34
			reqCalib = true;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			return 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e025      	b.n	80044fe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_ENDPOINT:
			pos_data = (uint16_t) (data & 0xFFFF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	82fb      	strh	r3, [r7, #22]
			pwmRef.end = tPosFromCanonic(pos_data, pwm0Ref);
 80044b6:	8afb      	ldrh	r3, [r7, #22]
 80044b8:	4913      	ldr	r1, [pc, #76]	; (8004508 <_ZN12ServoChannel11setVariableEhl+0x10c>)
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f94c 	bl	8004758 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			targetPosition = UINT16_MAX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044d0:	869a      	strh	r2, [r3, #52]	; 0x34
			reqCalib = true;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			return 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	e00f      	b.n	80044fe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION:
			return -2;
 80044de:	f06f 0301 	mvn.w	r3, #1
 80044e2:	e00c      	b.n	80044fe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_RAW:
			return -2;
 80044e4:	f06f 0301 	mvn.w	r3, #1
 80044e8:	e009      	b.n	80044fe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
			return 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e001      	b.n	80044fe <_ZN12ServoChannel11setVariableEhl+0x102>

		default:
			return -1;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	0800b9b8 	.word	0x0800b9b8

0800450c <_ZNK12ServoChannel11getVariableEhRl>:

int ServoChannel::getVariable(uint8_t variable_id, int32_t &data) const
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	460b      	mov	r3, r1
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	72fb      	strb	r3, [r7, #11]
	switch (variable_id)
 800451a:	7afb      	ldrb	r3, [r7, #11]
 800451c:	2b18      	cmp	r3, #24
 800451e:	d86d      	bhi.n	80045fc <_ZNK12ServoChannel11getVariableEhRl+0xf0>
 8004520:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <_ZNK12ServoChannel11getVariableEhRl+0x1c>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	0800458d 	.word	0x0800458d
 800452c:	080045ad 	.word	0x080045ad
 8004530:	080045fd 	.word	0x080045fd
 8004534:	080045fd 	.word	0x080045fd
 8004538:	080045fd 	.word	0x080045fd
 800453c:	080045fd 	.word	0x080045fd
 8004540:	080045fd 	.word	0x080045fd
 8004544:	080045fd 	.word	0x080045fd
 8004548:	080045fd 	.word	0x080045fd
 800454c:	080045fd 	.word	0x080045fd
 8004550:	080045bb 	.word	0x080045bb
 8004554:	080045d5 	.word	0x080045d5
 8004558:	080045fd 	.word	0x080045fd
 800455c:	080045ef 	.word	0x080045ef
 8004560:	080045fd 	.word	0x080045fd
 8004564:	080045fd 	.word	0x080045fd
 8004568:	080045fd 	.word	0x080045fd
 800456c:	080045fd 	.word	0x080045fd
 8004570:	080045fd 	.word	0x080045fd
 8004574:	080045fd 	.word	0x080045fd
 8004578:	080045fd 	.word	0x080045fd
 800457c:	080045fd 	.word	0x080045fd
 8004580:	080045fd 	.word	0x080045fd
 8004584:	080045fd 	.word	0x080045fd
 8004588:	0800459b 	.word	0x0800459b
	{
		case SERVO_POSITION:
			data = feedbackPosition;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
			return 0;
 8004596:	2300      	movs	r3, #0
 8004598:	e032      	b.n	8004600 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_RAW:
			data = *feedbackMeasurement << 4;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	011a      	lsls	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
			return 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e029      	b.n	8004600 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_TARGET_POSITION:
			data = targetPosition;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
			return 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e022      	b.n	8004600 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_STARTPOINT:
			data = tPosToCanonic(pwmRef.start, pwm0Ref);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045c0:	4911      	ldr	r1, [pc, #68]	; (8004608 <_ZNK12ServoChannel11getVariableEhRl+0xfc>)
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f866 	bl	8004694 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 80045c8:	4603      	mov	r3, r0
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
			return 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e015      	b.n	8004600 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_ENDPOINT:
			data = tPosToCanonic(pwmRef.end, pwm0Ref);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80045da:	490b      	ldr	r1, [pc, #44]	; (8004608 <_ZNK12ServoChannel11getVariableEhRl+0xfc>)
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f859 	bl	8004694 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	601a      	str	r2, [r3, #0]
			return 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e008      	b.n	8004600 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
			return 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e001      	b.n	8004600 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		default:
			return -1;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	0800b9b8 	.word	0x0800b9b8

0800460c <_ZN12ServoChannel12setTargetPosEt>:

void ServoChannel::setTargetPos(uint16_t pos)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
	targetPosition = pos;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <_ZN12ServoChannel19moveToPosInIntervalEtt>:

void ServoChannel::moveToPosInInterval(uint16_t position, uint16_t interval)
{
 800462a:	b4b0      	push	{r4, r5, r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	807b      	strh	r3, [r7, #2]
 8004636:	4613      	mov	r3, r2
 8004638:	803b      	strh	r3, [r7, #0]
	step = (position - targetPosition) / interval * EXEC_SAMPLE_TICKS;
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8004640:	1a9a      	subs	r2, r3, r2
 8004642:	883b      	ldrh	r3, [r7, #0]
 8004644:	fb92 f3f3 	sdiv	r3, r2, r3
 8004648:	17da      	asrs	r2, r3, #31
 800464a:	461c      	mov	r4, r3
 800464c:	4615      	mov	r5, r2
 800464e:	b2a3      	uxth	r3, r4
 8004650:	461a      	mov	r2, r3
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	4413      	add	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	b21a      	sxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	875a      	strh	r2, [r3, #58]	; 0x3a
	finalPosition = position;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	887a      	ldrh	r2, [r7, #2]
 8004662:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bcb0      	pop	{r4, r5, r7}
 800466c:	4770      	bx	lr

0800466e <_ZNK12ServoChannel6getPosEv>:
{
	return targetPosition;
}

uint16_t ServoChannel::getPos() const
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
	return tPosToCanonic(*feedbackMeasurement, adcRef);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	333c      	adds	r3, #60	; 0x3c
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f000 f805 	bl	8004694 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 800468a:	4603      	mov	r3, r0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>:
{
	return *currentMeasurement;
}

uint16_t ServoChannel::tPosToCanonic(uint16_t pos, const ServoRefPos &frame)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	80fb      	strh	r3, [r7, #6]
	if (frame.end == frame.start)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	885a      	ldrh	r2, [r3, #2]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d102      	bne.n	80046b2 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x1e>
	{
		return UINT16_MAX;
 80046ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046b0:	e04c      	b.n	800474c <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}
	else if (frame.end < frame.start)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	885a      	ldrh	r2, [r3, #2]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d224      	bcs.n	8004708 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x74>
	{ // reversed servo
		// check if out of bounds
		if (pos <= frame.end)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	885b      	ldrh	r3, [r3, #2]
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d802      	bhi.n	80046ce <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x3a>
		{
			return UINT16_MAX;
 80046c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046cc:	e03e      	b.n	800474c <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
		}
		else if (pos >= frame.start)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d301      	bcc.n	80046dc <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x48>
		{
			return 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	e037      	b.n	800474c <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
		}
		return UINT16_MAX - ((pos - frame.end) * (UINT16_MAX / (frame.start - frame.end)));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	885b      	ldrh	r3, [r3, #2]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	4619      	mov	r1, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	885b      	ldrh	r3, [r3, #2]
 80046f0:	1acb      	subs	r3, r1, r3
 80046f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046f6:	fb91 f3f3 	sdiv	r3, r1, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	fb12 f303 	smulbb	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	b29b      	uxth	r3, r3
 8004706:	e021      	b.n	800474c <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}

	// check if out of bounds
	if (pos <= frame.start)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	429a      	cmp	r2, r3
 8004710:	d801      	bhi.n	8004716 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x82>
	{
		return 0;
 8004712:	2300      	movs	r3, #0
 8004714:	e01a      	b.n	800474c <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}
	else if (pos >= frame.end)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	885b      	ldrh	r3, [r3, #2]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x92>
	{
		return UINT16_MAX;
 8004720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004724:	e012      	b.n	800474c <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}

	return (pos - frame.start) * (UINT16_MAX / (frame.end - frame.start));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	88fa      	ldrh	r2, [r7, #6]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	b29a      	uxth	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	885b      	ldrh	r3, [r3, #2]
 8004734:	4619      	mov	r1, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	1acb      	subs	r3, r1, r3
 800473c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004740:	fb91 f3f3 	sdiv	r3, r1, r3
 8004744:	b29b      	uxth	r3, r3
 8004746:	fb12 f303 	smulbb	r3, r2, r3
 800474a:	b29b      	uxth	r3, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>:

uint16_t ServoChannel::tPosFromCanonic(uint16_t pos, const ServoRefPos &frame)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	6039      	str	r1, [r7, #0]
 8004762:	80fb      	strh	r3, [r7, #6]
	if (frame.end == frame.start)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	885a      	ldrh	r2, [r3, #2]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d102      	bne.n	8004776 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x1e>
	{
		return frame.end;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	885b      	ldrh	r3, [r3, #2]
 8004774:	e02d      	b.n	80047d2 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x7a>
	}
	else if (frame.end < frame.start)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	885a      	ldrh	r2, [r3, #2]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d215      	bcs.n	80047ae <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x56>
	{ // reversed servo
		uint16_t reversedPosition = UINT16_MAX - pos;
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	43db      	mvns	r3, r3
 8004786:	81fb      	strh	r3, [r7, #14]
		return (reversedPosition / (UINT16_MAX / (frame.start - frame.end))) + frame.end;
 8004788:	89fa      	ldrh	r2, [r7, #14]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	885b      	ldrh	r3, [r3, #2]
 8004794:	1acb      	subs	r3, r1, r3
 8004796:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800479a:	fb91 f3f3 	sdiv	r3, r1, r3
 800479e:	fb92 f3f3 	sdiv	r3, r2, r3
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	885b      	ldrh	r3, [r3, #2]
 80047a8:	4413      	add	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	e011      	b.n	80047d2 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x7a>
	}

	return (pos / (UINT16_MAX / (frame.end - frame.start))) + frame.start;
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	885b      	ldrh	r3, [r3, #2]
 80047b4:	4619      	mov	r1, r3
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	1acb      	subs	r3, r1, r3
 80047bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047c0:	fb91 f3f3 	sdiv	r3, r1, r3
 80047c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	b29b      	uxth	r3, r3
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <_ZN12ServoChannel7distPosEtt>:

uint16_t ServoChannel::distPos(uint16_t pos1, uint16_t pos2)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4603      	mov	r3, r0
 80047e6:	460a      	mov	r2, r1
 80047e8:	80fb      	strh	r3, [r7, #6]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80bb      	strh	r3, [r7, #4]
	return pos1 < pos2 ? pos2 - pos1 : pos1 - pos2;
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	88bb      	ldrh	r3, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d204      	bcs.n	8004800 <_ZN12ServoChannel7distPosEtt+0x22>
 80047f6:	88ba      	ldrh	r2, [r7, #4]
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	e003      	b.n	8004808 <_ZN12ServoChannel7distPosEtt+0x2a>
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	88bb      	ldrh	r3, [r7, #4]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	b29b      	uxth	r3, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <_ZN14AbstractModuleC1Ev>:
#ifndef ABSTRACTMODULE_H
#define ABSTRACTMODULE_H

class AbstractModule
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <_ZN14AbstractModuleC1Ev+0x1c>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	0800b9f4 	.word	0x0800b9f4

08004834 <_ZN12W25Qxx_FlashC1Ev>:
#include <STRHAL.h>
#include <channels/generic_channel_def.h>

#include <cstring>

W25Qxx_Flash::W25Qxx_Flash() :
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
		state(FlashState::IDLE), pageCount(0), sectorCount(0), can(Can::instance())
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ffe8 	bl	8004814 <_ZN14AbstractModuleC1Ev>
 8004844:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <_ZN12W25Qxx_FlashC1Ev+0x7c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	711a      	strb	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	60da      	str	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8004896:	2000      	movs	r0, #0
 8004898:	f7fb fce6 	bl	8000268 <_ZN3Can8instanceEm>
 800489c:	4602      	mov	r2, r0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
{
}
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	0800ba08 	.word	0x0800ba08

080048b4 <_ZN12W25Qxx_Flash8instanceEv>:

W25Qxx_Flash& W25Qxx_Flash::instance()
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	static W25Qxx_Flash instance;
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f3bf 8f5b 	dmb	ish
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d010      	beq.n	80048f6 <_ZN12W25Qxx_Flash8instanceEv+0x42>
 80048d4:	4809      	ldr	r0, [pc, #36]	; (80048fc <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 80048d6:	f006 fd27 	bl	800b328 <__cxa_guard_acquire>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <_ZN12W25Qxx_Flash8instanceEv+0x42>
 80048ea:	4805      	ldr	r0, [pc, #20]	; (8004900 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
 80048ec:	f7ff ffa2 	bl	8004834 <_ZN12W25Qxx_FlashC1Ev>
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 80048f2:	f006 fd25 	bl	800b340 <__cxa_guard_release>

	return instance;
 80048f6:	4b02      	ldr	r3, [pc, #8]	; (8004900 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000820 	.word	0x20000820
 8004900:	200005e8 	.word	0x200005e8

08004904 <_ZN12W25Qxx_Flash4initEv>:

int W25Qxx_Flash::init()
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	memset(loggingBuffer, 0, 256);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f006 fd71 	bl	800b400 <memset>

	STRHAL_QSPI_Config_t qspi_conf;
	qspi_conf.clk_level = 0x0;
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	f36f 0300 	bfc	r3, #0, #1
 8004924:	73bb      	strb	r3, [r7, #14]
	qspi_conf.flash_size = SIZE_2N;
 8004926:	7b7b      	ldrb	r3, [r7, #13]
 8004928:	f043 031f 	orr.w	r3, r3, #31
 800492c:	737b      	strb	r3, [r7, #13]
	qspi_conf.ncs_high_time = 0x7;
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004934:	737b      	strb	r3, [r7, #13]
	qspi_conf.psc = 19;
 8004936:	7b3b      	ldrb	r3, [r7, #12]
 8004938:	2213      	movs	r2, #19
 800493a:	f362 0304 	bfi	r3, r2, #0, #5
 800493e:	733b      	strb	r3, [r7, #12]

	if (STRHAL_QSPI_Flash_Init(&qspi_conf) < 0)
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	4618      	mov	r0, r3
 8004946:	f004 fcd7 	bl	80092f8 <STRHAL_QSPI_Flash_Init>
 800494a:	4603      	mov	r3, r0
 800494c:	0fdb      	lsrs	r3, r3, #31
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <_ZN12W25Qxx_Flash4initEv+0x56>
		return -1;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004958:	e029      	b.n	80049ae <_ZN12W25Qxx_Flash4initEv+0xaa>

	STRHAL_QSPI_Run();
 800495a:	f004 fd3f 	bl	80093dc <STRHAL_QSPI_Run>

	if (!enter4ByteAddrMode())
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fad8 	bl	8004f14 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>
 8004964:	4603      	mov	r3, r0
 8004966:	f083 0301 	eor.w	r3, r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <_ZN12W25Qxx_Flash4initEv+0x72>
	{
		return -1;
 8004970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004974:	e01b      	b.n	80049ae <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!writeEnable())
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa5f 	bl	8004e3a <_ZN12W25Qxx_Flash11writeEnableEv>
 800497c:	4603      	mov	r3, r0
 800497e:	f083 0301 	eor.w	r3, r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <_ZN12W25Qxx_Flash4initEv+0x8a>
	{
		return -1;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800498c:	e00f      	b.n	80049ae <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!disableWPS())
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa7f 	bl	8004e92 <_ZN12W25Qxx_Flash10disableWPSEv>
 8004994:	4603      	mov	r3, r0
 8004996:	f083 0301 	eor.w	r3, r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <_ZN12W25Qxx_Flash4initEv+0xa2>
	{
		return -1;
 80049a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049a4:	e003      	b.n	80049ae <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	LL_mDelay(10);
 80049a6:	200a      	movs	r0, #10
 80049a8:	f002 faa2 	bl	8006ef0 <LL_mDelay>

	return 0;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <_ZN12W25Qxx_Flash4execEv>:

int W25Qxx_Flash::exec()
{
 80049b6:	b5b0      	push	{r4, r5, r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 80049be:	f004 ffbb 	bl	8009938 <STRHAL_Systick_GetTick>
 80049c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80049cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049d0:	1a84      	subs	r4, r0, r2
 80049d2:	eb61 0503 	sbc.w	r5, r1, r3
 80049d6:	2c0a      	cmp	r4, #10
 80049d8:	f175 0300 	sbcs.w	r3, r5, #0
 80049dc:	d201      	bcs.n	80049e2 <_ZN12W25Qxx_Flash4execEv+0x2c>
		return 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	e039      	b.n	8004a56 <_ZN12W25Qxx_Flash4execEv+0xa0>

	timeLastSample = time;
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e8:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

	// Current State Logic - executes state logic, also returns new state if transition conditions are met
	internalNextState = currentStateLogic(time);
 80049ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f849 	bl	8004a88 <_ZN12W25Qxx_Flash17currentStateLogicEy>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	FlashState nextState = state;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	617b      	str	r3, [r7, #20]

	if (externalNextState != state)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d004      	beq.n	8004a1c <_ZN12W25Qxx_Flash4execEv+0x66>
	{ // Prioritize external event - there has to be some kind of priority, because internal could be different to external -> external means CAN -> either Sequence or Abort
		nextState = externalNextState;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e010      	b.n	8004a3e <_ZN12W25Qxx_Flash4execEv+0x88>
	}
	else if (internalNextState != state)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d009      	beq.n	8004a3e <_ZN12W25Qxx_Flash4execEv+0x88>
	{
		externalNextState = internalNextState; // Incase an internal state change happens, the external state, which is from some previous change would block it, so it is updated here
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		nextState = internalNextState;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004a3c:	617b      	str	r3, [r7, #20]
	}

	// Next State Logic
	if (nextState != state)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d005      	beq.n	8004a54 <_ZN12W25Qxx_Flash4execEv+0x9e>
	{
		nextStateLogic(nextState, time);
 8004a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a4c:	6979      	ldr	r1, [r7, #20]
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f86c 	bl	8004b2c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>
	}

	return 0;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bdb0      	pop	{r4, r5, r7, pc}

08004a5e <_ZN12W25Qxx_Flash5resetEv>:

int W25Qxx_Flash::reset()
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
	state = FlashState::IDLE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
	pageCount = 0;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60da      	str	r2, [r3, #12]
	sectorCount = 0;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
	return 0;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <_ZN12W25Qxx_Flash17currentStateLogicEy>:

FlashState W25Qxx_Flash::currentStateLogic(uint64_t time)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	e9c7 2300 	strd	r2, r3, [r7]
	switch (state)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d839      	bhi.n	8004b10 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x88>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x1c>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004b11 	.word	0x08004b11
 8004aa8:	08004ab9 	.word	0x08004ab9
 8004aac:	08004b11 	.word	0x08004b11
 8004ab0:	08004adf 	.word	0x08004adf
 8004ab4:	08004b11 	.word	0x08004b11
		case FlashState::IDLE:
			break;
		case FlashState::CLEARING:
		{
			uint8_t sreg1;
			if (!readSREG1(sreg1))
 8004ab8:	f107 0317 	add.w	r3, r7, #23
 8004abc:	4619      	mov	r1, r3
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f996 	bl	8004df0 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f083 0301 	eor.w	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d121      	bne.n	8004b14 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x8c>
				break;
			if (!(sreg1 & 0x01))
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11e      	bne.n	8004b18 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x90>
				return FlashState::READY;
 8004ada:	2302      	movs	r3, #2
 8004adc:	e021      	b.n	8004b22 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x9a>
			break;
		}
		case FlashState::READY:
			break;
		case FlashState::LOGGING:
			if (loggingIndex + 64 >= 256)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8004ae4:	2bbf      	cmp	r3, #191	; 0xbf
 8004ae6:	d919      	bls.n	8004b1c <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
			{
				lock = true;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	711a      	strb	r2, [r3, #4]
				writeNextPage(loggingBuffer, 256);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004af8:	4619      	mov	r1, r3
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fa30 	bl	8004f60 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>
				loggingIndex = 0;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
				lock = false;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	711a      	strb	r2, [r3, #4]
			}
			break;
 8004b0e:	e005      	b.n	8004b1c <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
		case FlashState::FULL:
			break;
		default:
			break;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
				break;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 8004b1c:	bf00      	nop
	}
	return state;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop

08004b2c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>:

void W25Qxx_Flash::nextStateLogic(FlashState nextState, uint64_t time)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	e9c7 2300 	strd	r2, r3, [r7]
	timeLastTransition = time;
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b40:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
	switch (nextState)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d86f      	bhi.n	8004c2a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0xfe>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x24>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b65 	.word	0x08004b65
 8004b54:	08004b7b 	.word	0x08004b7b
 8004b58:	08004bc7 	.word	0x08004bc7
 8004b5c:	08004c01 	.word	0x08004c01
 8004b60:	08004c17 	.word	0x08004c17
	{
		case FlashState::IDLE:
			if (state != FlashState::LOGGING)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d167      	bne.n	8004c3c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x110>
			{
				return;
			}
			pageCount = 0;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	60da      	str	r2, [r3, #12]
			sectorCount = 0;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	611a      	str	r2, [r3, #16]
			break;
 8004b78:	e05c      	b.n	8004c34 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::CLEARING:
			if (state != FlashState::IDLE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d15e      	bne.n	8004c40 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x114>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "CLEARING!\n", 10, 100);
 8004b82:	2364      	movs	r3, #100	; 0x64
 8004b84:	220a      	movs	r2, #10
 8004b86:	4936      	ldr	r1, [pc, #216]	; (8004c60 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x134>)
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f006 f943 	bl	800ae14 <STRHAL_UART_Write_Blocking>
			if (!sendClearInitiated())
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f887 	bl	8004ca2 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f083 0301 	eor.w	r3, r3, #1
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d151      	bne.n	8004c44 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x118>
				return;
			if (!readConfig())
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fb57 	bl	8005254 <_ZN12W25Qxx_Flash10readConfigEv>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f083 0301 	eor.w	r3, r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d14a      	bne.n	8004c48 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x11c>
				return;

			if (!chipErase())
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fc00 	bl	80053b8 <_ZN12W25Qxx_Flash9chipEraseEv>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f083 0301 	eor.w	r3, r3, #1
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d034      	beq.n	8004c2e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x102>
				return;
 8004bc4:	e049      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
			break;
		case FlashState::READY:
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "READY!\n", 7, 100);
 8004bc6:	2364      	movs	r3, #100	; 0x64
 8004bc8:	2207      	movs	r2, #7
 8004bca:	4926      	ldr	r1, [pc, #152]	; (8004c64 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x138>)
 8004bcc:	2001      	movs	r0, #1
 8004bce:	f006 f921 	bl	800ae14 <STRHAL_UART_Write_Blocking>
			if (state != FlashState::CLEARING)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d138      	bne.n	8004c4c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x120>
			{
				return;
			}
			if (!writeTempConfig())
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa90 	bl	8005100 <_ZN12W25Qxx_Flash15writeTempConfigEv>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f083 0301 	eor.w	r3, r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d131      	bne.n	8004c50 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x124>
				return;
			if (!sendClearDone())
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f880 	bl	8004cf2 <_ZN12W25Qxx_Flash13sendClearDoneEv>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f083 0301 	eor.w	r3, r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d019      	beq.n	8004c32 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x106>
				return;
 8004bfe:	e02c      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>

			break;
		case FlashState::LOGGING:
			if (state != FlashState::READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d125      	bne.n	8004c54 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x128>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "LOGGING!\n", 9, 100);
 8004c08:	2364      	movs	r3, #100	; 0x64
 8004c0a:	2209      	movs	r2, #9
 8004c0c:	4916      	ldr	r1, [pc, #88]	; (8004c68 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x13c>)
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f006 f900 	bl	800ae14 <STRHAL_UART_Write_Blocking>
			break;
 8004c14:	e00e      	b.n	8004c34 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::FULL:
			if (!sendFull())
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f893 	bl	8004d42 <_ZN12W25Qxx_Flash8sendFullEv>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f083 0301 	eor.w	r3, r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d117      	bne.n	8004c58 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12c>
				return;
			break;
 8004c28:	e004      	b.n	8004c34 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		default:
			break;
 8004c2a:	bf00      	nop
 8004c2c:	e002      	b.n	8004c34 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 8004c32:	bf00      	nop
	}
	state = nextState;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	609a      	str	r2, [r3, #8]
	return;
 8004c3a:	e00e      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c3c:	bf00      	nop
 8004c3e:	e00c      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c40:	bf00      	nop
 8004c42:	e00a      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c44:	bf00      	nop
 8004c46:	e008      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c48:	bf00      	nop
 8004c4a:	e006      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c4c:	bf00      	nop
 8004c4e:	e004      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8004c58:	bf00      	nop
}
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	0800b7a4 	.word	0x0800b7a4
 8004c64:	0800b7b0 	.word	0x0800b7b0
 8004c68:	0800b7b8 	.word	0x0800b7b8

08004c6c <_ZN12W25Qxx_Flash8setStateE10FlashState>:

void W25Qxx_Flash::setState(FlashState nextState)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	externalNextState = nextState;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <_ZN12W25Qxx_Flash8getStateEv>:

FlashState W25Qxx_Flash::getState()
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
	return state;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>:

bool W25Qxx_Flash::sendClearInitiated()
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b094      	sub	sp, #80	; 0x50
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 8004caa:	f107 030c 	add.w	r3, r7, #12
 8004cae:	2242      	movs	r2, #66	; 0x42
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f006 fba4 	bl	800b400 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 8004cb8:	2313      	movs	r3, #19
 8004cba:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8004cbc:	7b3b      	ldrb	r3, [r7, #12]
 8004cbe:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004cc2:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8004cc4:	7b3b      	ldrb	r3, [r7, #12]
 8004cc6:	f36f 1387 	bfc	r3, #6, #2
 8004cca:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = INITIATED;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f7fb fcbb 	bl	8000654 <_ZN3Can4sendEmPhh>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3750      	adds	r7, #80	; 0x50
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <_ZN12W25Qxx_Flash13sendClearDoneEv>:

bool W25Qxx_Flash::sendClearDone()
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b094      	sub	sp, #80	; 0x50
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	2242      	movs	r2, #66	; 0x42
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f006 fb7c 	bl	800b400 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 8004d08:	2313      	movs	r3, #19
 8004d0a:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8004d0c:	7b3b      	ldrb	r3, [r7, #12]
 8004d0e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004d12:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8004d14:	7b3b      	ldrb	r3, [r7, #12]
 8004d16:	f36f 1387 	bfc	r3, #6, #2
 8004d1a:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = COMPLETED;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	2205      	movs	r2, #5
 8004d26:	4619      	mov	r1, r3
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7fb fc93 	bl	8000654 <_ZN3Can4sendEmPhh>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3750      	adds	r7, #80	; 0x50
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <_ZN12W25Qxx_Flash8sendFullEv>:

bool W25Qxx_Flash::sendFull()
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b094      	sub	sp, #80	; 0x50
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 8004d4a:	f107 030c 	add.w	r3, r7, #12
 8004d4e:	2242      	movs	r2, #66	; 0x42
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f006 fb54 	bl	800b400 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 8004d58:	2313      	movs	r3, #19
 8004d5a:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8004d5c:	7b3b      	ldrb	r3, [r7, #12]
 8004d5e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004d62:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8004d64:	7b3b      	ldrb	r3, [r7, #12]
 8004d66:	f36f 1387 	bfc	r3, #6, #2
 8004d6a:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = FULL;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	2205      	movs	r2, #5
 8004d76:	4619      	mov	r1, r3
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7fb fc6b 	bl	8000654 <_ZN3Can4sendEmPhh>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3750      	adds	r7, #80	; 0x50
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <_ZN12W25Qxx_Flash6addLogEPhh>:

void W25Qxx_Flash::addLog(uint8_t *data, uint8_t n)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	71fb      	strb	r3, [r7, #7]
	if (state != FlashState::LOGGING)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d11d      	bne.n	8004de4 <_ZN12W25Qxx_Flash6addLogEPhh+0x52>
		return;
	if (loggingIndex + n >= 256)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8004dae:	461a      	mov	r2, r3
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	4413      	add	r3, r2
 8004db4:	2bff      	cmp	r3, #255	; 0xff
 8004db6:	dc17      	bgt.n	8004de8 <_ZN12W25Qxx_Flash6addLogEPhh+0x56>
		return;
	memcpy(&loggingBuffer[loggingIndex], data, n);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8004dbe:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	79fa      	ldrb	r2, [r7, #7]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f006 fb0a 	bl	800b3e4 <memcpy>
	loggingIndex += n;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 2230 	ldrb.w	r2, [r3, #560]	; 0x230
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	4413      	add	r3, r2
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8004de2:	e002      	b.n	8004dea <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8004de8:	bf00      	nop
}
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <_ZNK12W25Qxx_Flash9readSREG1ERh>:

bool W25Qxx_Flash::readSREG1(uint8_t &sreg1) const
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction_size = 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	773b      	strb	r3, [r7, #28]

	cmd.instruction = 0x05;
 8004e0a:	2305      	movs	r3, #5
 8004e0c:	733b      	strb	r3, [r7, #12]
	if (STRHAL_QSPI_Indirect_Read(&cmd, &sreg1, 1, 100) != 1)
 8004e0e:	f107 000c 	add.w	r0, r7, #12
 8004e12:	2364      	movs	r3, #100	; 0x64
 8004e14:	2201      	movs	r2, #1
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	f004 fbaa 	bl	8009570 <STRHAL_QSPI_Indirect_Read>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x40>
		return false;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e000      	b.n	8004e32 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x42>

	return true;
 8004e30:	2301      	movs	r3, #1
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <_ZN12W25Qxx_Flash11writeEnableEv>:
{
	return readSREG1(sreg1) && readSREG2(sreg2) && readSREG3(sreg3);
}

bool W25Qxx_Flash::writeEnable()
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b088      	sub	sp, #32
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x06;
 8004e42:	2306      	movs	r3, #6
 8004e44:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8004e56:	2364      	movs	r3, #100	; 0x64
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fae9 	bl	8005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8004e62:	4603      	mov	r3, r0
 8004e64:	0fdb      	lsrs	r3, r3, #31
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <_ZN12W25Qxx_Flash11writeEnableEv+0x36>
		return false;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e00c      	b.n	8004e8a <_ZN12W25Qxx_Flash11writeEnableEv+0x50>

	return STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) == 0;
 8004e70:	f107 000c 	add.w	r0, r7, #12
 8004e74:	2364      	movs	r3, #100	; 0x64
 8004e76:	2200      	movs	r2, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f004 fabf 	bl	80093fc <STRHAL_QSPI_Indirect_Write>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_ZN12W25Qxx_Flash10disableWPSEv>:

	return true;
}

bool W25Qxx_Flash::disableWPS()
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b088      	sub	sp, #32
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x11;
 8004e9a:	2311      	movs	r3, #17
 8004e9c:	733b      	strb	r3, [r7, #12]
	//cmd.instruction = 0x98;
	cmd.instruction_size = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	737b      	strb	r3, [r7, #13]
	cmd.addr = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
	cmd.addr_size = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	773b      	strb	r3, [r7, #28]

	uint8_t value = 0xFB;
 8004eb2:	23fb      	movs	r3, #251	; 0xfb
 8004eb4:	72fb      	strb	r3, [r7, #11]

	if (waitForSREGFlag(0x01, false, 10) < 0)
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2101      	movs	r1, #1
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fab9 	bl	8005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	0fdb      	lsrs	r3, r3, #31
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <_ZN12W25Qxx_Flash10disableWPSEv+0x3e>
		return false;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e01d      	b.n	8004f0c <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (!writeEnable())
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ffb2 	bl	8004e3a <_ZN12W25Qxx_Flash11writeEnableEv>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f083 0301 	eor.w	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <_ZN12W25Qxx_Flash10disableWPSEv+0x54>
		return false;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e012      	b.n	8004f0c <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (STRHAL_QSPI_Indirect_Write(&cmd, &value, 1, 100) != 1)
 8004ee6:	f107 010b 	add.w	r1, r7, #11
 8004eea:	f107 000c 	add.w	r0, r7, #12
 8004eee:	2364      	movs	r3, #100	; 0x64
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f004 fa83 	bl	80093fc <STRHAL_QSPI_Indirect_Write>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	bf14      	ite	ne
 8004efc:	2301      	movne	r3, #1
 8004efe:	2300      	moveq	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <_ZN12W25Qxx_Flash10disableWPSEv+0x78>
		return false;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	return true;
 8004f0a:	2301      	movs	r3, #1
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>:

bool W25Qxx_Flash::enter4ByteAddrMode()
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xB7;
 8004f1c:	23b7      	movs	r3, #183	; 0xb7
 8004f1e:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8004f20:	2301      	movs	r3, #1
 8004f22:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0x000000;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	773b      	strb	r3, [r7, #28]

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8004f34:	f107 000c 	add.w	r0, r7, #12
 8004f38:	2364      	movs	r3, #100	; 0x64
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f004 fa5d 	bl	80093fc <STRHAL_QSPI_Indirect_Write>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x42>
		return false;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x44>

	return true;
 8004f56:	2301      	movs	r3, #1
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>:

	return true;
}

uint32_t W25Qxx_Flash::writeNextPage(const uint8_t *data, uint32_t n)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
	if (sectorCount == 8192 - 1)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x1c>
	{
		return 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e020      	b.n	8004fbe <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5e>
	 return 0;
	 if(!sectorErase(sectorCount))
	 return 0;
	 }*/

	uint32_t numWritten = write((pageCount << 8) | (sectorCount << 12), data, n);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	031b      	lsls	r3, r3, #12
 8004f88:	ea42 0103 	orr.w	r1, r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f818 	bl	8004fc6 <_ZN12W25Qxx_Flash5writeEmPKhm>
 8004f96:	6178      	str	r0, [r7, #20]
	(void) numWritten;
	/*if(numWritten == n)
	 return 0;*/

	if (pageCount == 15)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d108      	bne.n	8004fb2 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x52>
	{
		pageCount = 0;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	60da      	str	r2, [r3, #12]
		sectorCount++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	611a      	str	r2, [r3, #16]
 8004fb0:	e004      	b.n	8004fbc <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5c>
	}
	else
	{
		pageCount++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	60da      	str	r2, [r3, #12]
	}

	return n;
 8004fbc:	687b      	ldr	r3, [r7, #4]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_ZN12W25Qxx_Flash5writeEmPKhm>:

uint32_t W25Qxx_Flash::write(uint32_t address, const uint8_t *data, uint32_t n)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b08a      	sub	sp, #40	; 0x28
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x12;
 8004fd4:	2312      	movs	r3, #18
 8004fd6:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8004fee:	2364      	movs	r3, #100	; 0x64
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fa1d 	bl	8005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	0fdb      	lsrs	r3, r3, #31
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <_ZN12W25Qxx_Flash5writeEmPKhm+0x42>
		return 0;
 8005004:	2300      	movs	r3, #0
 8005006:	e024      	b.n	8005052 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (!writeEnable())
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff ff16 	bl	8004e3a <_ZN12W25Qxx_Flash11writeEnableEv>
 800500e:	4603      	mov	r3, r0
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <_ZN12W25Qxx_Flash5writeEmPKhm+0x58>
		return 0;
 800501a:	2300      	movs	r3, #0
 800501c:	e019      	b.n	8005052 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (n > PAGE_SIZE)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005024:	d902      	bls.n	800502c <_ZN12W25Qxx_Flash5writeEmPKhm+0x66>
		n = PAGE_SIZE;
 8005026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800502a:	603b      	str	r3, [r7, #0]

	if (STRHAL_QSPI_Indirect_Write(&cmd, data, n, 100) != n)
 800502c:	f107 0014 	add.w	r0, r7, #20
 8005030:	2364      	movs	r3, #100	; 0x64
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	f004 f9e1 	bl	80093fc <STRHAL_QSPI_Indirect_Write>
 800503a:	4602      	mov	r2, r0
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4293      	cmp	r3, r2
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8a>
		return 0;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	return n;
 8005050:	683b      	ldr	r3, [r7, #0]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3728      	adds	r7, #40	; 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <_ZN12W25Qxx_Flash4readEmPhm>:

uint32_t W25Qxx_Flash::read(uint32_t address, uint8_t *data, uint32_t n)
{
 800505c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005060:	b08a      	sub	sp, #40	; 0x28
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x13;
 800506c:	2313      	movs	r3, #19
 800506e:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 8005070:	2301      	movs	r3, #1
 8005072:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8005078:	2304      	movs	r3, #4
 800507a:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if ((uint64_t) address + n > (uint64_t) (1 << SIZE_2N))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2200      	movs	r2, #0
 800508a:	469a      	mov	sl, r3
 800508c:	4693      	mov	fp, r2
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2200      	movs	r2, #0
 8005092:	4698      	mov	r8, r3
 8005094:	4691      	mov	r9, r2
 8005096:	eb1a 0408 	adds.w	r4, sl, r8
 800509a:	eb4b 0509 	adc.w	r5, fp, r9
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <_ZN12W25Qxx_Flash4readEmPhm+0xa0>)
 80050a0:	429c      	cmp	r4, r3
 80050a2:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 80050a6:	d302      	bcc.n	80050ae <_ZN12W25Qxx_Flash4readEmPhm+0x52>
		n = 0xFFFFFFFF - address;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	603b      	str	r3, [r7, #0]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 80050ae:	2364      	movs	r3, #100	; 0x64
 80050b0:	2200      	movs	r2, #0
 80050b2:	2101      	movs	r1, #1
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f9bd 	bl	8005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80050ba:	4603      	mov	r3, r0
 80050bc:	0fdb      	lsrs	r3, r3, #31
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <_ZN12W25Qxx_Flash4readEmPhm+0x6c>
		return 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e013      	b.n	80050f0 <_ZN12W25Qxx_Flash4readEmPhm+0x94>

	if (STRHAL_QSPI_Indirect_Read(&cmd, data, n, 1000) != n)
 80050c8:	f107 0014 	add.w	r0, r7, #20
 80050cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	f004 fa4c 	bl	8009570 <STRHAL_QSPI_Indirect_Read>
 80050d8:	4602      	mov	r2, r0
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	4293      	cmp	r3, r2
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <_ZN12W25Qxx_Flash4readEmPhm+0x92>
		return 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <_ZN12W25Qxx_Flash4readEmPhm+0x94>

	return n;
 80050ee:	683b      	ldr	r3, [r7, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050fa:	bf00      	nop
 80050fc:	80000001 	.word	0x80000001

08005100 <_ZN12W25Qxx_Flash15writeTempConfigEv>:

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
}

bool W25Qxx_Flash::writeTempConfig()
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f103 0214 	add.w	r2, r3, #20
 800510e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005112:	2100      	movs	r1, #0
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff56 	bl	8004fc6 <_ZN12W25Qxx_Flash5writeEmPKhm>
 800511a:	4603      	mov	r3, r0
 800511c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	b2db      	uxtb	r3, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>:
{
	return writeConfigRegs(&reg, &val, 1);
}

bool W25Qxx_Flash::writeConfigRegs(Config *reg, uint32_t *val, uint16_t n)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	807b      	strh	r3, [r7, #2]
	if (!readConfig())
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f888 	bl	8005254 <_ZN12W25Qxx_Flash10readConfigEv>
 8005144:	4603      	mov	r3, r0
 8005146:	f083 0301 	eor.w	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x24>
		return false;
 8005150:	2300      	movs	r3, #0
 8005152:	e033      	b.n	80051bc <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x8c>

	for (int i = 0; i < n; i++)
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	da12      	bge.n	8005186 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x56>
	{
		config.reg[static_cast<int>(reg[i])] = val[i];
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	441a      	add	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	440b      	add	r3, r1
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	68f9      	ldr	r1, [r7, #12]
 8005176:	3304      	adds	r3, #4
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < n; i++)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	3301      	adds	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	e7e8      	b.n	8005158 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x28>
	}

	if (!configErase())
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f88d 	bl	80052a6 <_ZN12W25Qxx_Flash11configEraseEv>
 800518c:	4603      	mov	r3, r0
 800518e:	f083 0301 	eor.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x6c>
	{
		return false;
 8005198:	2300      	movs	r3, #0
 800519a:	e00f      	b.n	80051bc <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x8c>
	}

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f103 0214 	add.w	r2, r3, #20
 80051a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051a6:	2100      	movs	r1, #0
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff ff0c 	bl	8004fc6 <_ZN12W25Qxx_Flash5writeEmPKhm>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3

}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>:

bool W25Qxx_Flash::writeConfigRegsFromAddr(uint32_t startAddress, uint32_t *val, uint16_t n)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	807b      	strh	r3, [r7, #2]
	if (!readConfig())
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f83e 	bl	8005254 <_ZN12W25Qxx_Flash10readConfigEv>
 80051d8:	4603      	mov	r3, r0
 80051da:	f083 0301 	eor.w	r3, r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x24>
		return false;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e031      	b.n	800524c <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x88>

	for (int i = 0; i < n; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	887b      	ldrh	r3, [r7, #2]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	da10      	bge.n	8005216 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x52>
	{
		config.reg[startAddress + i] = val[i];  //TODO maybe a bug
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	441a      	add	r2, r3
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	440b      	add	r3, r1
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	68f9      	ldr	r1, [r7, #12]
 8005206:	3304      	adds	r3, #4
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < n; i++)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e7ea      	b.n	80051ec <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x28>
	}

	if (!configErase())
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f845 	bl	80052a6 <_ZN12W25Qxx_Flash11configEraseEv>
 800521c:	4603      	mov	r3, r0
 800521e:	f083 0301 	eor.w	r3, r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x68>
	{
		return false;
 8005228:	2300      	movs	r3, #0
 800522a:	e00f      	b.n	800524c <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x88>
	}

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f103 0214 	add.w	r2, r3, #20
 8005232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005236:	2100      	movs	r1, #0
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7ff fec4 	bl	8004fc6 <_ZN12W25Qxx_Flash5writeEmPKhm>
 800523e:	4603      	mov	r3, r0
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_ZN12W25Qxx_Flash10readConfigEv>:

bool W25Qxx_Flash::readConfig()
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	return read(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f103 0214 	add.w	r2, r3, #20
 8005262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005266:	2100      	movs	r1, #0
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fef7 	bl	800505c <_ZN12W25Qxx_Flash4readEmPhm>
 800526e:	4603      	mov	r3, r0
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <_ZN12W25Qxx_Flash13readConfigRegEm>:
	return config.reg[static_cast<int>(reg)];
}

// Update Config by calling readConfig() prior to this!
uint32_t W25Qxx_Flash::readConfigReg(uint32_t regAddr)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	return config.reg[regAddr];
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	3304      	adds	r3, #4
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	685b      	ldr	r3, [r3, #4]
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <_ZN12W25Qxx_Flash11configEraseEv>:

// Erase config, i.e. sets all config registers to 0xFFFF
bool W25Qxx_Flash::configErase()
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
	return sectorErase(CONFIG_BASE >> 12);
 80052ae:	2100      	movs	r1, #0
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f834 	bl	800531e <_ZN12W25Qxx_Flash11sectorEraseEm>
 80052b6:	4603      	mov	r3, r0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <_ZN12W25Qxx_Flash11configResetEv>:

// Resets config, i.e. sets all config registers to 0x0000
bool W25Qxx_Flash::configReset()
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b3f      	cmp	r3, #63	; 0x3f
 80052d0:	dc0a      	bgt.n	80052e8 <_ZN12W25Qxx_Flash11configResetEv+0x28>
	{
		config.reg[i] = 0;
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3304      	adds	r3, #4
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	2200      	movs	r2, #0
 80052de:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e7f1      	b.n	80052cc <_ZN12W25Qxx_Flash11configResetEv+0xc>
	}
	return sectorErase(CONFIG_BASE >> 12) && write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 80052e8:	2100      	movs	r1, #0
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f817 	bl	800531e <_ZN12W25Qxx_Flash11sectorEraseEm>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f103 0214 	add.w	r2, r3, #20
 80052fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005300:	2100      	movs	r1, #0
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff fe5f 	bl	8004fc6 <_ZN12W25Qxx_Flash5writeEmPKhm>
 8005308:	4603      	mov	r3, r0
 800530a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530e:	d101      	bne.n	8005314 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <_ZN12W25Qxx_Flash11configResetEv+0x56>
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ZN12W25Qxx_Flash11sectorEraseEm>:

bool W25Qxx_Flash::sectorErase(uint32_t sector)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x21;
 8005328:	2321      	movs	r3, #33	; 0x21
 800532a:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 800532c:	2301      	movs	r3, #1
 800532e:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 4;
 8005330:	2304      	movs	r3, #4
 8005332:	753b      	strb	r3, [r7, #20]
	cmd.addr = sector << 12;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	031b      	lsls	r3, r3, #12
 8005338:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8005342:	2364      	movs	r3, #100	; 0x64
 8005344:	2200      	movs	r2, #0
 8005346:	2101      	movs	r1, #1
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f873 	bl	8005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800534e:	4603      	mov	r3, r0
 8005350:	0fdb      	lsrs	r3, r3, #31
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <_ZN12W25Qxx_Flash11sectorEraseEm+0x3e>
		return false;
 8005358:	2300      	movs	r3, #0
 800535a:	e029      	b.n	80053b0 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (!writeEnable())
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fd6c 	bl	8004e3a <_ZN12W25Qxx_Flash11writeEnableEv>
 8005362:	4603      	mov	r3, r0
 8005364:	f083 0301 	eor.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <_ZN12W25Qxx_Flash11sectorEraseEm+0x54>
		return false;
 800536e:	2300      	movs	r3, #0
 8005370:	e01e      	b.n	80053b0 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8005372:	f107 000c 	add.w	r0, r7, #12
 8005376:	2364      	movs	r3, #100	; 0x64
 8005378:	2200      	movs	r2, #0
 800537a:	2100      	movs	r1, #0
 800537c:	f004 f83e 	bl	80093fc <STRHAL_QSPI_Indirect_Write>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <_ZN12W25Qxx_Flash11sectorEraseEm+0x76>
		return false;
 8005390:	2300      	movs	r3, #0
 8005392:	e00d      	b.n	80053b0 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8005394:	2364      	movs	r3, #100	; 0x64
 8005396:	2200      	movs	r2, #0
 8005398:	2101      	movs	r1, #1
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f84a 	bl	8005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80053a0:	4603      	mov	r3, r0
 80053a2:	0fdb      	lsrs	r3, r3, #31
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <_ZN12W25Qxx_Flash11sectorEraseEm+0x90>
		return false;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	return true;
 80053ae:	2301      	movs	r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_ZN12W25Qxx_Flash9chipEraseEv>:

bool W25Qxx_Flash::chipErase()
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xC7;
 80053c0:	23c7      	movs	r3, #199	; 0xc7
 80053c2:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 80053c4:	2301      	movs	r3, #1
 80053c6:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 80053d8:	2364      	movs	r3, #100	; 0x64
 80053da:	2200      	movs	r2, #0
 80053dc:	2101      	movs	r1, #1
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f828 	bl	8005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80053e4:	4603      	mov	r3, r0
 80053e6:	0fdb      	lsrs	r3, r3, #31
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <_ZN12W25Qxx_Flash9chipEraseEv+0x3a>
		return false;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e01c      	b.n	800542c <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (!writeEnable())
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fd21 	bl	8004e3a <_ZN12W25Qxx_Flash11writeEnableEv>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f083 0301 	eor.w	r3, r3, #1
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <_ZN12W25Qxx_Flash9chipEraseEv+0x50>
		return false;
 8005404:	2300      	movs	r3, #0
 8005406:	e011      	b.n	800542c <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8005408:	f107 000c 	add.w	r0, r7, #12
 800540c:	2364      	movs	r3, #100	; 0x64
 800540e:	2200      	movs	r2, #0
 8005410:	2100      	movs	r1, #0
 8005412:	f003 fff3 	bl	80093fc <STRHAL_QSPI_Indirect_Write>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <_ZN12W25Qxx_Flash9chipEraseEv+0x72>
		return false;
 8005426:	2300      	movs	r3, #0
 8005428:	e000      	b.n	800542c <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	//if(waitForSREGFlag(0x01, false, 100) < 0)
	//return false;

	return true;
 800542a:	2301      	movs	r3, #1
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>:

int W25Qxx_Flash::waitForSREGFlag(uint8_t flag, bool state, uint16_t tot)
{
 8005434:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	4608      	mov	r0, r1
 8005440:	4611      	mov	r1, r2
 8005442:	461a      	mov	r2, r3
 8005444:	4603      	mov	r3, r0
 8005446:	70fb      	strb	r3, [r7, #3]
 8005448:	460b      	mov	r3, r1
 800544a:	70bb      	strb	r3, [r7, #2]
 800544c:	4613      	mov	r3, r2
 800544e:	803b      	strh	r3, [r7, #0]
	uint64_t start = STRHAL_Systick_GetTick();
 8005450:	f004 fa72 	bl	8009938 <STRHAL_Systick_GetTick>
 8005454:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint8_t sreg1;

	if (state)
 8005458:	78bb      	ldrb	r3, [r7, #2]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d02a      	beq.n	80054b4 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x80>
	{
		do
		{
			if (!readSREG1(sreg1))
 800545e:	f107 030f 	add.w	r3, r7, #15
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fcc3 	bl	8004df0 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 800546a:	4603      	mov	r3, r0
 800546c:	f083 0301 	eor.w	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x48>
				return -1;
 8005476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800547a:	e045      	b.n	8005508 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>

			if (STRHAL_Systick_GetTick() - start > 100)
 800547c:	f004 fa5c 	bl	8009938 <STRHAL_Systick_GetTick>
 8005480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005484:	ebb0 0802 	subs.w	r8, r0, r2
 8005488:	eb61 0903 	sbc.w	r9, r1, r3
 800548c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005490:	f179 0300 	sbcs.w	r3, r9, #0
 8005494:	bf2c      	ite	cs
 8005496:	2301      	movcs	r3, #1
 8005498:	2300      	movcc	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x72>
				return -1;
 80054a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a4:	e030      	b.n	8005508 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		} while (!(sreg1 & flag));
 80054a6:	7bfa      	ldrb	r2, [r7, #15]
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	4013      	ands	r3, r2
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d129      	bne.n	8005506 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd2>
		do
 80054b2:	e7d4      	b.n	800545e <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x2a>
	}
	else
	{
		do
		{
			if (!readSREG1(sreg1))
 80054b4:	f107 030f 	add.w	r3, r7, #15
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fc98 	bl	8004df0 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f083 0301 	eor.w	r3, r3, #1
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x9e>
				return -1;
 80054cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d0:	e01a      	b.n	8005508 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>

			if (STRHAL_Systick_GetTick() - start > 100)
 80054d2:	f004 fa31 	bl	8009938 <STRHAL_Systick_GetTick>
 80054d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054da:	1a84      	subs	r4, r0, r2
 80054dc:	eb61 0503 	sbc.w	r5, r1, r3
 80054e0:	2c65      	cmp	r4, #101	; 0x65
 80054e2:	f175 0300 	sbcs.w	r3, r5, #0
 80054e6:	bf2c      	ite	cs
 80054e8:	2301      	movcs	r3, #1
 80054ea:	2300      	movcc	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xc4>
				return -1;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f6:	e007      	b.n	8005508 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		} while (sreg1 & flag);
 80054f8:	7bfa      	ldrb	r2, [r7, #15]
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	4013      	ands	r3, r2
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d000      	beq.n	8005506 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd2>
		do
 8005504:	e7d6      	b.n	80054b4 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x80>
	}

	return 0;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08005514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005514:	480d      	ldr	r0, [pc, #52]	; (800554c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005516:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005518:	480d      	ldr	r0, [pc, #52]	; (8005550 <LoopForever+0x6>)
  ldr r1, =_edata
 800551a:	490e      	ldr	r1, [pc, #56]	; (8005554 <LoopForever+0xa>)
  ldr r2, =_sidata
 800551c:	4a0e      	ldr	r2, [pc, #56]	; (8005558 <LoopForever+0xe>)
  movs r3, #0
 800551e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005520:	e002      	b.n	8005528 <LoopCopyDataInit>

08005522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005526:	3304      	adds	r3, #4

08005528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800552a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800552c:	d3f9      	bcc.n	8005522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800552e:	4a0b      	ldr	r2, [pc, #44]	; (800555c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005530:	4c0b      	ldr	r4, [pc, #44]	; (8005560 <LoopForever+0x16>)
  movs r3, #0
 8005532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005534:	e001      	b.n	800553a <LoopFillZerobss>

08005536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005538:	3204      	adds	r2, #4

0800553a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800553a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800553c:	d3fb      	bcc.n	8005536 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800553e:	f7fc fa09 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005542:	f005 ff23 	bl	800b38c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005546:	f7fc f967 	bl	8001818 <main>

0800554a <LoopForever>:

LoopForever:
    b LoopForever
 800554a:	e7fe      	b.n	800554a <LoopForever>
  ldr   r0, =_estack
 800554c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005554:	2000054c 	.word	0x2000054c
  ldr r2, =_sidata
 8005558:	0800c828 	.word	0x0800c828
  ldr r2, =_sbss
 800555c:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 8005560:	200008d4 	.word	0x200008d4

08005564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005564:	e7fe      	b.n	8005564 <ADC1_2_IRQHandler>

08005566 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	f023 020f 	bic.w	r2, r3, #15
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <LL_ADC_IsEnabled+0x18>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <LL_ADC_IsEnabled+0x1a>
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <LL_ADC_CommonInit+0x9c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10f      	bne.n	80055ea <LL_ADC_CommonInit+0x36>
 80055ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80055ce:	f7ff ffdd 	bl	800558c <LL_ADC_IsEnabled>
 80055d2:	4604      	mov	r4, r0
 80055d4:	481f      	ldr	r0, [pc, #124]	; (8005654 <LL_ADC_CommonInit+0xa0>)
 80055d6:	f7ff ffd9 	bl	800558c <LL_ADC_IsEnabled>
 80055da:	4603      	mov	r3, r0
 80055dc:	4323      	orrs	r3, r4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf0c      	ite	eq
 80055e2:	2301      	moveq	r3, #1
 80055e4:	2300      	movne	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	e008      	b.n	80055fc <LL_ADC_CommonInit+0x48>
 80055ea:	481b      	ldr	r0, [pc, #108]	; (8005658 <LL_ADC_CommonInit+0xa4>)
 80055ec:	f7ff ffce 	bl	800558c <LL_ADC_IsEnabled>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d020      	beq.n	8005642 <LL_ADC_CommonInit+0x8e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d012      	beq.n	800562e <LL_ADC_CommonInit+0x7a>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	4b13      	ldr	r3, [pc, #76]	; (800565c <LL_ADC_CommonInit+0xa8>)
 800560e:	4013      	ands	r3, r2
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	6811      	ldr	r1, [r2, #0]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	6852      	ldr	r2, [r2, #4]
 8005618:	4311      	orrs	r1, r2
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	6892      	ldr	r2, [r2, #8]
 800561e:	4311      	orrs	r1, r2
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	68d2      	ldr	r2, [r2, #12]
 8005624:	430a      	orrs	r2, r1
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]
 800562c:	e00b      	b.n	8005646 <LL_ADC_CommonInit+0x92>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <LL_ADC_CommonInit+0xa8>)
 8005634:	4013      	ands	r3, r2
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	e001      	b.n	8005646 <LL_ADC_CommonInit+0x92>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bd90      	pop	{r4, r7, pc}
 8005650:	50000300 	.word	0x50000300
 8005654:	50000100 	.word	0x50000100
 8005658:	50000400 	.word	0x50000400
 800565c:	ffc030e0 	.word	0xffc030e0

08005660 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ff8c 	bl	800558c <LL_ADC_IsEnabled>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d111      	bne.n	800569e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005682:	f023 0318 	bic.w	r3, r3, #24
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	6811      	ldr	r1, [r2, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	6852      	ldr	r2, [r2, #4]
 800568e:	4311      	orrs	r1, r2
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	6892      	ldr	r2, [r2, #8]
 8005694:	430a      	orrs	r2, r1
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e001      	b.n	80056a2 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ff66 	bl	800558c <LL_ADC_IsEnabled>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d132      	bne.n	800572c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d015      	beq.n	80056fa <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	4b1a      	ldr	r3, [pc, #104]	; (800573c <LL_ADC_REG_Init+0x90>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	6811      	ldr	r1, [r2, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	6892      	ldr	r2, [r2, #8]
 80056de:	4311      	orrs	r1, r2
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	68d2      	ldr	r2, [r2, #12]
 80056e4:	4311      	orrs	r1, r2
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	6912      	ldr	r2, [r2, #16]
 80056ea:	4311      	orrs	r1, r2
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	6952      	ldr	r2, [r2, #20]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e011      	b.n	800571e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <LL_ADC_REG_Init+0x90>)
 8005700:	4013      	ands	r3, r2
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	6811      	ldr	r1, [r2, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	68d2      	ldr	r2, [r2, #12]
 800570a:	4311      	orrs	r1, r2
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	6912      	ldr	r2, [r2, #16]
 8005710:	4311      	orrs	r1, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	6952      	ldr	r2, [r2, #20]
 8005716:	430a      	orrs	r2, r1
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff1e 	bl	8005566 <LL_ADC_REG_SetSequencerLength>
 800572a:	e001      	b.n	8005730 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	fff0c01c 	.word	0xfff0c01c

08005740 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005750:	4a0e      	ldr	r2, [pc, #56]	; (800578c <LL_DMA_ConfigTransfer+0x4c>)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4413      	add	r3, r2
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005768:	4908      	ldr	r1, [pc, #32]	; (800578c <LL_DMA_ConfigTransfer+0x4c>)
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	440a      	add	r2, r1
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	4611      	mov	r1, r2
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	440a      	add	r2, r1
 8005776:	4611      	mov	r1, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	0800ba14 	.word	0x0800ba14

08005790 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80057a0:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <LL_DMA_SetDataLength+0x48>)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4413      	add	r3, r2
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	4908      	ldr	r1, [pc, #32]	; (80057d8 <LL_DMA_SetDataLength+0x48>)
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	440a      	add	r2, r1
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	4611      	mov	r1, r2
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	440a      	add	r2, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	0800ba14 	.word	0x0800ba14

080057dc <LL_DMA_SetMemoryAddress>:
  *         (*) Not on all G4 devices
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80057ec:	4a07      	ldr	r2, [pc, #28]	; (800580c <LL_DMA_SetMemoryAddress+0x30>)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	4413      	add	r3, r2
 80057fa:	461a      	mov	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60d3      	str	r3, [r2, #12]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	0800ba14 	.word	0x0800ba14

08005810 <LL_DMA_SetPeriphAddress>:
  *         (*) Not on all G4 devices
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8005820:	4a07      	ldr	r2, [pc, #28]	; (8005840 <LL_DMA_SetPeriphAddress+0x30>)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4413      	add	r3, r2
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4413      	add	r3, r2
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6093      	str	r3, [r2, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	0800ba14 	.word	0x0800ba14

08005844 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	0a9b      	lsrs	r3, r3, #10
 8005854:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005858:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800586c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005882:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	430a      	orrs	r2, r1
 800588a:	601a      	str	r2, [r3, #0]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80058ac:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 80058b2:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80058b8:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80058be:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80058c4:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80058ca:	4313      	orrs	r3, r2
 80058cc:	461a      	mov	r2, r3
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff ff35 	bl	8005740 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	461a      	mov	r2, r3
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff ff7c 	bl	80057dc <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff ff8f 	bl	8005810 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff ff48 	bl	8005790 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	461a      	mov	r2, r3
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff ff9b 	bl	8005844 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <LL_GPIO_SetPinMode>:
{
 8005918:	b480      	push	{r7}
 800591a:	b08b      	sub	sp, #44	; 0x2c
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800593e:	2320      	movs	r3, #32
 8005940:	e003      	b.n	800594a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	fab3 f383 	clz	r3, r3
 8005948:	b2db      	uxtb	r3, r3
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	2103      	movs	r1, #3
 800594e:	fa01 f303 	lsl.w	r3, r1, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	401a      	ands	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	fa93 f3a3 	rbit	r3, r3
 8005960:	61fb      	str	r3, [r7, #28]
  return result;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800596c:	2320      	movs	r3, #32
 800596e:	e003      	b.n	8005978 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	431a      	orrs	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	372c      	adds	r7, #44	; 0x2c
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <LL_GPIO_SetPinOutputType>:
{
 8005992:	b480      	push	{r7}
 8005994:	b085      	sub	sp, #20
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	605a      	str	r2, [r3, #4]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <LL_GPIO_SetPinSpeed>:
{
 80059c2:	b480      	push	{r7}
 80059c4:	b08b      	sub	sp, #44	; 0x2c
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	fa93 f3a3 	rbit	r3, r3
 80059dc:	613b      	str	r3, [r7, #16]
  return result;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80059e8:	2320      	movs	r3, #32
 80059ea:	e003      	b.n	80059f4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	fab3 f383 	clz	r3, r3
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	2103      	movs	r1, #3
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	fa93 f3a3 	rbit	r3, r3
 8005a0a:	61fb      	str	r3, [r7, #28]
  return result;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005a16:	2320      	movs	r3, #32
 8005a18:	e003      	b.n	8005a22 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	fab3 f383 	clz	r3, r3
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
}
 8005a30:	bf00      	nop
 8005a32:	372c      	adds	r7, #44	; 0x2c
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <LL_GPIO_SetPinPull>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b08b      	sub	sp, #44	; 0x2c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	fa93 f3a3 	rbit	r3, r3
 8005a56:	613b      	str	r3, [r7, #16]
  return result;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005a62:	2320      	movs	r3, #32
 8005a64:	e003      	b.n	8005a6e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	fab3 f383 	clz	r3, r3
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	2103      	movs	r1, #3
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	401a      	ands	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	fa93 f3a3 	rbit	r3, r3
 8005a84:	61fb      	str	r3, [r7, #28]
  return result;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005a90:	2320      	movs	r3, #32
 8005a92:	e003      	b.n	8005a9c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	fab3 f383 	clz	r3, r3
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	60da      	str	r2, [r3, #12]
}
 8005aaa:	bf00      	nop
 8005aac:	372c      	adds	r7, #44	; 0x2c
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_GPIO_SetAFPin_0_7>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b08b      	sub	sp, #44	; 0x2c
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1a      	ldr	r2, [r3, #32]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	fa93 f3a3 	rbit	r3, r3
 8005ad0:	613b      	str	r3, [r7, #16]
  return result;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005adc:	2320      	movs	r3, #32
 8005ade:	e003      	b.n	8005ae8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	210f      	movs	r1, #15
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	401a      	ands	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	fa93 f3a3 	rbit	r3, r3
 8005afe:	61fb      	str	r3, [r7, #28]
  return result;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005b0a:	2320      	movs	r3, #32
 8005b0c:	e003      	b.n	8005b16 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	fab3 f383 	clz	r3, r3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	372c      	adds	r7, #44	; 0x2c
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_GPIO_SetAFPin_8_15>:
{
 8005b30:	b480      	push	{r7}
 8005b32:	b08b      	sub	sp, #44	; 0x2c
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	fa93 f3a3 	rbit	r3, r3
 8005b4c:	613b      	str	r3, [r7, #16]
  return result;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005b58:	2320      	movs	r3, #32
 8005b5a:	e003      	b.n	8005b64 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	fab3 f383 	clz	r3, r3
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	210f      	movs	r1, #15
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	401a      	ands	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	0a1b      	lsrs	r3, r3, #8
 8005b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	fa93 f3a3 	rbit	r3, r3
 8005b7c:	61fb      	str	r3, [r7, #28]
  return result;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	e003      	b.n	8005b94 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	fab3 f383 	clz	r3, r3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005ba2:	bf00      	nop
 8005ba4:	372c      	adds	r7, #44	; 0x2c
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b088      	sub	sp, #32
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	fa93 f3a3 	rbit	r3, r3
 8005bc4:	60fb      	str	r3, [r7, #12]
  return result;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <LL_GPIO_Init+0x26>
    return 32U;
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	e003      	b.n	8005bdc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	fab3 f383 	clz	r3, r3
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005bde:	e048      	b.n	8005c72 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2101      	movs	r1, #1
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d03a      	beq.n	8005c6c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d003      	beq.n	8005c06 <LL_GPIO_Init+0x58>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d10e      	bne.n	8005c24 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fed7 	bl	80059c2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff feb7 	bl	8005992 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	69b9      	ldr	r1, [r7, #24]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff05 	bl	8005a3c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d111      	bne.n	8005c5e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2bff      	cmp	r3, #255	; 0xff
 8005c3e:	d807      	bhi.n	8005c50 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	461a      	mov	r2, r3
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff34 	bl	8005ab6 <LL_GPIO_SetAFPin_0_7>
 8005c4e:	e006      	b.n	8005c5e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	461a      	mov	r2, r3
 8005c56:	69b9      	ldr	r1, [r7, #24]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ff69 	bl	8005b30 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	461a      	mov	r2, r3
 8005c64:	69b9      	ldr	r1, [r7, #24]
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff fe56 	bl	8005918 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1af      	bne.n	8005be0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <LL_RCC_HSI_IsReady+0x24>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d101      	bne.n	8005ca2 <LL_RCC_HSI_IsReady+0x16>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <LL_RCC_HSI_IsReady+0x18>
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005cb8:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <LL_RCC_LSE_IsReady+0x24>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d101      	bne.n	8005cca <LL_RCC_LSE_IsReady+0x16>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <LL_RCC_LSE_IsReady+0x18>
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000

08005cdc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <LL_RCC_GetSysClkSource+0x18>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 030c 	and.w	r3, r3, #12
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000

08005cf8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <LL_RCC_GetAHBPrescaler+0x18>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000

08005d14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <LL_RCC_GetAPB1Prescaler+0x18>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000

08005d30 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40021000 	.word	0x40021000

08005d4c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <LL_RCC_GetUSARTClockSource+0x24>)
 8005d56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	401a      	ands	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	4313      	orrs	r3, r2
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40021000 	.word	0x40021000

08005d74 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <LL_RCC_GetUARTClockSource+0x24>)
 8005d7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	401a      	ands	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	4313      	orrs	r3, r2
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40021000 	.word	0x40021000

08005d9c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <LL_RCC_PLL_GetMainSource+0x18>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0303 	and.w	r3, r3, #3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40021000 	.word	0x40021000

08005db8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005dbc:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <LL_RCC_PLL_GetN+0x18>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40021000 	.word	0x40021000

08005dd4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <LL_RCC_PLL_GetR+0x18>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000

08005df0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <LL_RCC_PLL_GetDivider+0x18>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000

08005e0c <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d132      	bne.n	8005e84 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ff94 	bl	8005d4c <LL_RCC_GetUSARTClockSource>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8005e2a:	d016      	beq.n	8005e5a <LL_RCC_GetUSARTClockFreq+0x4e>
 8005e2c:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8005e30:	d81c      	bhi.n	8005e6c <LL_RCC_GetUSARTClockFreq+0x60>
 8005e32:	4a52      	ldr	r2, [pc, #328]	; (8005f7c <LL_RCC_GetUSARTClockFreq+0x170>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <LL_RCC_GetUSARTClockFreq+0x34>
 8005e38:	4a51      	ldr	r2, [pc, #324]	; (8005f80 <LL_RCC_GetUSARTClockFreq+0x174>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <LL_RCC_GetUSARTClockFreq+0x3c>
 8005e3e:	e015      	b.n	8005e6c <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005e40:	f000 f934 	bl	80060ac <RCC_GetSystemClockFreq>
 8005e44:	60f8      	str	r0, [r7, #12]
        break;
 8005e46:	e094      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005e48:	f7ff ff20 	bl	8005c8c <LL_RCC_HSI_IsReady>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8082 	beq.w	8005f58 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8005e54:	4b4b      	ldr	r3, [pc, #300]	; (8005f84 <LL_RCC_GetUSARTClockFreq+0x178>)
 8005e56:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005e58:	e07e      	b.n	8005f58 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005e5a:	f7ff ff2b 	bl	8005cb4 <LL_RCC_LSE_IsReady>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d07b      	beq.n	8005f5c <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8005e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e68:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005e6a:	e077      	b.n	8005f5c <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005e6c:	f000 f91e 	bl	80060ac <RCC_GetSystemClockFreq>
 8005e70:	4603      	mov	r3, r0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f940 	bl	80060f8 <RCC_GetHCLKClockFreq>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f96a 	bl	8006154 <RCC_GetPCLK2ClockFreq>
 8005e80:	60f8      	str	r0, [r7, #12]
        break;
 8005e82:	e076      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b0c      	cmp	r3, #12
 8005e88:	d131      	bne.n	8005eee <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff ff5e 	bl	8005d4c <LL_RCC_GetUSARTClockSource>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005e96:	d015      	beq.n	8005ec4 <LL_RCC_GetUSARTClockFreq+0xb8>
 8005e98:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005e9c:	d81b      	bhi.n	8005ed6 <LL_RCC_GetUSARTClockFreq+0xca>
 8005e9e:	4a3a      	ldr	r2, [pc, #232]	; (8005f88 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <LL_RCC_GetUSARTClockFreq+0xa0>
 8005ea4:	4a39      	ldr	r2, [pc, #228]	; (8005f8c <LL_RCC_GetUSARTClockFreq+0x180>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <LL_RCC_GetUSARTClockFreq+0xa8>
 8005eaa:	e014      	b.n	8005ed6 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005eac:	f000 f8fe 	bl	80060ac <RCC_GetSystemClockFreq>
 8005eb0:	60f8      	str	r0, [r7, #12]
        break;
 8005eb2:	e05e      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005eb4:	f7ff feea 	bl	8005c8c <LL_RCC_HSI_IsReady>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d050      	beq.n	8005f60 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <LL_RCC_GetUSARTClockFreq+0x178>)
 8005ec0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ec2:	e04d      	b.n	8005f60 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005ec4:	f7ff fef6 	bl	8005cb4 <LL_RCC_LSE_IsReady>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d04a      	beq.n	8005f64 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 8005ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ed4:	e046      	b.n	8005f64 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ed6:	f000 f8e9 	bl	80060ac <RCC_GetSystemClockFreq>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 f90b 	bl	80060f8 <RCC_GetHCLKClockFreq>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 f91f 	bl	8006128 <RCC_GetPCLK1ClockFreq>
 8005eea:	60f8      	str	r0, [r7, #12]
        break;
 8005eec:	e041      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b30      	cmp	r3, #48	; 0x30
 8005ef2:	d139      	bne.n	8005f68 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ff29 	bl	8005d4c <LL_RCC_GetUSARTClockSource>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005f00:	d015      	beq.n	8005f2e <LL_RCC_GetUSARTClockFreq+0x122>
 8005f02:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005f06:	d81b      	bhi.n	8005f40 <LL_RCC_GetUSARTClockFreq+0x134>
 8005f08:	4a21      	ldr	r2, [pc, #132]	; (8005f90 <LL_RCC_GetUSARTClockFreq+0x184>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d003      	beq.n	8005f16 <LL_RCC_GetUSARTClockFreq+0x10a>
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <LL_RCC_GetUSARTClockFreq+0x188>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <LL_RCC_GetUSARTClockFreq+0x112>
 8005f14:	e014      	b.n	8005f40 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005f16:	f000 f8c9 	bl	80060ac <RCC_GetSystemClockFreq>
 8005f1a:	60f8      	str	r0, [r7, #12]
          break;
 8005f1c:	e029      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005f1e:	f7ff feb5 	bl	8005c8c <LL_RCC_HSI_IsReady>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d021      	beq.n	8005f6c <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 8005f28:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <LL_RCC_GetUSARTClockFreq+0x178>)
 8005f2a:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005f2c:	e01e      	b.n	8005f6c <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005f2e:	f7ff fec1 	bl	8005cb4 <LL_RCC_LSE_IsReady>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 8005f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3c:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005f3e:	e017      	b.n	8005f70 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005f40:	f000 f8b4 	bl	80060ac <RCC_GetSystemClockFreq>
 8005f44:	4603      	mov	r3, r0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f8d6 	bl	80060f8 <RCC_GetHCLKClockFreq>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 f8ea 	bl	8006128 <RCC_GetPCLK1ClockFreq>
 8005f54:	60f8      	str	r0, [r7, #12]
          break;
 8005f56:	e00c      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e00a      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e008      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005f60:	bf00      	nop
 8005f62:	e006      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005f64:	bf00      	nop
 8005f66:	e004      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8005f68:	bf00      	nop
 8005f6a:	e002      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8005f70:	bf00      	nop
  }
  return usart_frequency;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	00030001 	.word	0x00030001
 8005f80:	00030002 	.word	0x00030002
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	000c0004 	.word	0x000c0004
 8005f8c:	000c0008 	.word	0x000c0008
 8005f90:	00300010 	.word	0x00300010
 8005f94:	00300020 	.word	0x00300020

08005f98 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fa8:	d131      	bne.n	800600e <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff fee2 	bl	8005d74 <LL_RCC_GetUARTClockSource>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005fb6:	d015      	beq.n	8005fe4 <LL_RCC_GetUARTClockFreq+0x4c>
 8005fb8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005fbc:	d81b      	bhi.n	8005ff6 <LL_RCC_GetUARTClockFreq+0x5e>
 8005fbe:	4a36      	ldr	r2, [pc, #216]	; (8006098 <LL_RCC_GetUARTClockFreq+0x100>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <LL_RCC_GetUARTClockFreq+0x34>
 8005fc4:	4a35      	ldr	r2, [pc, #212]	; (800609c <LL_RCC_GetUARTClockFreq+0x104>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <LL_RCC_GetUARTClockFreq+0x3c>
 8005fca:	e014      	b.n	8005ff6 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005fcc:	f000 f86e 	bl	80060ac <RCC_GetSystemClockFreq>
 8005fd0:	60f8      	str	r0, [r7, #12]
        break;
 8005fd2:	e021      	b.n	8006018 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005fd4:	f7ff fe5a 	bl	8005c8c <LL_RCC_HSI_IsReady>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d019      	beq.n	8006012 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 8005fde:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <LL_RCC_GetUARTClockFreq+0x108>)
 8005fe0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005fe2:	e016      	b.n	8006012 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005fe4:	f7ff fe66 	bl	8005cb4 <LL_RCC_LSE_IsReady>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d013      	beq.n	8006016 <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 8005fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ff4:	e00f      	b.n	8006016 <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ff6:	f000 f859 	bl	80060ac <RCC_GetSystemClockFreq>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 f87b 	bl	80060f8 <RCC_GetHCLKClockFreq>
 8006002:	4603      	mov	r3, r0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f88f 	bl	8006128 <RCC_GetPCLK1ClockFreq>
 800600a:	60f8      	str	r0, [r7, #12]
        break;
 800600c:	e004      	b.n	8006018 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 800600e:	bf00      	nop
 8006010:	e002      	b.n	8006018 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8006012:	bf00      	nop
 8006014:	e000      	b.n	8006018 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8006016:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601e:	d131      	bne.n	8006084 <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fea7 	bl	8005d74 <LL_RCC_GetUARTClockSource>
 8006026:	4603      	mov	r3, r0
 8006028:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800602c:	d015      	beq.n	800605a <LL_RCC_GetUARTClockFreq+0xc2>
 800602e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006032:	d81b      	bhi.n	800606c <LL_RCC_GetUARTClockFreq+0xd4>
 8006034:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <LL_RCC_GetUARTClockFreq+0x10c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d003      	beq.n	8006042 <LL_RCC_GetUARTClockFreq+0xaa>
 800603a:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <LL_RCC_GetUARTClockFreq+0x110>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <LL_RCC_GetUARTClockFreq+0xb2>
 8006040:	e014      	b.n	800606c <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006042:	f000 f833 	bl	80060ac <RCC_GetSystemClockFreq>
 8006046:	60f8      	str	r0, [r7, #12]
        break;
 8006048:	e021      	b.n	800608e <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800604a:	f7ff fe1f 	bl	8005c8c <LL_RCC_HSI_IsReady>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d019      	beq.n	8006088 <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <LL_RCC_GetUARTClockFreq+0x108>)
 8006056:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006058:	e016      	b.n	8006088 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800605a:	f7ff fe2b 	bl	8005cb4 <LL_RCC_LSE_IsReady>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 8006064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006068:	60fb      	str	r3, [r7, #12]
        }
        break;
 800606a:	e00f      	b.n	800608c <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800606c:	f000 f81e 	bl	80060ac <RCC_GetSystemClockFreq>
 8006070:	4603      	mov	r3, r0
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f840 	bl	80060f8 <RCC_GetHCLKClockFreq>
 8006078:	4603      	mov	r3, r0
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f854 	bl	8006128 <RCC_GetPCLK1ClockFreq>
 8006080:	60f8      	str	r0, [r7, #12]
        break;
 8006082:	e004      	b.n	800608e <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 8006084:	bf00      	nop
 8006086:	e002      	b.n	800608e <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8006088:	bf00      	nop
 800608a:	e000      	b.n	800608e <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 800608c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800608e:	68fb      	ldr	r3, [r7, #12]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	00c00040 	.word	0x00c00040
 800609c:	00c00080 	.word	0x00c00080
 80060a0:	00f42400 	.word	0x00f42400
 80060a4:	03000100 	.word	0x03000100
 80060a8:	03000200 	.word	0x03000200

080060ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80060b2:	f7ff fe13 	bl	8005cdc <LL_RCC_GetSysClkSource>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b0c      	cmp	r3, #12
 80060ba:	d00c      	beq.n	80060d6 <RCC_GetSystemClockFreq+0x2a>
 80060bc:	2b0c      	cmp	r3, #12
 80060be:	d80e      	bhi.n	80060de <RCC_GetSystemClockFreq+0x32>
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d002      	beq.n	80060ca <RCC_GetSystemClockFreq+0x1e>
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d003      	beq.n	80060d0 <RCC_GetSystemClockFreq+0x24>
 80060c8:	e009      	b.n	80060de <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <RCC_GetSystemClockFreq+0x44>)
 80060cc:	607b      	str	r3, [r7, #4]
      break;
 80060ce:	e009      	b.n	80060e4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80060d0:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <RCC_GetSystemClockFreq+0x48>)
 80060d2:	607b      	str	r3, [r7, #4]
      break;
 80060d4:	e006      	b.n	80060e4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80060d6:	f000 f853 	bl	8006180 <RCC_PLL_GetFreqDomain_SYS>
 80060da:	6078      	str	r0, [r7, #4]
      break;
 80060dc:	e002      	b.n	80060e4 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 80060de:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <RCC_GetSystemClockFreq+0x44>)
 80060e0:	607b      	str	r3, [r7, #4]
      break;
 80060e2:	bf00      	nop
  }

  return frequency;
 80060e4:	687b      	ldr	r3, [r7, #4]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	00f42400 	.word	0x00f42400
 80060f4:	007a1200 	.word	0x007a1200

080060f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006100:	f7ff fdfa 	bl	8005cf8 <LL_RCC_GetAHBPrescaler>
 8006104:	4603      	mov	r3, r0
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	4a05      	ldr	r2, [pc, #20]	; (8006124 <RCC_GetHCLKClockFreq+0x2c>)
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	0800b820 	.word	0x0800b820

08006128 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006130:	f7ff fdf0 	bl	8005d14 <LL_RCC_GetAPB1Prescaler>
 8006134:	4603      	mov	r3, r0
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	4a05      	ldr	r2, [pc, #20]	; (8006150 <RCC_GetPCLK1ClockFreq+0x28>)
 800613a:	5cd3      	ldrb	r3, [r2, r3]
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	0800b830 	.word	0x0800b830

08006154 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800615c:	f7ff fde8 	bl	8005d30 <LL_RCC_GetAPB2Prescaler>
 8006160:	4603      	mov	r3, r0
 8006162:	0adb      	lsrs	r3, r3, #11
 8006164:	4a05      	ldr	r2, [pc, #20]	; (800617c <RCC_GetPCLK2ClockFreq+0x28>)
 8006166:	5cd3      	ldrb	r3, [r2, r3]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	0800b830 	.word	0x0800b830

08006180 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006180:	b590      	push	{r4, r7, lr}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006186:	f7ff fe09 	bl	8005d9c <LL_RCC_PLL_GetMainSource>
 800618a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d003      	beq.n	800619a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d003      	beq.n	80061a0 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8006198:	e005      	b.n	80061a6 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800619a:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800619c:	607b      	str	r3, [r7, #4]
      break;
 800619e:	e005      	b.n	80061ac <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80061a2:	607b      	str	r3, [r7, #4]
      break;
 80061a4:	e002      	b.n	80061ac <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80061a8:	607b      	str	r3, [r7, #4]
      break;
 80061aa:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80061ac:	f7ff fe04 	bl	8005db8 <LL_RCC_PLL_GetN>
 80061b0:	4602      	mov	r2, r0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	fb03 f402 	mul.w	r4, r3, r2
 80061b8:	f7ff fe1a 	bl	8005df0 <LL_RCC_PLL_GetDivider>
 80061bc:	4603      	mov	r3, r0
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	3301      	adds	r3, #1
 80061c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80061c6:	f7ff fe05 	bl	8005dd4 <LL_RCC_PLL_GetR>
 80061ca:	4603      	mov	r3, r0
 80061cc:	0e5b      	lsrs	r3, r3, #25
 80061ce:	3301      	adds	r3, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd90      	pop	{r4, r7, pc}
 80061de:	bf00      	nop
 80061e0:	00f42400 	.word	0x00f42400
 80061e4:	007a1200 	.word	0x007a1200

080061e8 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80061f0:	4b05      	ldr	r3, [pc, #20]	; (8006208 <LL_APB1_GRP1_ForceReset+0x20>)
 80061f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f4:	4904      	ldr	r1, [pc, #16]	; (8006208 <LL_APB1_GRP1_ForceReset+0x20>)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	638b      	str	r3, [r1, #56]	; 0x38
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40021000 	.word	0x40021000

0800620c <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8006216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	43db      	mvns	r3, r3
 800621c:	4904      	ldr	r1, [pc, #16]	; (8006230 <LL_APB1_GRP1_ReleaseReset+0x24>)
 800621e:	4013      	ands	r3, r2
 8006220:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000

08006234 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <LL_APB2_GRP1_ForceReset+0x20>)
 800623e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006240:	4904      	ldr	r1, [pc, #16]	; (8006254 <LL_APB2_GRP1_ForceReset+0x20>)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4313      	orrs	r3, r2
 8006246:	640b      	str	r3, [r1, #64]	; 0x40
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40021000 	.word	0x40021000

08006258 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <LL_APB2_GRP1_ReleaseReset+0x24>)
 8006262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	43db      	mvns	r3, r3
 8006268:	4904      	ldr	r1, [pc, #16]	; (800627c <LL_APB2_GRP1_ReleaseReset+0x24>)
 800626a:	4013      	ands	r3, r2
 800626c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40021000 	.word	0x40021000

08006280 <LL_SPI_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: SPI registers are de-initialized
  *          - ERROR: SPI registers are not de-initialized
  */
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));

#if defined(SPI1)
  if (SPIx == SPI1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a17      	ldr	r2, [pc, #92]	; (80062ec <LL_SPI_DeInit+0x6c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d109      	bne.n	80062a8 <LL_SPI_DeInit+0x28>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI1);
 8006294:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006298:	f7ff ffcc 	bl	8006234 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI1);
 800629c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80062a0:	f7ff ffda 	bl	8006258 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI1 */
#if defined(SPI2)
  if (SPIx == SPI2)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a11      	ldr	r2, [pc, #68]	; (80062f0 <LL_SPI_DeInit+0x70>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d109      	bne.n	80062c4 <LL_SPI_DeInit+0x44>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI2);
 80062b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80062b4:	f7ff ff98 	bl	80061e8 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI2);
 80062b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80062bc:	f7ff ffa6 	bl	800620c <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI2 */
#if defined(SPI3)
  if (SPIx == SPI3)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a0b      	ldr	r2, [pc, #44]	; (80062f4 <LL_SPI_DeInit+0x74>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d109      	bne.n	80062e0 <LL_SPI_DeInit+0x60>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI3);
 80062cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80062d0:	f7ff ff8a 	bl	80061e8 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI3);
 80062d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80062d8:	f7ff ff98 	bl	800620c <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]

    status = SUCCESS;
  }
#endif /* SPI4 */

  return status;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40013000 	.word	0x40013000
 80062f0:	40003800 	.word	0x40003800
 80062f4:	40003c00 	.word	0x40003c00

080062f8 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	649a      	str	r2, [r3, #72]	; 0x48
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f043 0201 	orr.w	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	615a      	str	r2, [r3, #20]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a3f      	ldr	r2, [pc, #252]	; (8006528 <LL_TIM_Init+0x110>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d013      	beq.n	8006458 <LL_TIM_Init+0x40>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006436:	d00f      	beq.n	8006458 <LL_TIM_Init+0x40>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a3c      	ldr	r2, [pc, #240]	; (800652c <LL_TIM_Init+0x114>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <LL_TIM_Init+0x40>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a3b      	ldr	r2, [pc, #236]	; (8006530 <LL_TIM_Init+0x118>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <LL_TIM_Init+0x40>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a3a      	ldr	r2, [pc, #232]	; (8006534 <LL_TIM_Init+0x11c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <LL_TIM_Init+0x40>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a39      	ldr	r2, [pc, #228]	; (8006538 <LL_TIM_Init+0x120>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d106      	bne.n	8006466 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <LL_TIM_Init+0x110>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01f      	beq.n	80064ae <LL_TIM_Init+0x96>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d01b      	beq.n	80064ae <LL_TIM_Init+0x96>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2c      	ldr	r2, [pc, #176]	; (800652c <LL_TIM_Init+0x114>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d017      	beq.n	80064ae <LL_TIM_Init+0x96>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <LL_TIM_Init+0x118>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <LL_TIM_Init+0x96>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2a      	ldr	r2, [pc, #168]	; (8006534 <LL_TIM_Init+0x11c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00f      	beq.n	80064ae <LL_TIM_Init+0x96>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2a      	ldr	r2, [pc, #168]	; (800653c <LL_TIM_Init+0x124>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00b      	beq.n	80064ae <LL_TIM_Init+0x96>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a29      	ldr	r2, [pc, #164]	; (8006540 <LL_TIM_Init+0x128>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <LL_TIM_Init+0x96>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a28      	ldr	r2, [pc, #160]	; (8006544 <LL_TIM_Init+0x12c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <LL_TIM_Init+0x96>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a23      	ldr	r2, [pc, #140]	; (8006538 <LL_TIM_Init+0x120>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d106      	bne.n	80064bc <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ff23 	bl	8006314 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff0f 	bl	80062f8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a12      	ldr	r2, [pc, #72]	; (8006528 <LL_TIM_Init+0x110>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <LL_TIM_Init+0xf2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a13      	ldr	r2, [pc, #76]	; (8006534 <LL_TIM_Init+0x11c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00f      	beq.n	800650a <LL_TIM_Init+0xf2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a13      	ldr	r2, [pc, #76]	; (800653c <LL_TIM_Init+0x124>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <LL_TIM_Init+0xf2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a12      	ldr	r2, [pc, #72]	; (8006540 <LL_TIM_Init+0x128>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <LL_TIM_Init+0xf2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a11      	ldr	r2, [pc, #68]	; (8006544 <LL_TIM_Init+0x12c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <LL_TIM_Init+0xf2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <LL_TIM_Init+0x120>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d105      	bne.n	8006516 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ff0d 	bl	8006330 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff ff6e 	bl	80063f8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40012c00 	.word	0x40012c00
 800652c:	40000400 	.word	0x40000400
 8006530:	40000800 	.word	0x40000800
 8006534:	40013400 	.word	0x40013400
 8006538:	40015000 	.word	0x40015000
 800653c:	40014000 	.word	0x40014000
 8006540:	40014400 	.word	0x40014400
 8006544:	40014800 	.word	0x40014800

08006548 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800655e:	d045      	beq.n	80065ec <LL_TIM_OC_Init+0xa4>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006566:	d848      	bhi.n	80065fa <LL_TIM_OC_Init+0xb2>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656e:	d036      	beq.n	80065de <LL_TIM_OC_Init+0x96>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006576:	d840      	bhi.n	80065fa <LL_TIM_OC_Init+0xb2>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	d027      	beq.n	80065d0 <LL_TIM_OC_Init+0x88>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006586:	d838      	bhi.n	80065fa <LL_TIM_OC_Init+0xb2>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658e:	d018      	beq.n	80065c2 <LL_TIM_OC_Init+0x7a>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006596:	d830      	bhi.n	80065fa <LL_TIM_OC_Init+0xb2>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d003      	beq.n	80065a6 <LL_TIM_OC_Init+0x5e>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d007      	beq.n	80065b4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80065a4:	e029      	b.n	80065fa <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f82d 	bl	8006608 <OC1Config>
 80065ae:	4603      	mov	r3, r0
 80065b0:	75fb      	strb	r3, [r7, #23]
      break;
 80065b2:	e023      	b.n	80065fc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f8ac 	bl	8006714 <OC2Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]
      break;
 80065c0:	e01c      	b.n	80065fc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f92f 	bl	8006828 <OC3Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]
      break;
 80065ce:	e015      	b.n	80065fc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f9b2 	bl	800693c <OC4Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	75fb      	strb	r3, [r7, #23]
      break;
 80065dc:	e00e      	b.n	80065fc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fa35 	bl	8006a50 <OC5Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ea:	e007      	b.n	80065fc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fa98 	bl	8006b24 <OC6Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	75fb      	strb	r3, [r7, #23]
      break;
 80065f8:	e000      	b.n	80065fc <LL_TIM_OC_Init+0xb4>
      break;
 80065fa:	bf00      	nop
  }

  return result;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 0202 	bic.w	r2, r3, #2
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a24      	ldr	r2, [pc, #144]	; (80066fc <OC1Config+0xf4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <OC1Config+0x8e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a23      	ldr	r2, [pc, #140]	; (8006700 <OC1Config+0xf8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <OC1Config+0x8e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a22      	ldr	r2, [pc, #136]	; (8006704 <OC1Config+0xfc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <OC1Config+0x8e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a21      	ldr	r2, [pc, #132]	; (8006708 <OC1Config+0x100>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <OC1Config+0x8e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a20      	ldr	r2, [pc, #128]	; (800670c <OC1Config+0x104>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <OC1Config+0x8e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <OC1Config+0x108>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d11e      	bne.n	80066d4 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 0208 	bic.w	r2, r3, #8
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 0204 	bic.w	r2, r3, #4
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fe30 	bl	800634c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	40015000 	.word	0x40015000

08006714 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0210 	bic.w	r2, r3, #16
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	0212      	lsls	r2, r2, #8
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0220 	bic.w	r2, r3, #32
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0210 	bic.w	r2, r3, #16
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a25      	ldr	r2, [pc, #148]	; (8006810 <OC2Config+0xfc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <OC2Config+0x94>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a24      	ldr	r2, [pc, #144]	; (8006814 <OC2Config+0x100>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00f      	beq.n	80067a8 <OC2Config+0x94>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a23      	ldr	r2, [pc, #140]	; (8006818 <OC2Config+0x104>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00b      	beq.n	80067a8 <OC2Config+0x94>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a22      	ldr	r2, [pc, #136]	; (800681c <OC2Config+0x108>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d007      	beq.n	80067a8 <OC2Config+0x94>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a21      	ldr	r2, [pc, #132]	; (8006820 <OC2Config+0x10c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <OC2Config+0x94>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a20      	ldr	r2, [pc, #128]	; (8006824 <OC2Config+0x110>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d11f      	bne.n	80067e8 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	019b      	lsls	r3, r3, #6
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	019b      	lsls	r3, r3, #6
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fdb4 	bl	8006368 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40013400 	.word	0x40013400
 8006818:	40014000 	.word	0x40014000
 800681c:	40014400 	.word	0x40014400
 8006820:	40014800 	.word	0x40014800
 8006824:	40015000 	.word	0x40015000

08006828 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a25      	ldr	r2, [pc, #148]	; (8006924 <OC3Config+0xfc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <OC3Config+0x92>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a24      	ldr	r2, [pc, #144]	; (8006928 <OC3Config+0x100>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00f      	beq.n	80068ba <OC3Config+0x92>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a23      	ldr	r2, [pc, #140]	; (800692c <OC3Config+0x104>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <OC3Config+0x92>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a22      	ldr	r2, [pc, #136]	; (8006930 <OC3Config+0x108>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <OC3Config+0x92>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a21      	ldr	r2, [pc, #132]	; (8006934 <OC3Config+0x10c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <OC3Config+0x92>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a20      	ldr	r2, [pc, #128]	; (8006938 <OC3Config+0x110>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d11f      	bne.n	80068fa <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	015b      	lsls	r3, r3, #5
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff fd39 	bl	8006384 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40013400 	.word	0x40013400
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400
 8006934:	40014800 	.word	0x40014800
 8006938:	40015000 	.word	0x40015000

0800693c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	0212      	lsls	r2, r2, #8
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	031b      	lsls	r3, r3, #12
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	031b      	lsls	r3, r3, #12
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a25      	ldr	r2, [pc, #148]	; (8006a38 <OC4Config+0xfc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <OC4Config+0x94>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a24      	ldr	r2, [pc, #144]	; (8006a3c <OC4Config+0x100>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00f      	beq.n	80069d0 <OC4Config+0x94>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <OC4Config+0x104>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00b      	beq.n	80069d0 <OC4Config+0x94>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a22      	ldr	r2, [pc, #136]	; (8006a44 <OC4Config+0x108>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <OC4Config+0x94>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a21      	ldr	r2, [pc, #132]	; (8006a48 <OC4Config+0x10c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <OC4Config+0x94>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a20      	ldr	r2, [pc, #128]	; (8006a4c <OC4Config+0x110>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d11f      	bne.n	8006a10 <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	039b      	lsls	r3, r3, #14
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	039b      	lsls	r3, r3, #14
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	019b      	lsls	r3, r3, #6
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	01db      	lsls	r3, r3, #7
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff fcbc 	bl	80063a0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40012c00 	.word	0x40012c00
 8006a3c:	40013400 	.word	0x40013400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40014400 	.word	0x40014400
 8006a48:	40014800 	.word	0x40014800
 8006a4c:	40015000 	.word	0x40015000

08006a50 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <OC5Config+0xbc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <OC5Config+0x84>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <OC5Config+0xc0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00f      	beq.n	8006ad4 <OC5Config+0x84>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <OC5Config+0xc4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00b      	beq.n	8006ad4 <OC5Config+0x84>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <OC5Config+0xc8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d007      	beq.n	8006ad4 <OC5Config+0x84>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <OC5Config+0xcc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <OC5Config+0x84>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <OC5Config+0xd0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d109      	bne.n	8006ae8 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fc61 	bl	80063bc <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800
 8006b20:	40015000 	.word	0x40015000

08006b24 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	0212      	lsls	r2, r2, #8
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	051b      	lsls	r3, r3, #20
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	051b      	lsls	r3, r3, #20
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <OC6Config+0xbc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <OC6Config+0x86>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <OC6Config+0xc0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00f      	beq.n	8006baa <OC6Config+0x86>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <OC6Config+0xc4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00b      	beq.n	8006baa <OC6Config+0x86>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a15      	ldr	r2, [pc, #84]	; (8006bec <OC6Config+0xc8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <OC6Config+0x86>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a14      	ldr	r2, [pc, #80]	; (8006bf0 <OC6Config+0xcc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <OC6Config+0x86>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <OC6Config+0xd0>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d109      	bne.n	8006bbe <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	029b      	lsls	r3, r3, #10
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fc06 	bl	80063dc <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40013400 	.word	0x40013400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800
 8006bf4:	40015000 	.word	0x40015000

08006bf8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <LL_USART_IsEnabled+0x18>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <LL_USART_IsEnabled+0x1a>
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <LL_USART_SetPrescaler>:
  *         @arg @ref LL_USART_PRESCALER_DIV128
  *         @arg @ref LL_USART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	f023 030f 	bic.w	r3, r3, #15
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	b292      	uxth	r2, r2
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	605a      	str	r2, [r3, #4]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	609a      	str	r2, [r3, #8]
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b0b      	cmp	r3, #11
 8006ca6:	d83c      	bhi.n	8006d22 <LL_USART_SetBaudRate+0x8e>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d039      	beq.n	8006d22 <LL_USART_SetBaudRate+0x8e>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb4:	d122      	bne.n	8006cfc <LL_USART_SetBaudRate+0x68>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4b1c      	ldr	r3, [pc, #112]	; (8006d30 <LL_USART_SetBaudRate+0x9c>)
 8006cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc8:	005a      	lsls	r2, r3, #1
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	441a      	add	r2, r3
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 8006cfa:	e012      	b.n	8006d22 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <LL_USART_SetBaudRate+0x9c>)
 8006d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	441a      	add	r2, r3
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	60da      	str	r2, [r3, #12]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	0800ba1c 	.word	0x0800ba1c

08006d34 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff ff56 	bl	8006bf8 <LL_USART_IsEnabled>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d165      	bne.n	8006e1e <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b34      	ldr	r3, [pc, #208]	; (8006e28 <LL_USART_Init+0xf4>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	6891      	ldr	r1, [r2, #8]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	6912      	ldr	r2, [r2, #16]
 8006d62:	4311      	orrs	r1, r2
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	6952      	ldr	r2, [r2, #20]
 8006d68:	4311      	orrs	r1, r2
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	69d2      	ldr	r2, [r2, #28]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff ff62 	bl	8006c46 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff6f 	bl	8006c6c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <LL_USART_Init+0xf8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d104      	bne.n	8006da0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006d96:	2003      	movs	r0, #3
 8006d98:	f7ff f838 	bl	8005e0c <LL_RCC_GetUSARTClockFreq>
 8006d9c:	60b8      	str	r0, [r7, #8]
 8006d9e:	e023      	b.n	8006de8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a23      	ldr	r2, [pc, #140]	; (8006e30 <LL_USART_Init+0xfc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d104      	bne.n	8006db2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006da8:	200c      	movs	r0, #12
 8006daa:	f7ff f82f 	bl	8005e0c <LL_RCC_GetUSARTClockFreq>
 8006dae:	60b8      	str	r0, [r7, #8]
 8006db0:	e01a      	b.n	8006de8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a1f      	ldr	r2, [pc, #124]	; (8006e34 <LL_USART_Init+0x100>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d104      	bne.n	8006dc4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006dba:	2030      	movs	r0, #48	; 0x30
 8006dbc:	f7ff f826 	bl	8005e0c <LL_RCC_GetUSARTClockFreq>
 8006dc0:	60b8      	str	r0, [r7, #8]
 8006dc2:	e011      	b.n	8006de8 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <LL_USART_Init+0x104>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d104      	bne.n	8006dd6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006dcc:	20c0      	movs	r0, #192	; 0xc0
 8006dce:	f7ff f8e3 	bl	8005f98 <LL_RCC_GetUARTClockFreq>
 8006dd2:	60b8      	str	r0, [r7, #8]
 8006dd4:	e008      	b.n	8006de8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a18      	ldr	r2, [pc, #96]	; (8006e3c <LL_USART_Init+0x108>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d104      	bne.n	8006de8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8006dde:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006de2:	f7ff f8d9 	bl	8005f98 <LL_RCC_GetUARTClockFreq>
 8006de6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d011      	beq.n	8006e12 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00d      	beq.n	8006e12 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	69d9      	ldr	r1, [r3, #28]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ff41 	bl	8006c94 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff00 	bl	8006c1e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	efff69f3 	.word	0xefff69f3
 8006e2c:	40013800 	.word	0x40013800
 8006e30:	40004400 	.word	0x40004400
 8006e34:	40004800 	.word	0x40004800
 8006e38:	40004c00 	.word	0x40004c00
 8006e3c:	40005000 	.word	0x40005000

08006e40 <LL_PWR_GetRegulVoltageScaling>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <LL_PWR_GetRegulVoltageScaling+0x18>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40007000 	.word	0x40007000

08006e5c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <LL_FLASH_SetLatency+0x24>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f023 020f 	bic.w	r2, r3, #15
 8006e6c:	4904      	ldr	r1, [pc, #16]	; (8006e80 <LL_FLASH_SetLatency+0x24>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	600b      	str	r3, [r1, #0]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40022000 	.word	0x40022000

08006e84 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <LL_FLASH_GetLatency+0x18>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 030f 	and.w	r3, r3, #15
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40022000 	.word	0x40022000

08006ea0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb2:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <LL_InitTick+0x30>)
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <LL_InitTick+0x30>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <LL_InitTick+0x30>)
 8006ec0:	2205      	movs	r2, #5
 8006ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	e000e010 	.word	0xe000e010

08006ed4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006edc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ffdd 	bl	8006ea0 <LL_InitTick>
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006ef8:	4b10      	ldr	r3, [pc, #64]	; (8006f3c <LL_mDelay+0x4c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006efe:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f0a:	d00c      	beq.n	8006f26 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8006f12:	e008      	b.n	8006f26 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <LL_mDelay+0x4c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f3      	bne.n	8006f14 <LL_mDelay+0x24>
    }
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	e000e010 	.word	0xe000e010

08006f40 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006f48:	4a04      	ldr	r2, [pc, #16]	; (8006f5c <LL_SetSystemCoreClock+0x1c>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6013      	str	r3, [r2, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000000 	.word	0x20000000

08006f60 <LL_SetFlashLatency>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
ErrorStatus LL_SetFlashLatency(uint32_t HCLKFrequency)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t getlatency;
  ErrorStatus status = SUCCESS;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	74fb      	strb	r3, [r7, #19]

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Frequency cannot be equal to 0 or greater than max clock */
  if((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_SCALE1_LATENCY9_FREQ))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <LL_SetFlashLatency+0x1e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a38      	ldr	r2, [pc, #224]	; (800705c <LL_SetFlashLatency+0xfc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d902      	bls.n	8006f84 <LL_SetFlashLatency+0x24>
  {
    status = ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	74fb      	strb	r3, [r7, #19]
 8006f82:	e065      	b.n	8007050 <LL_SetFlashLatency+0xf0>
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8006f84:	f7ff ff5c 	bl	8006e40 <LL_PWR_GetRegulVoltageScaling>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8e:	d137      	bne.n	8007000 <LL_SetFlashLatency+0xa0>
    {
      if(HCLKFrequency > UTILS_SCALE1_LATENCY8_FREQ)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a33      	ldr	r2, [pc, #204]	; (8007060 <LL_SetFlashLatency+0x100>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d902      	bls.n	8006f9e <LL_SetFlashLatency+0x3e>
      {
        /* 160 < HCLK <= 170 => 8WS (9 CPU cycles) */
        latency = LL_FLASH_LATENCY_8;
 8006f98:	2308      	movs	r3, #8
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e03d      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY7_FREQ)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a30      	ldr	r2, [pc, #192]	; (8007064 <LL_SetFlashLatency+0x104>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d902      	bls.n	8006fac <LL_SetFlashLatency+0x4c>
      {
        /* 140 < HCLK <= 160 => 7WS (8 CPU cycles) */
        latency = LL_FLASH_LATENCY_7;
 8006fa6:	2307      	movs	r3, #7
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	e036      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY6_FREQ)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a2e      	ldr	r2, [pc, #184]	; (8007068 <LL_SetFlashLatency+0x108>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d902      	bls.n	8006fba <LL_SetFlashLatency+0x5a>
      {
        /* 120 < HCLK <= 140 => 6WS (7 CPU cycles) */
        latency = LL_FLASH_LATENCY_6;
 8006fb4:	2306      	movs	r3, #6
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e02f      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY5_FREQ)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2b      	ldr	r2, [pc, #172]	; (800706c <LL_SetFlashLatency+0x10c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d902      	bls.n	8006fc8 <LL_SetFlashLatency+0x68>
      {
        /* 100 < HCLK <= 120 => 5WS (6 CPU cycles) */
        latency = LL_FLASH_LATENCY_5;
 8006fc2:	2305      	movs	r3, #5
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e028      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a29      	ldr	r2, [pc, #164]	; (8007070 <LL_SetFlashLatency+0x110>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d902      	bls.n	8006fd6 <LL_SetFlashLatency+0x76>
      {
        /* 80 < HCLK <= 100 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e021      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a26      	ldr	r2, [pc, #152]	; (8007074 <LL_SetFlashLatency+0x114>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d902      	bls.n	8006fe4 <LL_SetFlashLatency+0x84>
      {
        /* 60 < HCLK <= 80 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e01a      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a24      	ldr	r2, [pc, #144]	; (8007078 <LL_SetFlashLatency+0x118>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d902      	bls.n	8006ff2 <LL_SetFlashLatency+0x92>
      {
        /* 40 < HCLK <= 60 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 8006fec:	2302      	movs	r3, #2
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e013      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a21      	ldr	r2, [pc, #132]	; (800707c <LL_SetFlashLatency+0x11c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d90f      	bls.n	800701a <LL_SetFlashLatency+0xba>
        {
          /* 20 < HCLK <= 40 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e00c      	b.n	800701a <LL_SetFlashLatency+0xba>
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }
    else /* SCALE2 */
    {
      if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <LL_SetFlashLatency+0x120>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d902      	bls.n	800700e <LL_SetFlashLatency+0xae>
      {
        /* 16 < HCLK <= 26 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 8007008:	2302      	movs	r3, #2
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e005      	b.n	800701a <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1c      	ldr	r2, [pc, #112]	; (8007084 <LL_SetFlashLatency+0x124>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d901      	bls.n	800701a <LL_SetFlashLatency+0xba>
        {
          /* 8 < HCLK <= 16 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 8007016:	2301      	movs	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }

    if (status != ERROR)
 800701a:	7cfb      	ldrb	r3, [r7, #19]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d017      	beq.n	8007050 <LL_SetFlashLatency+0xf0>
    {
      LL_FLASH_SetLatency(latency);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff ff1b 	bl	8006e5c <LL_FLASH_SetLatency>

      /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
      timeout = 2U;
 8007026:	2302      	movs	r3, #2
 8007028:	617b      	str	r3, [r7, #20]
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
 800702a:	f7ff ff2b 	bl	8006e84 <LL_FLASH_GetLatency>
 800702e:	60b8      	str	r0, [r7, #8]
        timeout--;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	3b01      	subs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
      } while ((getlatency != latency) && (timeout > 0U));
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	429a      	cmp	r2, r3
 800703c:	d002      	beq.n	8007044 <LL_SetFlashLatency+0xe4>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1f2      	bne.n	800702a <LL_SetFlashLatency+0xca>

      if(getlatency != latency)
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <LL_SetFlashLatency+0xf0>
      {
        status = ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	74fb      	strb	r3, [r7, #19]
      }
    }
  }

  return status;
 8007050:	7cfb      	ldrb	r3, [r7, #19]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	0a21fe80 	.word	0x0a21fe80
 8007060:	09896800 	.word	0x09896800
 8007064:	08583b00 	.word	0x08583b00
 8007068:	07270e00 	.word	0x07270e00
 800706c:	05f5e100 	.word	0x05f5e100
 8007070:	04c4b400 	.word	0x04c4b400
 8007074:	03938700 	.word	0x03938700
 8007078:	02625a00 	.word	0x02625a00
 800707c:	01312d00 	.word	0x01312d00
 8007080:	00f42400 	.word	0x00f42400
 8007084:	007a1200 	.word	0x007a1200

08007088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007098:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <__NVIC_SetPriorityGrouping+0x44>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070a4:	4013      	ands	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ba:	4a04      	ldr	r2, [pc, #16]	; (80070cc <__NVIC_SetPriorityGrouping+0x44>)
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	60d3      	str	r3, [r2, #12]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	e000ed00 	.word	0xe000ed00

080070d0 <LL_RCC_HSE_EnableBypass>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <LL_RCC_HSE_EnableBypass+0x1c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a04      	ldr	r2, [pc, #16]	; (80070ec <LL_RCC_HSE_EnableBypass+0x1c>)
 80070da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070de:	6013      	str	r3, [r2, #0]
}
 80070e0:	bf00      	nop
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40021000 	.word	0x40021000

080070f0 <LL_RCC_HSE_Enable>:
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <LL_RCC_HSE_Enable+0x1c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a04      	ldr	r2, [pc, #16]	; (800710c <LL_RCC_HSE_Enable+0x1c>)
 80070fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fe:	6013      	str	r3, [r2, #0]
}
 8007100:	bf00      	nop
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40021000 	.word	0x40021000

08007110 <LL_RCC_HSE_Disable>:
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <LL_RCC_HSE_Disable+0x1c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a04      	ldr	r2, [pc, #16]	; (800712c <LL_RCC_HSE_Disable+0x1c>)
 800711a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711e:	6013      	str	r3, [r2, #0]
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40021000 	.word	0x40021000

08007130 <LL_RCC_HSE_IsReady>:
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <LL_RCC_HSE_IsReady+0x24>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007140:	d101      	bne.n	8007146 <LL_RCC_HSE_IsReady+0x16>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <LL_RCC_HSE_IsReady+0x18>
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40021000 	.word	0x40021000

08007158 <LL_RCC_HSI_Enable>:
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <LL_RCC_HSI_Enable+0x1c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a04      	ldr	r2, [pc, #16]	; (8007174 <LL_RCC_HSI_Enable+0x1c>)
 8007162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007166:	6013      	str	r3, [r2, #0]
}
 8007168:	bf00      	nop
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40021000 	.word	0x40021000

08007178 <LL_RCC_HSI_IsReady>:
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <LL_RCC_HSI_IsReady+0x24>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007188:	d101      	bne.n	800718e <LL_RCC_HSI_IsReady+0x16>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <LL_RCC_HSI_IsReady+0x18>
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40021000 	.word	0x40021000

080071a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80071a8:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	061b      	lsls	r3, r3, #24
 80071b4:	4904      	ldr	r1, [pc, #16]	; (80071c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	604b      	str	r3, [r1, #4]
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40021000 	.word	0x40021000

080071cc <LL_RCC_SetSysClkSource>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80071d4:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <LL_RCC_SetSysClkSource+0x24>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f023 0203 	bic.w	r2, r3, #3
 80071dc:	4904      	ldr	r1, [pc, #16]	; (80071f0 <LL_RCC_SetSysClkSource+0x24>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	608b      	str	r3, [r1, #8]
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40021000 	.word	0x40021000

080071f4 <LL_RCC_GetSysClkSource>:
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <LL_RCC_GetSysClkSource+0x18>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 030c 	and.w	r3, r3, #12
}
 8007200:	4618      	mov	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40021000 	.word	0x40021000

08007210 <LL_RCC_SetAHBPrescaler>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <LL_RCC_SetAHBPrescaler+0x24>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007220:	4904      	ldr	r1, [pc, #16]	; (8007234 <LL_RCC_SetAHBPrescaler+0x24>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4313      	orrs	r3, r2
 8007226:	608b      	str	r3, [r1, #8]
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40021000 	.word	0x40021000

08007238 <LL_RCC_SetAPB1Prescaler>:
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <LL_RCC_SetAPB1Prescaler+0x24>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007248:	4904      	ldr	r1, [pc, #16]	; (800725c <LL_RCC_SetAPB1Prescaler+0x24>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4313      	orrs	r3, r2
 800724e:	608b      	str	r3, [r1, #8]
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	40021000 	.word	0x40021000

08007260 <LL_RCC_SetAPB2Prescaler>:
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <LL_RCC_SetAPB2Prescaler+0x24>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007270:	4904      	ldr	r1, [pc, #16]	; (8007284 <LL_RCC_SetAPB2Prescaler+0x24>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4313      	orrs	r3, r2
 8007276:	608b      	str	r3, [r1, #8]
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40021000 	.word	0x40021000

08007288 <LL_RCC_PLL_Enable>:
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <LL_RCC_PLL_Enable+0x1c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a04      	ldr	r2, [pc, #16]	; (80072a4 <LL_RCC_PLL_Enable+0x1c>)
 8007292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007296:	6013      	str	r3, [r2, #0]
}
 8007298:	bf00      	nop
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000

080072a8 <LL_RCC_PLL_Disable>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <LL_RCC_PLL_Disable+0x1c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a04      	ldr	r2, [pc, #16]	; (80072c4 <LL_RCC_PLL_Disable+0x1c>)
 80072b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072b6:	6013      	str	r3, [r2, #0]
}
 80072b8:	bf00      	nop
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40021000 	.word	0x40021000

080072c8 <LL_RCC_PLL_IsReady>:
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80072cc:	4b07      	ldr	r3, [pc, #28]	; (80072ec <LL_RCC_PLL_IsReady+0x24>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d8:	d101      	bne.n	80072de <LL_RCC_PLL_IsReady+0x16>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <LL_RCC_PLL_IsReady+0x18>
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40021000 	.word	0x40021000

080072f0 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80072fe:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8007304:	4013      	ands	r3, r2
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4311      	orrs	r1, r2
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	0212      	lsls	r2, r2, #8
 8007310:	4311      	orrs	r1, r2
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	4904      	ldr	r1, [pc, #16]	; (8007328 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8007318:	4313      	orrs	r3, r2
 800731a:	60cb      	str	r3, [r1, #12]
}
 800731c:	bf00      	nop
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40021000 	.word	0x40021000
 800732c:	f9ff800c 	.word	0xf9ff800c

08007330 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4a04      	ldr	r2, [pc, #16]	; (800734c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800733a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800733e:	60d3      	str	r3, [r2, #12]
}
 8007340:	bf00      	nop
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40021000 	.word	0x40021000

08007350 <LL_APB1_GRP1_EnableClock>:
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007358:	4b08      	ldr	r3, [pc, #32]	; (800737c <LL_APB1_GRP1_EnableClock+0x2c>)
 800735a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800735c:	4907      	ldr	r1, [pc, #28]	; (800737c <LL_APB1_GRP1_EnableClock+0x2c>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4313      	orrs	r3, r2
 8007362:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007364:	4b05      	ldr	r3, [pc, #20]	; (800737c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007366:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4013      	ands	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800736e:	68fb      	ldr	r3, [r7, #12]
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40021000 	.word	0x40021000

08007380 <LL_APB2_GRP1_EnableClock>:
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007388:	4b08      	ldr	r3, [pc, #32]	; (80073ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800738a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800738c:	4907      	ldr	r1, [pc, #28]	; (80073ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4313      	orrs	r3, r2
 8007392:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8007396:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4013      	ands	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40021000 	.word	0x40021000

080073b0 <LL_PWR_SetRegulVoltageScaling>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80073c0:	4904      	ldr	r1, [pc, #16]	; (80073d4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	600b      	str	r3, [r1, #0]
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40007000 	.word	0x40007000

080073d8 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <LL_PWR_EnableRange1BoostMode+0x20>)
 80073de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073e2:	4a05      	ldr	r2, [pc, #20]	; (80073f8 <LL_PWR_EnableRange1BoostMode+0x20>)
 80073e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80073ec:	bf00      	nop
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40007000 	.word	0x40007000

080073fc <LL_PWR_DisableRange1BoostMode>:
  * @brief  Disable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_DisableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableRange1BoostMode(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <LL_PWR_DisableRange1BoostMode+0x20>)
 8007402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007406:	4a05      	ldr	r2, [pc, #20]	; (800741c <LL_PWR_DisableRange1BoostMode+0x20>)
 8007408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800740c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8007410:	bf00      	nop
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40007000 	.word	0x40007000

08007420 <LL_FLASH_SetLatency>:
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <LL_FLASH_SetLatency+0x24>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f023 020f 	bic.w	r2, r3, #15
 8007430:	4904      	ldr	r1, [pc, #16]	; (8007444 <LL_FLASH_SetLatency+0x24>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4313      	orrs	r3, r2
 8007436:	600b      	str	r3, [r1, #0]
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	40022000 	.word	0x40022000

08007448 <LL_FLASH_GetLatency>:
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <LL_FLASH_GetLatency+0x18>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 030f 	and.w	r3, r3, #15
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40022000 	.word	0x40022000

08007464 <STRHAL_Init>:

static inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq);
static inline STRHAL_SysClk_Src_t _SysClk_Backup();

STRHAL_Oof_t STRHAL_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
	if (_INITIALIZED)
 8007470:	4b21      	ldr	r3, [pc, #132]	; (80074f8 <STRHAL_Init+0x94>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <STRHAL_Init+0x1a>
		return _status;
 8007478:	4b20      	ldr	r3, [pc, #128]	; (80074fc <STRHAL_Init+0x98>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	e037      	b.n	80074ee <STRHAL_Init+0x8a>

	_status = STRHAL_NOICE;
 800747e:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <STRHAL_Init+0x98>)
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]

	NVIC_SetPriorityGrouping(0x03);
 8007484:	2003      	movs	r0, #3
 8007486:	f7ff fdff 	bl	8007088 <__NVIC_SetPriorityGrouping>
	if (_SysClk_Init(src, freq) != src)
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 f836 	bl	8007500 <_SysClk_Init>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	4293      	cmp	r3, r2
 800749c:	d006      	beq.n	80074ac <STRHAL_Init+0x48>
		_status |= STRHAL_OOF_SYSCLK;
 800749e:	4b17      	ldr	r3, [pc, #92]	; (80074fc <STRHAL_Init+0x98>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	f043 0301 	orr.w	r3, r3, #1
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	4b14      	ldr	r3, [pc, #80]	; (80074fc <STRHAL_Init+0x98>)
 80074aa:	701a      	strb	r2, [r3, #0]

	STRHAL_Clock_Init();
 80074ac:	f001 fc2e 	bl	8008d0c <STRHAL_Clock_Init>
	STRHAL_SysTick_Init();
 80074b0:	f002 fa32 	bl	8009918 <STRHAL_SysTick_Init>
	STRHAL_GPIO_Init();
 80074b4:	f001 fc7e 	bl	8008db4 <STRHAL_GPIO_Init>
	STRHAL_OPAMP_Init();
 80074b8:	f001 fe4c 	bl	8009154 <STRHAL_OPAMP_Init>
	STRHAL_UART_Init();
 80074bc:	f003 fb1e 	bl	800aafc <STRHAL_UART_Init>
	STRHAL_ADC_Init();
 80074c0:	f000 fc5e 	bl	8007d80 <STRHAL_ADC_Init>
	STRHAL_TIM_Init();
 80074c4:	f002 fc7f 	bl	8009dc6 <STRHAL_TIM_Init>
	STRHAL_SPI_Init();
 80074c8:	f002 f9dc 	bl	8009884 <STRHAL_SPI_Init>
	_status |= STRHAL_CAN_Init();
 80074cc:	f001 f958 	bl	8008780 <STRHAL_CAN_Init>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b09      	ldr	r3, [pc, #36]	; (80074fc <STRHAL_Init+0x98>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	4313      	orrs	r3, r2
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	4b07      	ldr	r3, [pc, #28]	; (80074fc <STRHAL_Init+0x98>)
 80074de:	701a      	strb	r2, [r3, #0]
	STRHAL_QSPI_Init();
 80074e0:	f001 ff02 	bl	80092e8 <STRHAL_QSPI_Init>

	_INITIALIZED = 1;
 80074e4:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <STRHAL_Init+0x94>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]

	return _status;
 80074ea:	4b04      	ldr	r3, [pc, #16]	; (80074fc <STRHAL_Init+0x98>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000828 	.word	0x20000828
 80074fc:	2000082c 	.word	0x2000082c

08007500 <_SysClk_Init>:

inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	71fb      	strb	r3, [r7, #7]
	uint32_t tot;
	if (src == STRHAL_SYSCLK_SRC_INT)
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d164      	bne.n	80075dc <_SysClk_Init+0xdc>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 8007512:	487c      	ldr	r0, [pc, #496]	; (8007704 <_SysClk_Init+0x204>)
 8007514:	f7ff fd24 	bl	8006f60 <LL_SetFlashLatency>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <_SysClk_Init+0x26>
			return _SysClk_Backup();
 800751e:	f000 f8f9 	bl	8007714 <_SysClk_Backup>
 8007522:	4603      	mov	r3, r0
 8007524:	e0ea      	b.n	80076fc <_SysClk_Init+0x1fc>

		LL_PWR_EnableRange1BoostMode();
 8007526:	f7ff ff57 	bl	80073d8 <LL_PWR_EnableRange1BoostMode>

		LL_RCC_PLL_Disable();
 800752a:	f7ff febd 	bl	80072a8 <LL_RCC_PLL_Disable>
		LL_RCC_HSI_Enable();
 800752e:	f7ff fe13 	bl	8007158 <LL_RCC_HSI_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	e00a      	b.n	800754e <_SysClk_Init+0x4e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a73      	ldr	r2, [pc, #460]	; (8007708 <_SysClk_Init+0x208>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d903      	bls.n	8007548 <_SysClk_Init+0x48>
				return _SysClk_Backup();
 8007540:	f000 f8e8 	bl	8007714 <_SysClk_Backup>
 8007544:	4603      	mov	r3, r0
 8007546:	e0d9      	b.n	80076fc <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	f7ff febb 	bl	80072c8 <LL_RCC_PLL_IsReady>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <_SysClk_Init+0x62>
 8007558:	f7ff fe0e 	bl	8007178 <LL_RCC_HSI_IsReady>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ea      	beq.n	8007538 <_SysClk_Init+0x38>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI,
 8007562:	2300      	movs	r3, #0
 8007564:	2228      	movs	r2, #40	; 0x28
 8007566:	2110      	movs	r1, #16
 8007568:	2002      	movs	r0, #2
 800756a:	f7ff fec1 	bl	80072f0 <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_INT_PLL_M, 4 * STRHAL_SYSCLK_FREQ / HSI_VALUE,
		STRHAL_SYSCLK_INT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 800756e:	f7ff fedf 	bl	8007330 <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 8007572:	f7ff fe89 	bl	8007288 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	e00a      	b.n	8007592 <_SysClk_Init+0x92>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a62      	ldr	r2, [pc, #392]	; (8007708 <_SysClk_Init+0x208>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d903      	bls.n	800758c <_SysClk_Init+0x8c>
				return _SysClk_Backup();
 8007584:	f000 f8c6 	bl	8007714 <_SysClk_Backup>
 8007588:	4603      	mov	r3, r0
 800758a:	e0b7      	b.n	80076fc <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	f7ff fe99 	bl	80072c8 <LL_RCC_PLL_IsReady>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0ef      	beq.n	800757c <_SysClk_Init+0x7c>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800759c:	2003      	movs	r0, #3
 800759e:	f7ff fe15 	bl	80071cc <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e00a      	b.n	80075be <_SysClk_Init+0xbe>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4a57      	ldr	r2, [pc, #348]	; (8007708 <_SysClk_Init+0x208>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d903      	bls.n	80075b8 <_SysClk_Init+0xb8>
				return _SysClk_Backup();
 80075b0:	f000 f8b0 	bl	8007714 <_SysClk_Backup>
 80075b4:	4603      	mov	r3, r0
 80075b6:	e0a1      	b.n	80076fc <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	f7ff fe19 	bl	80071f4 <LL_RCC_GetSysClkSource>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b0c      	cmp	r3, #12
 80075c6:	d1ef      	bne.n	80075a8 <_SysClk_Init+0xa8>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 80075c8:	484e      	ldr	r0, [pc, #312]	; (8007704 <_SysClk_Init+0x204>)
 80075ca:	f7ff fc83 	bl	8006ed4 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 80075ce:	484d      	ldr	r0, [pc, #308]	; (8007704 <_SysClk_Init+0x204>)
 80075d0:	f7ff fcb6 	bl	8006f40 <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_INT;
 80075d4:	4b4d      	ldr	r3, [pc, #308]	; (800770c <_SysClk_Init+0x20c>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	e084      	b.n	80076e6 <_SysClk_Init+0x1e6>
	}
	else if (src == STRHAL_SYSCLK_SRC_EXT)
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	f040 8081 	bne.w	80076e6 <_SysClk_Init+0x1e6>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 80075e4:	4847      	ldr	r0, [pc, #284]	; (8007704 <_SysClk_Init+0x204>)
 80075e6:	f7ff fcbb 	bl	8006f60 <LL_SetFlashLatency>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <_SysClk_Init+0xf8>
			return _SysClk_Backup();
 80075f0:	f000 f890 	bl	8007714 <_SysClk_Backup>
 80075f4:	4603      	mov	r3, r0
 80075f6:	e081      	b.n	80076fc <_SysClk_Init+0x1fc>

		LL_RCC_PLL_Disable();
 80075f8:	f7ff fe56 	bl	80072a8 <LL_RCC_PLL_Disable>
		if (LL_RCC_HSE_IsReady())
 80075fc:	f7ff fd98 	bl	8007130 <LL_RCC_HSE_IsReady>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d014      	beq.n	8007630 <_SysClk_Init+0x130>
		{
			LL_RCC_HSE_Disable();
 8007606:	f7ff fd83 	bl	8007110 <LL_RCC_HSE_Disable>

			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e00a      	b.n	8007626 <_SysClk_Init+0x126>
			{
				if (tot > STRHAL_SYSCLK_START_TOT)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a3d      	ldr	r2, [pc, #244]	; (8007708 <_SysClk_Init+0x208>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d903      	bls.n	8007620 <_SysClk_Init+0x120>
					return _SysClk_Backup();
 8007618:	f000 f87c 	bl	8007714 <_SysClk_Backup>
 800761c:	4603      	mov	r3, r0
 800761e:	e06d      	b.n	80076fc <_SysClk_Init+0x1fc>
			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	f7ff fd83 	bl	8007130 <LL_RCC_HSE_IsReady>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ef      	bne.n	8007610 <_SysClk_Init+0x110>
			}
		}

		LL_RCC_HSE_EnableBypass();
 8007630:	f7ff fd4e 	bl	80070d0 <LL_RCC_HSE_EnableBypass>
		LL_RCC_HSE_Enable();
 8007634:	f7ff fd5c 	bl	80070f0 <LL_RCC_HSE_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e00a      	b.n	8007654 <_SysClk_Init+0x154>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4a31      	ldr	r2, [pc, #196]	; (8007708 <_SysClk_Init+0x208>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d903      	bls.n	800764e <_SysClk_Init+0x14e>
				return _SysClk_Backup();
 8007646:	f000 f865 	bl	8007714 <_SysClk_Backup>
 800764a:	4603      	mov	r3, r0
 800764c:	e056      	b.n	80076fc <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	f7ff fe38 	bl	80072c8 <LL_RCC_PLL_IsReady>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <_SysClk_Init+0x168>
 800765e:	f7ff fd67 	bl	8007130 <LL_RCC_HSE_IsReady>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0ea      	beq.n	800763e <_SysClk_Init+0x13e>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE,
 8007668:	4a29      	ldr	r2, [pc, #164]	; (8007710 <_SysClk_Init+0x210>)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007670:	2300      	movs	r3, #0
 8007672:	2100      	movs	r1, #0
 8007674:	2003      	movs	r0, #3
 8007676:	f7ff fe3b 	bl	80072f0 <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_EXT_PLL_M, 2 * STRHAL_SYSCLK_FREQ / freq,
		STRHAL_SYSCLK_EXT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 800767a:	f7ff fe59 	bl	8007330 <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 800767e:	f7ff fe03 	bl	8007288 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e00a      	b.n	800769e <_SysClk_Init+0x19e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4a1f      	ldr	r2, [pc, #124]	; (8007708 <_SysClk_Init+0x208>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d903      	bls.n	8007698 <_SysClk_Init+0x198>
				return _SysClk_Backup();
 8007690:	f000 f840 	bl	8007714 <_SysClk_Backup>
 8007694:	4603      	mov	r3, r0
 8007696:	e031      	b.n	80076fc <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	f7ff fe13 	bl	80072c8 <LL_RCC_PLL_IsReady>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0ef      	beq.n	8007688 <_SysClk_Init+0x188>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80076a8:	2003      	movs	r0, #3
 80076aa:	f7ff fd8f 	bl	80071cc <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	e00a      	b.n	80076ca <_SysClk_Init+0x1ca>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4a14      	ldr	r2, [pc, #80]	; (8007708 <_SysClk_Init+0x208>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d903      	bls.n	80076c4 <_SysClk_Init+0x1c4>
				return _SysClk_Backup();
 80076bc:	f000 f82a 	bl	8007714 <_SysClk_Backup>
 80076c0:	4603      	mov	r3, r0
 80076c2:	e01b      	b.n	80076fc <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	f7ff fd93 	bl	80071f4 <LL_RCC_GetSysClkSource>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b0c      	cmp	r3, #12
 80076d2:	d1ef      	bne.n	80076b4 <_SysClk_Init+0x1b4>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 80076d4:	480b      	ldr	r0, [pc, #44]	; (8007704 <_SysClk_Init+0x204>)
 80076d6:	f7ff fbfd 	bl	8006ed4 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 80076da:	480a      	ldr	r0, [pc, #40]	; (8007704 <_SysClk_Init+0x204>)
 80076dc:	f7ff fc30 	bl	8006f40 <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_EXT;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	; (800770c <_SysClk_Init+0x20c>)
 80076e2:	2202      	movs	r2, #2
 80076e4:	701a      	strb	r2, [r3, #0]
	}

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7ff fd92 	bl	8007210 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80076ec:	2000      	movs	r0, #0
 80076ee:	f7ff fda3 	bl	8007238 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80076f2:	2000      	movs	r0, #0
 80076f4:	f7ff fdb4 	bl	8007260 <LL_RCC_SetAPB2Prescaler>
	return _SysClk_Src;
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <_SysClk_Init+0x20c>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	09896800 	.word	0x09896800
 8007708:	00f42400 	.word	0x00f42400
 800770c:	20000824 	.word	0x20000824
 8007710:	1312d000 	.word	0x1312d000

08007714 <_SysClk_Backup>:

inline STRHAL_SysClk_Src_t _SysClk_Backup()
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8007718:	2001      	movs	r0, #1
 800771a:	f7ff fe31 	bl	8007380 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800771e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007722:	f7ff fe15 	bl	8007350 <LL_APB1_GRP1_EnableClock>

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8007726:	2000      	movs	r0, #0
 8007728:	f7ff fe7a 	bl	8007420 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0);
 800772c:	bf00      	nop
 800772e:	f7ff fe8b 	bl	8007448 <LL_FLASH_GetLatency>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1fa      	bne.n	800772e <_SysClk_Backup+0x1a>

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8007738:	f44f 7000 	mov.w	r0, #512	; 0x200
 800773c:	f7ff fe38 	bl	80073b0 <LL_PWR_SetRegulVoltageScaling>
	LL_PWR_DisableRange1BoostMode();
 8007740:	f7ff fe5c 	bl	80073fc <LL_PWR_DisableRange1BoostMode>

	LL_RCC_HSI_Enable();
 8007744:	f7ff fd08 	bl	8007158 <LL_RCC_HSI_Enable>
	while (!LL_RCC_HSI_IsReady());
 8007748:	bf00      	nop
 800774a:	f7ff fd15 	bl	8007178 <LL_RCC_HSI_IsReady>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0fa      	beq.n	800774a <_SysClk_Backup+0x36>

	LL_RCC_HSI_SetCalibTrimming(64);
 8007754:	2040      	movs	r0, #64	; 0x40
 8007756:	f7ff fd23 	bl	80071a0 <LL_RCC_HSI_SetCalibTrimming>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800775a:	2001      	movs	r0, #1
 800775c:	f7ff fd36 	bl	80071cc <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8007760:	bf00      	nop
 8007762:	f7ff fd47 	bl	80071f4 <LL_RCC_GetSysClkSource>
 8007766:	4603      	mov	r3, r0
 8007768:	2b04      	cmp	r3, #4
 800776a:	d1fa      	bne.n	8007762 <_SysClk_Backup+0x4e>

	/* Set AHB prescaler*/
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800776c:	2000      	movs	r0, #0
 800776e:	f7ff fd4f 	bl	8007210 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8007772:	2000      	movs	r0, #0
 8007774:	f7ff fd60 	bl	8007238 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8007778:	2000      	movs	r0, #0
 800777a:	f7ff fd71 	bl	8007260 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(HSI_VALUE);
 800777e:	4806      	ldr	r0, [pc, #24]	; (8007798 <_SysClk_Backup+0x84>)
 8007780:	f7ff fba8 	bl	8006ed4 <LL_Init1msTick>
	LL_SetSystemCoreClock(HSI_VALUE);
 8007784:	4804      	ldr	r0, [pc, #16]	; (8007798 <_SysClk_Backup+0x84>)
 8007786:	f7ff fbdb 	bl	8006f40 <LL_SetSystemCoreClock>

	_SysClk_Src = STRHAL_SYSCLK_SRC_BKP;
 800778a:	4b04      	ldr	r3, [pc, #16]	; (800779c <_SysClk_Backup+0x88>)
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]

	return _SysClk_Src;
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <_SysClk_Backup+0x88>)
 8007792:	781b      	ldrb	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}
 8007798:	00f42400 	.word	0x00f42400
 800779c:	20000824 	.word	0x20000824

080077a0 <LL_ADC_DMA_GetRegAddr>:
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d103      	bne.n	80077b8 <LL_ADC_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(ADCx->DR);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3340      	adds	r3, #64	; 0x40
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e00c      	b.n	80077d2 <LL_ADC_DMA_GetRegAddr+0x32>
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077be:	d003      	beq.n	80077c8 <LL_ADC_DMA_GetRegAddr+0x28>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <LL_ADC_DMA_GetRegAddr+0x40>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d101      	bne.n	80077cc <LL_ADC_DMA_GetRegAddr+0x2c>
 80077c8:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <LL_ADC_DMA_GetRegAddr+0x44>)
 80077ca:	e000      	b.n	80077ce <LL_ADC_DMA_GetRegAddr+0x2e>
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <LL_ADC_DMA_GetRegAddr+0x48>)
 80077ce:	330c      	adds	r3, #12
 80077d0:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	50000100 	.word	0x50000100
 80077e4:	50000300 	.word	0x50000300
 80077e8:	50000700 	.word	0x50000700

080077ec <LL_ADC_SetGainCompensation>:
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80077fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	2a00      	cmp	r2, #0
 800781a:	d002      	beq.n	8007822 <LL_ADC_SetGainCompensation+0x36>
 800781c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007820:	e000      	b.n	8007824 <LL_ADC_SetGainCompensation+0x38>
 8007822:	2200      	movs	r2, #0
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	611a      	str	r2, [r3, #16]
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <LL_ADC_REG_SetSequencerLength>:
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	f023 020f 	bic.w	r2, r3, #15
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <LL_ADC_REG_SetSequencerRanks>:
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3330      	adds	r3, #48	; 0x30
 800786c:	461a      	mov	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	0a1b      	lsrs	r3, r3, #8
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	f003 030c 	and.w	r3, r3, #12
 8007878:	4413      	add	r3, r2
 800787a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	211f      	movs	r1, #31
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	0e9b      	lsrs	r3, r3, #26
 8007894:	f003 011f 	and.w	r1, r3, #31
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	fa01 f303 	lsl.w	r3, r1, r3
 80078a2:	431a      	orrs	r2, r3
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	601a      	str	r2, [r3, #0]
}
 80078a8:	bf00      	nop
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <LL_ADC_SetChannelSamplingTime>:
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3314      	adds	r3, #20
 80078c4:	461a      	mov	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	0e5b      	lsrs	r3, r3, #25
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	4413      	add	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	0d1b      	lsrs	r3, r3, #20
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	2107      	movs	r1, #7
 80078e2:	fa01 f303 	lsl.w	r3, r1, r3
 80078e6:	43db      	mvns	r3, r3
 80078e8:	401a      	ands	r2, r3
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	0d1b      	lsrs	r3, r3, #20
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	fa01 f303 	lsl.w	r3, r1, r3
 80078f8:	431a      	orrs	r2, r3
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	601a      	str	r2, [r3, #0]
}
 80078fe:	bf00      	nop
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <LL_ADC_SetChannelSingleDiff>:
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a0f      	ldr	r2, [pc, #60]	; (8007958 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10a      	bne.n	8007936 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792c:	431a      	orrs	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007934:	e00a      	b.n	800794c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007942:	43db      	mvns	r3, r3
 8007944:	401a      	ands	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	407f0000 	.word	0x407f0000

0800795c <LL_ADC_SetOverSamplingScope>:
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	611a      	str	r2, [r3, #16]
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <LL_ADC_DisableDeepPowerDown>:
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007996:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6093      	str	r3, [r2, #8]
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <LL_ADC_EnableInternalRegulator>:
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80079ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80079be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	609a      	str	r2, [r3, #8]
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <LL_ADC_Enable>:
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80079e6:	f043 0201 	orr.w	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	609a      	str	r2, [r3, #8]
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a40:	d101      	bne.n	8007a46 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a68:	f043 0204 	orr.w	r2, r3, #4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8007a90:	2301      	movs	r3, #1
 8007a92:	e000      	b.n	8007a96 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <LL_AHB1_GRP1_EnableClock>:
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007aac:	4b08      	ldr	r3, [pc, #32]	; (8007ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ab0:	4907      	ldr	r1, [pc, #28]	; (8007ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007ab8:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	40021000 	.word	0x40021000

08007ad4 <LL_AHB2_GRP1_EnableClock>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007adc:	4b08      	ldr	r3, [pc, #32]	; (8007b00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ae0:	4907      	ldr	r1, [pc, #28]	; (8007b00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007ae8:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4013      	ands	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007af2:	68fb      	ldr	r3, [r7, #12]
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	40021000 	.word	0x40021000

08007b04 <LL_DMA_EnableChannel>:
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8007b12:	4a0c      	ldr	r2, [pc, #48]	; (8007b44 <LL_DMA_EnableChannel+0x40>)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	4413      	add	r3, r2
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4908      	ldr	r1, [pc, #32]	; (8007b44 <LL_DMA_EnableChannel+0x40>)
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	440a      	add	r2, r1
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f043 0301 	orr.w	r3, r3, #1
 8007b34:	6013      	str	r3, [r2, #0]
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	0800ba4c 	.word	0x0800ba4c

08007b48 <LL_DMA_IsEnabledChannel>:
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8007b56:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <LL_DMA_IsEnabledChannel+0x38>)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <LL_DMA_IsEnabledChannel+0x2a>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <LL_DMA_IsEnabledChannel+0x2c>
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	0800ba4c 	.word	0x0800ba4c

08007b84 <LL_DMA_SetDataLength>:
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8007b94:	4a0d      	ldr	r2, [pc, #52]	; (8007bcc <LL_DMA_SetDataLength+0x48>)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4413      	add	r3, r2
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	0c1b      	lsrs	r3, r3, #16
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	4908      	ldr	r1, [pc, #32]	; (8007bcc <LL_DMA_SetDataLength+0x48>)
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	440a      	add	r2, r1
 8007bae:	7812      	ldrb	r2, [r2, #0]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	604b      	str	r3, [r1, #4]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	0800ba4c 	.word	0x0800ba4c

08007bd0 <LL_RCC_SetADCClockSource>:
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <LL_RCC_SetADCClockSource+0x44>)
 8007bda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2103      	movs	r1, #3
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	43db      	mvns	r3, r3
 8007bee:	401a      	ands	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	b2d9      	uxtb	r1, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	0c1b      	lsrs	r3, r3, #16
 8007bf8:	f003 031f 	and.w	r3, r3, #31
 8007bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007c00:	4904      	ldr	r1, [pc, #16]	; (8007c14 <LL_RCC_SetADCClockSource+0x44>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	40021000 	.word	0x40021000

08007c18 <STRHAL_ADC_RegInit>:
} adc1_buf, adc2_buf, adc3_buf;

static volatile uint64_t STRHAL_ADC_ChannelState = 0;

static void STRHAL_ADC_RegInit(ADC_TypeDef *ADCx)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08c      	sub	sp, #48	; 0x30
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	LL_ADC_InitTypeDef ADC_InitStruct =
 8007c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
	{ 0 };
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct =
 8007c2c:	f107 030c 	add.w	r3, r7, #12
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	611a      	str	r2, [r3, #16]
 8007c3c:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_InitStruct.Resolution = STRHAL_ADC_RESOLUTION;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8007c42:	2300      	movs	r3, #0
 8007c44:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_Init(ADCx, &ADC_InitStruct);
 8007c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fd fd05 	bl	8005660 <LL_ADC_Init>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	613b      	str	r3, [r7, #16]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8007c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c66:	61bb      	str	r3, [r7, #24]
	//ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8007c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c6c:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	61fb      	str	r3, [r7, #28]
	LL_ADC_REG_Init(ADCx, &ADC_REG_InitStruct);
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7fd fd17 	bl	80056ac <LL_ADC_REG_Init>
	LL_ADC_SetGainCompensation(ADCx, 0);
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fdb3 	bl	80077ec <LL_ADC_SetGainCompensation>
	LL_ADC_SetOverSamplingScope(ADCx, LL_ADC_OVS_DISABLE);
 8007c86:	2100      	movs	r1, #0
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff fe67 	bl	800795c <LL_ADC_SetOverSamplingScope>
	LL_ADC_DisableDeepPowerDown(ADCx);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fe79 	bl	8007986 <LL_ADC_DisableDeepPowerDown>
}
 8007c94:	bf00      	nop
 8007c96:	3730      	adds	r7, #48	; 0x30
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <STRHAL_ADC_DmaInit>:

static void STRHAL_ADC_DmaInit(DMA_TypeDef *DMAx, uint32_t dmaChannel, uint32_t dest, uint32_t src, uint32_t periph)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b090      	sub	sp, #64	; 0x40
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
	LL_DMA_InitTypeDef DMA_InitStruct =
 8007caa:	f107 0314 	add.w	r3, r7, #20
 8007cae:	222c      	movs	r2, #44	; 0x2c
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f003 fba4 	bl	800b400 <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.MemoryOrM2MDstAddress = dest;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_HALFWORD;
 8007cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cc4:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8007cc6:	2380      	movs	r3, #128	; 0x80
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 8007cca:	2320      	movs	r3, #32
 8007ccc:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.NbData = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStruct.PeriphOrM2MSrcAddress = src;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_HALFWORD;
 8007cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.PeriphRequest = periph;
 8007ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStruct.Priority = STRHAL_ADC_DMA_PRIORITY;
 8007ce4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c

	LL_DMA_Init(DMAx, dmaChannel, &DMA_InitStruct);
 8007cea:	f107 0314 	add.w	r3, r7, #20
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7fd fdd0 	bl	8005898 <LL_DMA_Init>
}
 8007cf8:	bf00      	nop
 8007cfa:	3740      	adds	r7, #64	; 0x40
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <STRHAL_ADC_Calibrate>:

static void STRHAL_ADC_Calibrate()
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
	LL_ADC_EnableInternalRegulator(ADC1);
 8007d04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007d08:	f7ff fe4f 	bl	80079aa <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8007d0c:	2064      	movs	r0, #100	; 0x64
 8007d0e:	f7ff f8ef 	bl	8006ef0 <LL_mDelay>
	LL_ADC_StartCalibration(ADC1, STRHAL_ADC_SINGLEDIFF);
 8007d12:	217f      	movs	r1, #127	; 0x7f
 8007d14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007d18:	f7ff fe6f 	bl	80079fa <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8007d1c:	bf00      	nop
 8007d1e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007d22:	f7ff fe83 	bl	8007a2c <LL_ADC_IsCalibrationOnGoing>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f8      	bne.n	8007d1e <STRHAL_ADC_Calibrate+0x1e>

	LL_ADC_EnableInternalRegulator(ADC2);
 8007d2c:	4812      	ldr	r0, [pc, #72]	; (8007d78 <STRHAL_ADC_Calibrate+0x78>)
 8007d2e:	f7ff fe3c 	bl	80079aa <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8007d32:	2064      	movs	r0, #100	; 0x64
 8007d34:	f7ff f8dc 	bl	8006ef0 <LL_mDelay>
	LL_ADC_StartCalibration(ADC2, STRHAL_ADC_SINGLEDIFF);
 8007d38:	217f      	movs	r1, #127	; 0x7f
 8007d3a:	480f      	ldr	r0, [pc, #60]	; (8007d78 <STRHAL_ADC_Calibrate+0x78>)
 8007d3c:	f7ff fe5d 	bl	80079fa <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC2));
 8007d40:	bf00      	nop
 8007d42:	480d      	ldr	r0, [pc, #52]	; (8007d78 <STRHAL_ADC_Calibrate+0x78>)
 8007d44:	f7ff fe72 	bl	8007a2c <LL_ADC_IsCalibrationOnGoing>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1f9      	bne.n	8007d42 <STRHAL_ADC_Calibrate+0x42>

	LL_ADC_EnableInternalRegulator(ADC3);
 8007d4e:	480b      	ldr	r0, [pc, #44]	; (8007d7c <STRHAL_ADC_Calibrate+0x7c>)
 8007d50:	f7ff fe2b 	bl	80079aa <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8007d54:	2064      	movs	r0, #100	; 0x64
 8007d56:	f7ff f8cb 	bl	8006ef0 <LL_mDelay>
	LL_ADC_StartCalibration(ADC3, STRHAL_ADC_SINGLEDIFF);
 8007d5a:	217f      	movs	r1, #127	; 0x7f
 8007d5c:	4807      	ldr	r0, [pc, #28]	; (8007d7c <STRHAL_ADC_Calibrate+0x7c>)
 8007d5e:	f7ff fe4c 	bl	80079fa <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC3));
 8007d62:	bf00      	nop
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <STRHAL_ADC_Calibrate+0x7c>)
 8007d66:	f7ff fe61 	bl	8007a2c <LL_ADC_IsCalibrationOnGoing>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f9      	bne.n	8007d64 <STRHAL_ADC_Calibrate+0x64>
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	50000100 	.word	0x50000100
 8007d7c:	50000400 	.word	0x50000400

08007d80 <STRHAL_ADC_Init>:

void STRHAL_ADC_Init()
{
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af02      	add	r7, sp, #8

	if (STRHAL_ADC_DMA == DMA1)
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8007d86:	2001      	movs	r0, #1
 8007d88:	f7ff fe8c 	bl	8007aa4 <LL_AHB1_GRP1_EnableClock>
	else if (STRHAL_ADC_DMA == DMA2)
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
	}

	LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8007d8c:	4831      	ldr	r0, [pc, #196]	; (8007e54 <STRHAL_ADC_Init+0xd4>)
 8007d8e:	f7ff ff1f 	bl	8007bd0 <LL_RCC_SetADCClockSource>
	LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 8007d92:	4831      	ldr	r0, [pc, #196]	; (8007e58 <STRHAL_ADC_Init+0xd8>)
 8007d94:	f7ff ff1c 	bl	8007bd0 <LL_RCC_SetADCClockSource>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8007d98:	2004      	movs	r0, #4
 8007d9a:	f7ff fe83 	bl	8007aa4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8007d9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007da2:	f7ff fe97 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 8007da6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007daa:	f7ff fe93 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>

	//Init DMA for ADC123
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL, (uint32_t) adc1_buf.data, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC1);
 8007dae:	4c2b      	ldr	r4, [pc, #172]	; (8007e5c <STRHAL_ADC_Init+0xdc>)
 8007db0:	2100      	movs	r1, #0
 8007db2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007db6:	f7ff fcf3 	bl	80077a0 <LL_ADC_DMA_GetRegAddr>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	9200      	str	r2, [sp, #0]
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	2104      	movs	r1, #4
 8007dc4:	4826      	ldr	r0, [pc, #152]	; (8007e60 <STRHAL_ADC_Init+0xe0>)
 8007dc6:	f7ff ff69 	bl	8007c9c <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1, (uint32_t) adc2_buf.data, LL_ADC_DMA_GetRegAddr(ADC2, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC2);
 8007dca:	4c26      	ldr	r4, [pc, #152]	; (8007e64 <STRHAL_ADC_Init+0xe4>)
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4826      	ldr	r0, [pc, #152]	; (8007e68 <STRHAL_ADC_Init+0xe8>)
 8007dd0:	f7ff fce6 	bl	80077a0 <LL_ADC_DMA_GetRegAddr>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2224      	movs	r2, #36	; 0x24
 8007dd8:	9200      	str	r2, [sp, #0]
 8007dda:	4622      	mov	r2, r4
 8007ddc:	2105      	movs	r1, #5
 8007dde:	4820      	ldr	r0, [pc, #128]	; (8007e60 <STRHAL_ADC_Init+0xe0>)
 8007de0:	f7ff ff5c 	bl	8007c9c <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2, (uint32_t) adc3_buf.data, LL_ADC_DMA_GetRegAddr(ADC3, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC3);
 8007de4:	4c21      	ldr	r4, [pc, #132]	; (8007e6c <STRHAL_ADC_Init+0xec>)
 8007de6:	2100      	movs	r1, #0
 8007de8:	4821      	ldr	r0, [pc, #132]	; (8007e70 <STRHAL_ADC_Init+0xf0>)
 8007dea:	f7ff fcd9 	bl	80077a0 <LL_ADC_DMA_GetRegAddr>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2225      	movs	r2, #37	; 0x25
 8007df2:	9200      	str	r2, [sp, #0]
 8007df4:	4622      	mov	r2, r4
 8007df6:	2106      	movs	r1, #6
 8007df8:	4819      	ldr	r0, [pc, #100]	; (8007e60 <STRHAL_ADC_Init+0xe0>)
 8007dfa:	f7ff ff4f 	bl	8007c9c <STRHAL_ADC_DmaInit>

	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct =
 8007dfe:	463b      	mov	r3, r7
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	609a      	str	r2, [r3, #8]
 8007e08:	60da      	str	r2, [r3, #12]
	{ 0 };

	ADC_CommonInitStruct.CommonClock = STRHAL_ADC_COMMONCLOCK;
 8007e0a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007e0e:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8007e10:	2300      	movs	r3, #0
 8007e12:	607b      	str	r3, [r7, #4]
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8007e14:	463b      	mov	r3, r7
 8007e16:	4619      	mov	r1, r3
 8007e18:	4816      	ldr	r0, [pc, #88]	; (8007e74 <STRHAL_ADC_Init+0xf4>)
 8007e1a:	f7fd fbcb 	bl	80055b4 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8007e1e:	463b      	mov	r3, r7
 8007e20:	4619      	mov	r1, r3
 8007e22:	4814      	ldr	r0, [pc, #80]	; (8007e74 <STRHAL_ADC_Init+0xf4>)
 8007e24:	f7fd fbc6 	bl	80055b4 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8007e28:	463b      	mov	r3, r7
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4812      	ldr	r0, [pc, #72]	; (8007e78 <STRHAL_ADC_Init+0xf8>)
 8007e2e:	f7fd fbc1 	bl	80055b4 <LL_ADC_CommonInit>

	STRHAL_ADC_RegInit(ADC1);
 8007e32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007e36:	f7ff feef 	bl	8007c18 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC2);
 8007e3a:	480b      	ldr	r0, [pc, #44]	; (8007e68 <STRHAL_ADC_Init+0xe8>)
 8007e3c:	f7ff feec 	bl	8007c18 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC3);
 8007e40:	480b      	ldr	r0, [pc, #44]	; (8007e70 <STRHAL_ADC_Init+0xf0>)
 8007e42:	f7ff fee9 	bl	8007c18 <STRHAL_ADC_RegInit>

	STRHAL_ADC_Calibrate();
 8007e46:	f7ff ff5b 	bl	8007d00 <STRHAL_ADC_Calibrate>
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	001c0002 	.word	0x001c0002
 8007e58:	001e0002 	.word	0x001e0002
 8007e5c:	20000830 	.word	0x20000830
 8007e60:	40020000 	.word	0x40020000
 8007e64:	2000085c 	.word	0x2000085c
 8007e68:	50000100 	.word	0x50000100
 8007e6c:	20000888 	.word	0x20000888
 8007e70:	50000400 	.word	0x50000400
 8007e74:	50000300 	.word	0x50000300
 8007e78:	50000700 	.word	0x50000700

08007e7c <STRHAL_ADC_SubscribeChannel>:

STRHAL_ADC_Data_t* STRHAL_ADC_SubscribeChannel(STRHAL_ADC_Channel_t *channel, STRHAL_ADC_InType_t type)
{
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	b099      	sub	sp, #100	; 0x64
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6178      	str	r0, [r7, #20]
 8007e86:	460b      	mov	r3, r1
 8007e88:	74fb      	strb	r3, [r7, #19]

	STRHAL_ADC_AnalogPin_t analogPin;
	STRHAL_ADC_Data_t *data_ptr = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t *length_ptr = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t dmaChannel = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t adcChannelMsk = 0;
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (channel->ADCx == ADC1)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eaa:	d11c      	bne.n	8007ee6 <STRHAL_ADC_SubscribeChannel+0x6a>
	{
		analogPin = gpioMapping[0][channel->channelId];
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	791b      	ldrb	r3, [r3, #4]
 8007eb0:	4a6f      	ldr	r2, [pc, #444]	; (8008070 <STRHAL_ADC_SubscribeChannel+0x1f4>)
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8007eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ebc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc1_buf.data;
 8007ec0:	4b6c      	ldr	r3, [pc, #432]	; (8008074 <STRHAL_ADC_SubscribeChannel+0x1f8>)
 8007ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
		length_ptr = &adc1_buf.length;
 8007ec4:	4b6c      	ldr	r3, [pc, #432]	; (8008078 <STRHAL_ADC_SubscribeChannel+0x1fc>)
 8007ec6:	65bb      	str	r3, [r7, #88]	; 0x58
		dmaChannel = STRHAL_ADC_DMA_CHANNEL;
 8007ec8:	2304      	movs	r3, #4
 8007eca:	657b      	str	r3, [r7, #84]	; 0x54
		adcChannelMsk = (1U) << (channel->channelId);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	791b      	ldrb	r3, [r3, #4]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4093      	lsls	r3, r2
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	60bb      	str	r3, [r7, #8]
 8007eda:	60fa      	str	r2, [r7, #12]
 8007edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ee0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8007ee4:	e047      	b.n	8007f76 <STRHAL_ADC_SubscribeChannel+0xfa>
	}
	else if (channel->ADCx == ADC2)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a64      	ldr	r2, [pc, #400]	; (800807c <STRHAL_ADC_SubscribeChannel+0x200>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d11e      	bne.n	8007f2e <STRHAL_ADC_SubscribeChannel+0xb2>
	{
		analogPin = gpioMapping[1][channel->channelId];
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	791b      	ldrb	r3, [r3, #4]
 8007ef4:	4a5e      	ldr	r2, [pc, #376]	; (8008070 <STRHAL_ADC_SubscribeChannel+0x1f4>)
 8007ef6:	3313      	adds	r3, #19
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	4413      	add	r3, r2
 8007efc:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8007f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f02:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc2_buf.data;
 8007f06:	4b5e      	ldr	r3, [pc, #376]	; (8008080 <STRHAL_ADC_SubscribeChannel+0x204>)
 8007f08:	65fb      	str	r3, [r7, #92]	; 0x5c
		length_ptr = &adc2_buf.length;
 8007f0a:	4b5e      	ldr	r3, [pc, #376]	; (8008084 <STRHAL_ADC_SubscribeChannel+0x208>)
 8007f0c:	65bb      	str	r3, [r7, #88]	; 0x58
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 1;
 8007f0e:	2305      	movs	r3, #5
 8007f10:	657b      	str	r3, [r7, #84]	; 0x54
		adcChannelMsk = (1U) << (STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	3313      	adds	r3, #19
 8007f18:	2201      	movs	r2, #1
 8007f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1e:	2200      	movs	r2, #0
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f28:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8007f2c:	e023      	b.n	8007f76 <STRHAL_ADC_SubscribeChannel+0xfa>
	}
	else if (channel->ADCx == ADC3)
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a55      	ldr	r2, [pc, #340]	; (8008088 <STRHAL_ADC_SubscribeChannel+0x20c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d11c      	bne.n	8007f72 <STRHAL_ADC_SubscribeChannel+0xf6>
	{
		analogPin = gpioMapping[2][channel->channelId];
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	791b      	ldrb	r3, [r3, #4]
 8007f3c:	4a4c      	ldr	r2, [pc, #304]	; (8008070 <STRHAL_ADC_SubscribeChannel+0x1f4>)
 8007f3e:	3326      	adds	r3, #38	; 0x26
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	4413      	add	r3, r2
 8007f44:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8007f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f4a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc3_buf.data;
 8007f4e:	4b4f      	ldr	r3, [pc, #316]	; (800808c <STRHAL_ADC_SubscribeChannel+0x210>)
 8007f50:	65fb      	str	r3, [r7, #92]	; 0x5c
		length_ptr = &adc3_buf.length;
 8007f52:	4b4f      	ldr	r3, [pc, #316]	; (8008090 <STRHAL_ADC_SubscribeChannel+0x214>)
 8007f54:	65bb      	str	r3, [r7, #88]	; 0x58
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 2;
 8007f56:	2306      	movs	r3, #6
 8007f58:	657b      	str	r3, [r7, #84]	; 0x54
		adcChannelMsk = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	791b      	ldrb	r3, [r3, #4]
 8007f5e:	3326      	adds	r3, #38	; 0x26
 8007f60:	2201      	movs	r2, #1
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	2200      	movs	r2, #0
 8007f68:	469a      	mov	sl, r3
 8007f6a:	4693      	mov	fp, r2
 8007f6c:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
 8007f70:	e001      	b.n	8007f76 <STRHAL_ADC_SubscribeChannel+0xfa>
	}
	else
	{
		return NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e077      	b.n	8008066 <STRHAL_ADC_SubscribeChannel+0x1ea>
	}

	// wrong input type passed
	if (analogPin.type != type)
 8007f76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007f7a:	7cfa      	ldrb	r2, [r7, #19]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d001      	beq.n	8007f84 <STRHAL_ADC_SubscribeChannel+0x108>
	{
		return NULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	e070      	b.n	8008066 <STRHAL_ADC_SubscribeChannel+0x1ea>
	}

	// channel already initialized
	if (STRHAL_ADC_ChannelState & adcChannelMsk)
 8007f84:	4b43      	ldr	r3, [pc, #268]	; (8008094 <STRHAL_ADC_SubscribeChannel+0x218>)
 8007f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f8e:	ea00 0402 	and.w	r4, r0, r2
 8007f92:	ea01 0503 	and.w	r5, r1, r3
 8007f96:	ea54 0305 	orrs.w	r3, r4, r5
 8007f9a:	d001      	beq.n	8007fa0 <STRHAL_ADC_SubscribeChannel+0x124>
	{
		return NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e062      	b.n	8008066 <STRHAL_ADC_SubscribeChannel+0x1ea>
	}

	STRHAL_ADC_ChannelState |= adcChannelMsk;
 8007fa0:	4b3c      	ldr	r3, [pc, #240]	; (8008094 <STRHAL_ADC_SubscribeChannel+0x218>)
 8007fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fa6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007faa:	ea40 0802 	orr.w	r8, r0, r2
 8007fae:	ea41 0903 	orr.w	r9, r1, r3
 8007fb2:	4b38      	ldr	r3, [pc, #224]	; (8008094 <STRHAL_ADC_SubscribeChannel+0x218>)
 8007fb4:	e9c3 8900 	strd	r8, r9, [r3]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007fb8:	2004      	movs	r0, #4
 8007fba:	f7ff fd8b 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007fbe:	2020      	movs	r0, #32
 8007fc0:	f7ff fd88 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007fc4:	2001      	movs	r0, #1
 8007fc6:	f7ff fd85 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007fca:	2002      	movs	r0, #2
 8007fcc:	f7ff fd82 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8007fd0:	2010      	movs	r0, #16
 8007fd2:	f7ff fd7f 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8007fd6:	2008      	movs	r0, #8
 8007fd8:	f7ff fd7c 	bl	8007ad4 <LL_AHB2_GRP1_EnableClock>

	if (type == STRHAL_ADC_INTYPE_REGULAR)
 8007fdc:	7cfb      	ldrb	r3, [r7, #19]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d115      	bne.n	800800e <STRHAL_ADC_SubscribeChannel+0x192>
	{
		LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007fe2:	f107 031c 	add.w	r3, r7, #28
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	605a      	str	r2, [r3, #4]
 8007fec:	609a      	str	r2, [r3, #8]
 8007fee:	60da      	str	r2, [r3, #12]
 8007ff0:	611a      	str	r2, [r3, #16]
 8007ff2:	615a      	str	r2, [r3, #20]
		{ 0 };

		GPIO_InitStruct.Pin = analogPin.pin;
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
		LL_GPIO_Init(analogPin.port, &GPIO_InitStruct);
 8008000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008002:	f107 021c 	add.w	r2, r7, #28
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7fd fdd0 	bl	8005bae <LL_GPIO_Init>
	}

	LL_ADC_SetChannelSamplingTime(channel->ADCx, analogPin.channel, STRHAL_ADC_CHANNEL_SAMPLINGTIME);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008014:	2206      	movs	r2, #6
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fc4c 	bl	80078b4 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(channel->ADCx, analogPin.channel, STRHAL_ADC_SINGLEDIFF);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008022:	227f      	movs	r2, #127	; 0x7f
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff fc71 	bl	800790c <LL_ADC_SetChannelSingleDiff>

	LL_ADC_REG_SetSequencerRanks(channel->ADCx, adcRanks[*length_ptr], analogPin.channel);
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a19      	ldr	r2, [pc, #100]	; (8008098 <STRHAL_ADC_SubscribeChannel+0x21c>)
 8008034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800803a:	4619      	mov	r1, r3
 800803c:	f7ff fc0e 	bl	800785c <LL_ADC_REG_SetSequencerRanks>
	uint32_t length = *length_ptr;
 8008040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	647b      	str	r3, [r7, #68]	; 0x44
	LL_DMA_SetDataLength(STRHAL_ADC_DMA, dmaChannel, length + 1);
 8008046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008048:	3301      	adds	r3, #1
 800804a:	461a      	mov	r2, r3
 800804c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800804e:	4813      	ldr	r0, [pc, #76]	; (800809c <STRHAL_ADC_SubscribeChannel+0x220>)
 8008050:	f7ff fd98 	bl	8007b84 <LL_DMA_SetDataLength>
	(*length_ptr)++;
 8008054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800805c:	601a      	str	r2, [r3, #0]
	return &data_ptr[length];
 800805e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008064:	4413      	add	r3, r2
}
 8008066:	4618      	mov	r0, r3
 8008068:	3764      	adds	r7, #100	; 0x64
 800806a:	46bd      	mov	sp, r7
 800806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008070:	0800bad4 	.word	0x0800bad4
 8008074:	20000830 	.word	0x20000830
 8008078:	20000858 	.word	0x20000858
 800807c:	50000100 	.word	0x50000100
 8008080:	2000085c 	.word	0x2000085c
 8008084:	20000884 	.word	0x20000884
 8008088:	50000400 	.word	0x50000400
 800808c:	20000888 	.word	0x20000888
 8008090:	200008b0 	.word	0x200008b0
 8008094:	200008b8 	.word	0x200008b8
 8008098:	0800ba54 	.word	0x0800ba54
 800809c:	40020000 	.word	0x40020000

080080a0 <STRHAL_ADC_Run>:

void STRHAL_ADC_Run()
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerLength(ADC1, adcSeqRanks[adc1_buf.length - 1]);
 80080a4:	4b37      	ldr	r3, [pc, #220]	; (8008184 <STRHAL_ADC_Run+0xe4>)
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4a37      	ldr	r2, [pc, #220]	; (8008188 <STRHAL_ADC_Run+0xe8>)
 80080ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b0:	4619      	mov	r1, r3
 80080b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80080b6:	f7ff fbbe 	bl	8007836 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC2, adcSeqRanks[adc2_buf.length - 1]);
 80080ba:	4b34      	ldr	r3, [pc, #208]	; (800818c <STRHAL_ADC_Run+0xec>)
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	3b01      	subs	r3, #1
 80080c0:	4a31      	ldr	r2, [pc, #196]	; (8008188 <STRHAL_ADC_Run+0xe8>)
 80080c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080c6:	4619      	mov	r1, r3
 80080c8:	4831      	ldr	r0, [pc, #196]	; (8008190 <STRHAL_ADC_Run+0xf0>)
 80080ca:	f7ff fbb4 	bl	8007836 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC3, adcSeqRanks[adc3_buf.length - 1]);
 80080ce:	4b31      	ldr	r3, [pc, #196]	; (8008194 <STRHAL_ADC_Run+0xf4>)
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	3b01      	subs	r3, #1
 80080d4:	4a2c      	ldr	r2, [pc, #176]	; (8008188 <STRHAL_ADC_Run+0xe8>)
 80080d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080da:	4619      	mov	r1, r3
 80080dc:	482e      	ldr	r0, [pc, #184]	; (8008198 <STRHAL_ADC_Run+0xf8>)
 80080de:	f7ff fbaa 	bl	8007836 <LL_ADC_REG_SetSequencerLength>

	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL);
 80080e2:	2104      	movs	r1, #4
 80080e4:	482d      	ldr	r0, [pc, #180]	; (800819c <STRHAL_ADC_Run+0xfc>)
 80080e6:	f7ff fd0d 	bl	8007b04 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL));
 80080ea:	bf00      	nop
 80080ec:	2104      	movs	r1, #4
 80080ee:	482b      	ldr	r0, [pc, #172]	; (800819c <STRHAL_ADC_Run+0xfc>)
 80080f0:	f7ff fd2a 	bl	8007b48 <LL_DMA_IsEnabledChannel>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0f8      	beq.n	80080ec <STRHAL_ADC_Run+0x4c>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1);
 80080fa:	2105      	movs	r1, #5
 80080fc:	4827      	ldr	r0, [pc, #156]	; (800819c <STRHAL_ADC_Run+0xfc>)
 80080fe:	f7ff fd01 	bl	8007b04 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1));
 8008102:	bf00      	nop
 8008104:	2105      	movs	r1, #5
 8008106:	4825      	ldr	r0, [pc, #148]	; (800819c <STRHAL_ADC_Run+0xfc>)
 8008108:	f7ff fd1e 	bl	8007b48 <LL_DMA_IsEnabledChannel>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0f8      	beq.n	8008104 <STRHAL_ADC_Run+0x64>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2);
 8008112:	2106      	movs	r1, #6
 8008114:	4821      	ldr	r0, [pc, #132]	; (800819c <STRHAL_ADC_Run+0xfc>)
 8008116:	f7ff fcf5 	bl	8007b04 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2));
 800811a:	bf00      	nop
 800811c:	2106      	movs	r1, #6
 800811e:	481f      	ldr	r0, [pc, #124]	; (800819c <STRHAL_ADC_Run+0xfc>)
 8008120:	f7ff fd12 	bl	8007b48 <LL_DMA_IsEnabledChannel>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f8      	beq.n	800811c <STRHAL_ADC_Run+0x7c>

	LL_ADC_Enable(ADC1);
 800812a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800812e:	f7ff fc50 	bl	80079d2 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0);
 8008132:	bf00      	nop
 8008134:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008138:	f7ff fca0 	bl	8007a7c <LL_ADC_IsActiveFlag_ADRDY>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d0f8      	beq.n	8008134 <STRHAL_ADC_Run+0x94>
	LL_ADC_Enable(ADC2);
 8008142:	4813      	ldr	r0, [pc, #76]	; (8008190 <STRHAL_ADC_Run+0xf0>)
 8008144:	f7ff fc45 	bl	80079d2 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0);
 8008148:	bf00      	nop
 800814a:	4811      	ldr	r0, [pc, #68]	; (8008190 <STRHAL_ADC_Run+0xf0>)
 800814c:	f7ff fc96 	bl	8007a7c <LL_ADC_IsActiveFlag_ADRDY>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f9      	beq.n	800814a <STRHAL_ADC_Run+0xaa>
	LL_ADC_Enable(ADC3);
 8008156:	4810      	ldr	r0, [pc, #64]	; (8008198 <STRHAL_ADC_Run+0xf8>)
 8008158:	f7ff fc3b 	bl	80079d2 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0);
 800815c:	bf00      	nop
 800815e:	480e      	ldr	r0, [pc, #56]	; (8008198 <STRHAL_ADC_Run+0xf8>)
 8008160:	f7ff fc8c 	bl	8007a7c <LL_ADC_IsActiveFlag_ADRDY>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f9      	beq.n	800815e <STRHAL_ADC_Run+0xbe>

	LL_ADC_REG_StartConversion(ADC1);
 800816a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800816e:	f7ff fc71 	bl	8007a54 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC2);
 8008172:	4807      	ldr	r0, [pc, #28]	; (8008190 <STRHAL_ADC_Run+0xf0>)
 8008174:	f7ff fc6e 	bl	8007a54 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC3);
 8008178:	4807      	ldr	r0, [pc, #28]	; (8008198 <STRHAL_ADC_Run+0xf8>)
 800817a:	f7ff fc6b 	bl	8007a54 <LL_ADC_REG_StartConversion>
}
 800817e:	bf00      	nop
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000830 	.word	0x20000830
 8008188:	0800ba94 	.word	0x0800ba94
 800818c:	2000085c 	.word	0x2000085c
 8008190:	50000100 	.word	0x50000100
 8008194:	20000888 	.word	0x20000888
 8008198:	50000400 	.word	0x50000400
 800819c:	40020000 	.word	0x40020000

080081a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <__NVIC_GetPriorityGrouping+0x18>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	0a1b      	lsrs	r3, r3, #8
 80081aa:	f003 0307 	and.w	r3, r3, #7
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	e000ed00 	.word	0xe000ed00

080081bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	db0b      	blt.n	80081e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	f003 021f 	and.w	r2, r3, #31
 80081d4:	4907      	ldr	r1, [pc, #28]	; (80081f4 <__NVIC_EnableIRQ+0x38>)
 80081d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	2001      	movs	r0, #1
 80081de:	fa00 f202 	lsl.w	r2, r0, r2
 80081e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	e000e100 	.word	0xe000e100

080081f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008208:	2b00      	cmp	r3, #0
 800820a:	db0a      	blt.n	8008222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	490c      	ldr	r1, [pc, #48]	; (8008244 <__NVIC_SetPriority+0x4c>)
 8008212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008216:	0112      	lsls	r2, r2, #4
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	440b      	add	r3, r1
 800821c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008220:	e00a      	b.n	8008238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	b2da      	uxtb	r2, r3
 8008226:	4908      	ldr	r1, [pc, #32]	; (8008248 <__NVIC_SetPriority+0x50>)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	3b04      	subs	r3, #4
 8008230:	0112      	lsls	r2, r2, #4
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	440b      	add	r3, r1
 8008236:	761a      	strb	r2, [r3, #24]
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	e000e100 	.word	0xe000e100
 8008248:	e000ed00 	.word	0xe000ed00

0800824c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800824c:	b480      	push	{r7}
 800824e:	b089      	sub	sp, #36	; 0x24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f1c3 0307 	rsb	r3, r3, #7
 8008266:	2b04      	cmp	r3, #4
 8008268:	bf28      	it	cs
 800826a:	2304      	movcs	r3, #4
 800826c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	3304      	adds	r3, #4
 8008272:	2b06      	cmp	r3, #6
 8008274:	d902      	bls.n	800827c <NVIC_EncodePriority+0x30>
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	3b03      	subs	r3, #3
 800827a:	e000      	b.n	800827e <NVIC_EncodePriority+0x32>
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	43da      	mvns	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	401a      	ands	r2, r3
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	fa01 f303 	lsl.w	r3, r1, r3
 800829e:	43d9      	mvns	r1, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082a4:	4313      	orrs	r3, r2
         );
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3724      	adds	r7, #36	; 0x24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <LL_AHB2_GRP1_EnableClock>:
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80082bc:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80082be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082c0:	4907      	ldr	r1, [pc, #28]	; (80082e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80082ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4013      	ands	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082d2:	68fb      	ldr	r3, [r7, #12]
}
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40021000 	.word	0x40021000

080082e4 <LL_APB1_GRP1_EnableClock>:
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80082ec:	4b08      	ldr	r3, [pc, #32]	; (8008310 <LL_APB1_GRP1_EnableClock+0x2c>)
 80082ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082f0:	4907      	ldr	r1, [pc, #28]	; (8008310 <LL_APB1_GRP1_EnableClock+0x2c>)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <LL_APB1_GRP1_EnableClock+0x2c>)
 80082fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4013      	ands	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008302:	68fb      	ldr	r3, [r7, #12]
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	40021000 	.word	0x40021000

08008314 <LL_RCC_SetFDCANClockSource>:
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <LL_RCC_SetFDCANClockSource+0x28>)
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008322:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008326:	4905      	ldr	r1, [pc, #20]	; (800833c <LL_RCC_SetFDCANClockSource+0x28>)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40021000 	.word	0x40021000

08008340 <STRHAL_CAN_Init_GPIO>:
{ [STRHAL_FDCAN1] =
{ .can = FDCAN1, .can_ram = FDCAN1_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 }, [STRHAL_FDCAN2] =
{ .can = FDCAN2, .can_ram = FDCAN2_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 } };

static void STRHAL_CAN_Init_GPIO(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8008346:	463b      	mov	r3, r7
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	605a      	str	r2, [r3, #4]
 800834e:	609a      	str	r2, [r3, #8]
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	611a      	str	r2, [r3, #16]
 8008354:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8008356:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800835a:	f7ff ffdb 	bl	8008314 <LL_RCC_SetFDCANClockSource>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_FDCAN);
 800835e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8008362:	f7ff ffbf 	bl	80082e4 <LL_APB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008366:	2001      	movs	r0, #1
 8008368:	f7ff ffa4 	bl	80082b4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800836c:	2002      	movs	r0, #2
 800836e:	f7ff ffa1 	bl	80082b4 <LL_AHB2_GRP1_EnableClock>

	//FDCAN1 GPIO Configuration
	//PA11     ------> FDCAN1_RX
	//PA12     ------> FDCAN1_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_11 | LL_GPIO_PIN_12;
 8008372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008376:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008378:	2302      	movs	r3, #2
 800837a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008380:	2300      	movs	r3, #0
 8008382:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008384:	2303      	movs	r3, #3
 8008386:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8008388:	2309      	movs	r3, #9
 800838a:	617b      	str	r3, [r7, #20]

	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800838c:	463b      	mov	r3, r7
 800838e:	4619      	mov	r1, r3
 8008390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008394:	f7fd fc0b 	bl	8005bae <LL_GPIO_Init>

	//FDCAN2 GPIO Configuration
	//PB5     ------> FDCAN2_RX
	//PB6     ------> FDCAN2_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_6;
 8008398:	2360      	movs	r3, #96	; 0x60
 800839a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800839c:	2302      	movs	r3, #2
 800839e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80083a4:	2300      	movs	r3, #0
 80083a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80083a8:	2303      	movs	r3, #3
 80083aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 80083ac:	2309      	movs	r3, #9
 80083ae:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083b0:	463b      	mov	r3, r7
 80083b2:	4619      	mov	r1, r3
 80083b4:	4803      	ldr	r0, [pc, #12]	; (80083c4 <STRHAL_CAN_Init_GPIO+0x84>)
 80083b6:	f7fd fbfa 	bl	8005bae <LL_GPIO_Init>

}
 80083ba:	bf00      	nop
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	48000400 	.word	0x48000400

080083c8 <STRHAL_CAN_Instance_Init>:

int STRHAL_CAN_Instance_Init(STRHAL_FDCAN_Id_t fdcan_id)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d902      	bls.n	80083de <STRHAL_CAN_Instance_Init+0x16>
		return -1;
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083dc:	e0e9      	b.n	80085b2 <STRHAL_CAN_Instance_Init+0x1ea>

	_fdcans[fdcan_id].state = STRHAL_CAN_STATE_INITIALISING;
 80083de:	79fa      	ldrb	r2, [r7, #7]
 80083e0:	4976      	ldr	r1, [pc, #472]	; (80085bc <STRHAL_CAN_Instance_Init+0x1f4>)
 80083e2:	4613      	mov	r3, r2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	440b      	add	r3, r1
 80083ec:	3308      	adds	r3, #8
 80083ee:	2201      	movs	r2, #1
 80083f0:	701a      	strb	r2, [r3, #0]

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 80083f2:	79fa      	ldrb	r2, [r7, #7]
 80083f4:	4971      	ldr	r1, [pc, #452]	; (80085bc <STRHAL_CAN_Instance_Init+0x1f4>)
 80083f6:	4613      	mov	r3, r2
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4413      	add	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	440b      	add	r3, r1
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60bb      	str	r3, [r7, #8]
	//Can_Message_RAM *can_ram = handles[can_handle_index].can_ram;
	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8008404:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8008408:	f7ff ff84 	bl	8008314 <LL_RCC_SetFDCANClockSource>

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_CSR);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f023 0210 	bic.w	r2, r3, #16
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	619a      	str	r2, [r3, #24]

	uint32_t tot = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

	// Check Sleep mode acknowledge
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800841c:	e009      	b.n	8008432 <STRHAL_CAN_Instance_Init+0x6a>
	{
		tot++;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3301      	adds	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4a66      	ldr	r2, [pc, #408]	; (80085c0 <STRHAL_CAN_Instance_Init+0x1f8>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d902      	bls.n	8008432 <STRHAL_CAN_Instance_Init+0x6a>
			return -1;
 800842c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008430:	e0bf      	b.n	80085b2 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b08      	cmp	r3, #8
 800843c:	d0ef      	beq.n	800841e <STRHAL_CAN_Instance_Init+0x56>
	}

	SET_BIT(can->CCCR, FDCAN_CCCR_INIT);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f043 0201 	orr.w	r2, r3, #1
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	619a      	str	r2, [r3, #24]

	// Wait until the INIT bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 800844a:	e009      	b.n	8008460 <STRHAL_CAN_Instance_Init+0x98>
	{
		tot++;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3301      	adds	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4a5a      	ldr	r2, [pc, #360]	; (80085c0 <STRHAL_CAN_Instance_Init+0x1f8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d902      	bls.n	8008460 <STRHAL_CAN_Instance_Init+0x98>
			return -1;
 800845a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800845e:	e0a8      	b.n	80085b2 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0ef      	beq.n	800844c <STRHAL_CAN_Instance_Init+0x84>
	}

	// Enable configuration change
	SET_BIT(can->CCCR, FDCAN_CCCR_CCE);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f043 0202 	orr.w	r2, r3, #2
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	619a      	str	r2, [r3, #24]
	// Wait until the CCE bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8008478:	e009      	b.n	800848e <STRHAL_CAN_Instance_Init+0xc6>
	{
		tot++;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3301      	adds	r3, #1
 800847e:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4a4f      	ldr	r2, [pc, #316]	; (80085c0 <STRHAL_CAN_Instance_Init+0x1f8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d902      	bls.n	800848e <STRHAL_CAN_Instance_Init+0xc6>
			return -1;
 8008488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800848c:	e091      	b.n	80085b2 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0ef      	beq.n	800847a <STRHAL_CAN_Instance_Init+0xb2>
	}

	//SET_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Disabled
	CLEAR_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Enabled
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_TXP);  //transmit pause Disabled
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_CCCR_PXHD); //Protocol Exception Handling  Disabled
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_FRAME_FD_BRS); //FD mode with BitRate Switching
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	f023 02a4 	bic.w	r2, r3, #164	; 0xa4
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(can->TEST, FDCAN_TEST_LBCK);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f023 0210 	bic.w	r2, r3, #16
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	611a      	str	r2, [r3, #16]

	//if(fdcan_id == STRHAL_FDCAN1) { // TODO find out why this is here - it is here because the FDCAN_CONFIG reg needs only to be set once
	MODIFY_REG(FDCAN_CONFIG->CKDIV, FDCAN_CKDIV_PDIV, FDCAN_CLOCK_DIV2);
 80084e2:	4b38      	ldr	r3, [pc, #224]	; (80085c4 <STRHAL_CAN_Instance_Init+0x1fc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f023 030f 	bic.w	r3, r3, #15
 80084ea:	4a36      	ldr	r2, [pc, #216]	; (80085c4 <STRHAL_CAN_Instance_Init+0x1fc>)
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	6013      	str	r3, [r2, #0]
	//}

	// Set the nominal bit timing register
	can->NBTP = ((((uint32_t) FDCAN_NOMINAL_SYNC_JUMP_WIDTH - 1U) << FDCAN_NBTP_NSJW_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_1 - 1U) << FDCAN_NBTP_NTSEG1_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_2 - 1U) << FDCAN_NBTP_NTSEG2_Pos) | (((uint32_t) FDCAN_NOMINAL_PRESCALER - 1U) << FDCAN_NBTP_NBRP_Pos));
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	4a34      	ldr	r2, [pc, #208]	; (80085c8 <STRHAL_CAN_Instance_Init+0x200>)
 80084f6:	61da      	str	r2, [r3, #28]

	// Bit Rate Switching Enable
	can->DBTP = ((((uint32_t) FDCAN_DATA_SYNC_JUMP_WIDTH - 1U) << FDCAN_DBTP_DSJW_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_1 - 1U) << FDCAN_DBTP_DTSEG1_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_2 - 1U) << FDCAN_DBTP_DTSEG2_Pos) | (((uint32_t) FDCAN_DATA_PRESCALER - 1U) << FDCAN_DBTP_DBRP_Pos));
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4a34      	ldr	r2, [pc, #208]	; (80085cc <STRHAL_CAN_Instance_Init+0x204>)
 80084fc:	60da      	str	r2, [r3, #12]

	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSS, (STRHAL_CAN_STD_FILTER_NUMBER << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSE, (STRHAL_CAN_EXT_FILTER_NUMBER << FDCAN_RXGFC_LSE_Pos)); // Extended filter elements number
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008514:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F0OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F0OM_Pos)); // FIFO 0 operation mode
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008524:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F1OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F1OM_Pos)); // FIFO 1 operation mode
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFS, (FDCAN_REJECT << FDCAN_RXGFC_ANFS_Pos)); // Accept Non-matching Frames Standard
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008544:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008548:	f043 0220 	orr.w	r2, r3, #32
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFE, (FDCAN_REJECT << FDCAN_RXGFC_ANFE_Pos)); // Accept Non-matching Frames Extended
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008558:	f023 030c 	bic.w	r3, r3, #12
 800855c:	f043 0208 	orr.w	r2, r3, #8
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFS, (FDCAN_FILTER_REMOTE << FDCAN_RXGFC_RRFS_Pos)); // Reject Remote Frames Standard
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856c:	f023 0202 	bic.w	r2, r3, #2
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFE, (FDCAN_REJECT_REMOTE << FDCAN_RXGFC_RRFE_Pos)); // Reject Remote Frames Extended
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800857c:	f043 0201 	orr.w	r2, r3, #1
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_BIT(can->TXBC, FDCAN_TXBC_TFQM); // Tx FIFO/Queue Mode
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800858c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//Config TxDelayCompensation
	can->TDCR = ((FDCAN_TDC_FILTER << FDCAN_TDCR_TDCF_Pos) | (FDCAN_TDC_OFFSET << FDCAN_TDCR_TDCO_Pos));
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f240 5206 	movw	r2, #1286	; 0x506
 800859c:	649a      	str	r2, [r3, #72]	; 0x48

	// Enable transmitter delay compensation
	SET_BIT(can->DBTP, FDCAN_DBTP_TDC);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	60da      	str	r2, [r3, #12]

	LL_mDelay(100);
 80085aa:	2064      	movs	r0, #100	; 0x64
 80085ac:	f7fe fca0 	bl	8006ef0 <LL_mDelay>

	return 0;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000004 	.word	0x20000004
 80085c0:	00f42400 	.word	0x00f42400
 80085c4:	40006500 	.word	0x40006500
 80085c8:	0001160f 	.word	0x0001160f
 80085cc:	00010611 	.word	0x00010611

080085d0 <STRHAL_CAN_Subscribe>:

int STRHAL_CAN_Subscribe(STRHAL_FDCAN_Id_t fdcan_id, STRHAL_FDCAN_Rx_Id_t rx_id, STRHAL_FDCAN_Filter_t *filter, uint8_t n, STRHAL_CAN_Receptor_t receptor)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	603a      	str	r2, [r7, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	71fb      	strb	r3, [r7, #7]
 80085de:	460b      	mov	r3, r1
 80085e0:	71bb      	strb	r3, [r7, #6]
 80085e2:	4613      	mov	r3, r2
 80085e4:	717b      	strb	r3, [r7, #5]
	/* Error handling for user inputs */
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN) // invalid fdcan instance
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d902      	bls.n	80085f2 <STRHAL_CAN_Subscribe+0x22>
		return -1;
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085f0:	e0bd      	b.n	800876e <STRHAL_CAN_Subscribe+0x19e>

	STRHAL_CAN_Handle_t *fdcan = &_fdcans[fdcan_id];
 80085f2:	79fa      	ldrb	r2, [r7, #7]
 80085f4:	4613      	mov	r3, r2
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	4413      	add	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4a5f      	ldr	r2, [pc, #380]	; (800877c <STRHAL_CAN_Subscribe+0x1ac>)
 80085fe:	4413      	add	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
	if (fdcan->state != STRHAL_CAN_STATE_INITIALISING)	// fdcan not in init mode (Subscribe called in wrong order)
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	7a1b      	ldrb	r3, [r3, #8]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d002      	beq.n	8008612 <STRHAL_CAN_Subscribe+0x42>
		return -1;
 800860c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008610:	e0ad      	b.n	800876e <STRHAL_CAN_Subscribe+0x19e>

	if (filter == NULL || receptor == NULL) // Nullptr check
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <STRHAL_CAN_Subscribe+0x4e>
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <STRHAL_CAN_Subscribe+0x52>
		return 0;
 800861e:	2300      	movs	r3, #0
 8008620:	e0a5      	b.n	800876e <STRHAL_CAN_Subscribe+0x19e>

	if (n > STRHAL_CAN_RAM_N_FILTER - fdcan->filter_n) // Correct Filter Nbr
 8008622:	797a      	ldrb	r2, [r7, #5]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	7d1b      	ldrb	r3, [r3, #20]
 8008628:	f1c3 031c 	rsb	r3, r3, #28
 800862c:	429a      	cmp	r2, r3
 800862e:	dd04      	ble.n	800863a <STRHAL_CAN_Subscribe+0x6a>
		n = fdcan->filter_n - n;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	7d1a      	ldrb	r2, [r3, #20]
 8008634:	797b      	ldrb	r3, [r7, #5]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	717b      	strb	r3, [r7, #5]

	if (fdcan->fifo_sub_state & (1U << rx_id)) // Already subscribed to this fifo
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	7d5b      	ldrb	r3, [r3, #21]
 800863e:	461a      	mov	r2, r3
 8008640:	79bb      	ldrb	r3, [r7, #6]
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <STRHAL_CAN_Subscribe+0x84>
		return -1;
 800864e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008652:	e08c      	b.n	800876e <STRHAL_CAN_Subscribe+0x19e>

	Can_Message_RAM *can_ram = fdcan->can_ram;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	60fb      	str	r3, [r7, #12]

	uint32_t sfec;

	switch (rx_id)
 800865a:	79bb      	ldrb	r3, [r7, #6]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <STRHAL_CAN_Subscribe+0x96>
 8008660:	2b01      	cmp	r3, #1
 8008662:	d010      	beq.n	8008686 <STRHAL_CAN_Subscribe+0xb6>
 8008664:	e01b      	b.n	800869e <STRHAL_CAN_Subscribe+0xce>
	{
		case STRHAL_FDCAN_RX0:
			fdcan->rxReceptors[0] = receptor;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	6a3a      	ldr	r2, [r7, #32]
 800866a:	60da      	str	r2, [r3, #12]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX0;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	7d5b      	ldrb	r3, [r3, #21]
 8008670:	f043 0301 	orr.w	r3, r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO0;
 800867a:	2301      	movs	r3, #1
 800867c:	60bb      	str	r3, [r7, #8]
			break;
 800867e:	bf00      	nop
		default:
			return -1;
	}

	uint8_t i;
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8008680:	2300      	movs	r3, #0
 8008682:	75fb      	strb	r3, [r7, #23]
 8008684:	e05f      	b.n	8008746 <STRHAL_CAN_Subscribe+0x176>
			fdcan->rxReceptors[1] = receptor;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	6a3a      	ldr	r2, [r7, #32]
 800868a:	611a      	str	r2, [r3, #16]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX1;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	7d5b      	ldrb	r3, [r3, #21]
 8008690:	f043 0302 	orr.w	r3, r3, #2
 8008694:	b2da      	uxtb	r2, r3
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO1;
 800869a:	2302      	movs	r3, #2
 800869c:	60bb      	str	r3, [r7, #8]
			return -1;
 800869e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086a2:	e064      	b.n	800876e <STRHAL_CAN_Subscribe+0x19e>
	{
		can_ram->std_filters[i].S0.bit.SFEC = sfec;
 80086a4:	7df9      	ldrb	r1, [r7, #23]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	b2d8      	uxtb	r0, r3
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086b4:	f360 63dd 	bfi	r3, r0, #27, #3
 80086b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID1 = filter[i].value_id1;
 80086bc:	7dfa      	ldrb	r2, [r7, #23]
 80086be:	4613      	mov	r3, r2
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	461a      	mov	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	4413      	add	r3, r2
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	7df9      	ldrb	r1, [r7, #23]
 80086d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086d4:	b298      	uxth	r0, r3
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086dc:	f360 431a 	bfi	r3, r0, #16, #11
 80086e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID2 = filter[i].mask_id2;
 80086e4:	7dfa      	ldrb	r2, [r7, #23]
 80086e6:	4613      	mov	r3, r2
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	461a      	mov	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	4413      	add	r3, r2
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	7df9      	ldrb	r1, [r7, #23]
 80086f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086fc:	b298      	uxth	r0, r3
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008704:	f360 030a 	bfi	r3, r0, #0, #11
 8008708:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFT = filter[i].type;
 800870c:	7dfa      	ldrb	r2, [r7, #23]
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	461a      	mov	r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	4413      	add	r3, r2
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	7df9      	ldrb	r1, [r7, #23]
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	b2d8      	uxtb	r0, r3
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800872c:	f360 739f 	bfi	r3, r0, #30, #2
 8008730:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	3301      	adds	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	7d1b      	ldrb	r3, [r3, #20]
 800873e:	3301      	adds	r3, #1
 8008740:	b2da      	uxtb	r2, r3
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	751a      	strb	r2, [r3, #20]
 8008746:	7dfa      	ldrb	r2, [r7, #23]
 8008748:	797b      	ldrb	r3, [r7, #5]
 800874a:	429a      	cmp	r2, r3
 800874c:	d3aa      	bcc.n	80086a4 <STRHAL_CAN_Subscribe+0xd4>
	}
	MODIFY_REG(fdcan->can->RXGFC, FDCAN_RXGFC_LSS, (fdcan->filter_n << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008756:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	7d1b      	ldrb	r3, [r3, #20]
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	4619      	mov	r1, r3
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return n;
 800876c:	797b      	ldrb	r3, [r7, #5]
}
 800876e:	4618      	mov	r0, r3
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000004 	.word	0x20000004

08008780 <STRHAL_CAN_Init>:

STRHAL_Oof_t STRHAL_CAN_Init()
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
	STRHAL_Oof_t status = STRHAL_NOICE;
 8008786:	2300      	movs	r3, #0
 8008788:	71fb      	strb	r3, [r7, #7]
	STRHAL_CAN_Init_GPIO();
 800878a:	f7ff fdd9 	bl	8008340 <STRHAL_CAN_Init_GPIO>

	return status;
 800878e:	79fb      	ldrb	r3, [r7, #7]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <STRHAL_CAN_Send>:
	*rxfXA = i & 0x7;
	return n;
}

int32_t STRHAL_CAN_Send(STRHAL_FDCAN_Id_t fdcan_id, uint32_t id, const uint8_t *data, uint32_t n)
{
 8008798:	b480      	push	{r7}
 800879a:	b08b      	sub	sp, #44	; 0x2c
 800879c:	af00      	add	r7, sp, #0
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d902      	bls.n	80087b4 <STRHAL_CAN_Send+0x1c>
		return -1;
 80087ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087b2:	e0b8      	b.n	8008926 <STRHAL_CAN_Send+0x18e>

	if (n == 0)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <STRHAL_CAN_Send+0x26>
		return 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e0b3      	b.n	8008926 <STRHAL_CAN_Send+0x18e>

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 80087be:	7bfa      	ldrb	r2, [r7, #15]
 80087c0:	495c      	ldr	r1, [pc, #368]	; (8008934 <STRHAL_CAN_Send+0x19c>)
 80087c2:	4613      	mov	r3, r2
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4413      	add	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	440b      	add	r3, r1
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	61fb      	str	r3, [r7, #28]
	Can_Message_RAM *can_ram = _fdcans[fdcan_id].can_ram;
 80087d0:	7bfa      	ldrb	r2, [r7, #15]
 80087d2:	4958      	ldr	r1, [pc, #352]	; (8008934 <STRHAL_CAN_Send+0x19c>)
 80087d4:	4613      	mov	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4413      	add	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	440b      	add	r3, r1
 80087de:	3304      	adds	r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	61bb      	str	r3, [r7, #24]

	if (!(can->TXFQS & FDCAN_TXFQS_TFFL))
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <STRHAL_CAN_Send+0x60>
		return -1;
 80087f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087f6:	e096      	b.n	8008926 <STRHAL_CAN_Send+0x18e>

	if (n > FDCAN_ELMTS_ARRAY_SIZE)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d901      	bls.n	8008802 <STRHAL_CAN_Send+0x6a>
		n = FDCAN_ELMTS_ARRAY_SIZE;
 80087fe:	2340      	movs	r3, #64	; 0x40
 8008800:	603b      	str	r3, [r7, #0]

	uint8_t i = ((can->TXFQS & FDCAN_TXFQS_TFQPI_Msk) >> FDCAN_TXFQS_TFQPI_Pos);
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008808:	0c1b      	lsrs	r3, r3, #16
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	75fb      	strb	r3, [r7, #23]

	Can_Tx_Element *frame = &can_ram->tx_buffer[i];
 8008812:	7dfa      	ldrb	r2, [r7, #23]
 8008814:	4613      	mov	r3, r2
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	4413      	add	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	4413      	add	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
	frame->T0.bit.XTD = 0;
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	6813      	ldr	r3, [r2, #0]
 800882a:	f36f 739e 	bfc	r3, #30, #1
 800882e:	6013      	str	r3, [r2, #0]
	frame->T0.bit.ID = id << 18;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	049b      	lsls	r3, r3, #18
 8008834:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	6813      	ldr	r3, [r2, #0]
 800883c:	f361 031c 	bfi	r3, r1, #0, #29
 8008840:	6013      	str	r3, [r2, #0]
	frame->T0.bit.RTR = 0;
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	6813      	ldr	r3, [r2, #0]
 8008846:	f36f 735d 	bfc	r3, #29, #1
 800884a:	6013      	str	r3, [r2, #0]
	frame->T1.bit.FDF = 1;
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	6853      	ldr	r3, [r2, #4]
 8008850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008854:	6053      	str	r3, [r2, #4]
	frame->T1.bit.BRS = 1;
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	6853      	ldr	r3, [r2, #4]
 800885a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800885e:	6053      	str	r3, [r2, #4]
	frame->T1.bit.DLC = Can_LengthToDlc[n];
 8008860:	4a35      	ldr	r2, [pc, #212]	; (8008938 <STRHAL_CAN_Send+0x1a0>)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	b2d9      	uxtb	r1, r3
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	6853      	ldr	r3, [r2, #4]
 8008872:	f361 4313 	bfi	r3, r1, #16, #4
 8008876:	6053      	str	r3, [r2, #4]
	frame->T1.bit.EFCC = 0;
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	6853      	ldr	r3, [r2, #4]
 800887c:	f36f 53d7 	bfc	r3, #23, #1
 8008880:	6053      	str	r3, [r2, #4]
	frame->T1.bit.MM = 0;
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	6853      	ldr	r3, [r2, #4]
 8008886:	f36f 631f 	bfc	r3, #24, #8
 800888a:	6053      	str	r3, [r2, #4]
	/*if(frame->T0.bit.ID == 0 || frame->T1.bit.DLC == 0) {
	 uint8_t temp = 1;
	 (void) temp;
	 }*/

	uint32_t j = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t c = 0; c < n; c += 4)
 8008890:	2300      	movs	r3, #0
 8008892:	623b      	str	r3, [r7, #32]
 8008894:	e025      	b.n	80088e2 <STRHAL_CAN_Send+0x14a>
		frame->data.word[j++] = data[c] | data[c + 1] << 8 | data[c + 2] << 16 | data[c + 3] << 24;
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	4413      	add	r3, r2
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	4619      	mov	r1, r3
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	3301      	adds	r3, #1
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4413      	add	r3, r2
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	ea41 0203 	orr.w	r2, r1, r3
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	3302      	adds	r3, #2
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	440b      	add	r3, r1
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	431a      	orrs	r2, r3
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	3303      	adds	r3, #3
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	440b      	add	r3, r1
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	061b      	lsls	r3, r3, #24
 80088ca:	ea42 0103 	orr.w	r1, r2, r3
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	627a      	str	r2, [r7, #36]	; 0x24
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	3302      	adds	r3, #2
 80088d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t c = 0; c < n; c += 4)
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	3304      	adds	r3, #4
 80088e0:	623b      	str	r3, [r7, #32]
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d3d5      	bcc.n	8008896 <STRHAL_CAN_Send+0xfe>
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 80088ea:	e007      	b.n	80088fc <STRHAL_CAN_Send+0x164>
		frame->data.word[j++] = 0;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	627a      	str	r2, [r7, #36]	; 0x24
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	3302      	adds	r3, #2
 80088f6:	2100      	movs	r1, #0
 80088f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 80088fc:	4a0e      	ldr	r2, [pc, #56]	; (8008938 <STRHAL_CAN_Send+0x1a0>)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008904:	4a0d      	ldr	r2, [pc, #52]	; (800893c <STRHAL_CAN_Send+0x1a4>)
 8008906:	5cd3      	ldrb	r3, [r2, r3]
 8008908:	089b      	lsrs	r3, r3, #2
 800890a:	b2db      	uxtb	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	4293      	cmp	r3, r2
 8008912:	d3eb      	bcc.n	80088ec <STRHAL_CAN_Send+0x154>

	can->TXBAR = (1 << i);
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2201      	movs	r2, #1
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	461a      	mov	r2, r3
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	return n;
 8008924:	683b      	ldr	r3, [r7, #0]
}
 8008926:	4618      	mov	r0, r3
 8008928:	372c      	adds	r7, #44	; 0x2c
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000004 	.word	0x20000004
 8008938:	0800be74 	.word	0x0800be74
 800893c:	0800be64 	.word	0x0800be64

08008940 <STRHAL_CAN_Run>:

void STRHAL_CAN_Run()
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
	// End initialisation - start FDCANs
	STRHAL_CAN_Handle_t *fdcan1 = &_fdcans[STRHAL_FDCAN1];
 8008946:	4b55      	ldr	r3, [pc, #340]	; (8008a9c <STRHAL_CAN_Run+0x15c>)
 8008948:	607b      	str	r3, [r7, #4]
	STRHAL_CAN_Handle_t *fdcan2 = &_fdcans[STRHAL_FDCAN2];
 800894a:	4b55      	ldr	r3, [pc, #340]	; (8008aa0 <STRHAL_CAN_Run+0x160>)
 800894c:	603b      	str	r3, [r7, #0]
	if (fdcan1->state == STRHAL_CAN_STATE_INITIALISING)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7a1b      	ldrb	r3, [r3, #8]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b01      	cmp	r3, #1
 8008956:	d14b      	bne.n	80089f0 <STRHAL_CAN_Run+0xb0>
	{
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7d5b      	ldrb	r3, [r3, #21]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d011      	beq.n	8008988 <STRHAL_CAN_Run+0x48>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO0);
 8008964:	4b4f      	ldr	r3, [pc, #316]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 8008966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008968:	4a4e      	ldr	r2, [pc, #312]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 800896a:	f023 0301 	bic.w	r3, r3, #1
 800896e:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 8008970:	4b4c      	ldr	r3, [pc, #304]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 8008972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008974:	4a4b      	ldr	r2, [pc, #300]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF0NE);
 800897c:	4b49      	ldr	r3, [pc, #292]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 800897e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008980:	4a48      	ldr	r2, [pc, #288]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	7d5b      	ldrb	r3, [r3, #21]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d011      	beq.n	80089b8 <STRHAL_CAN_Run+0x78>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO1);
 8008994:	4b43      	ldr	r3, [pc, #268]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 8008996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008998:	4a42      	ldr	r2, [pc, #264]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 800899a:	f023 0302 	bic.w	r3, r3, #2
 800899e:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 80089a0:	4b40      	ldr	r3, [pc, #256]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 80089a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a4:	4a3f      	ldr	r2, [pc, #252]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF1NE);
 80089ac:	4b3d      	ldr	r3, [pc, #244]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 80089ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b0:	4a3c      	ldr	r2, [pc, #240]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 80089b2:	f043 0308 	orr.w	r3, r3, #8
 80089b6:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN1_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 1));
 80089b8:	f7ff fbf2 	bl	80081a0 <__NVIC_GetPriorityGrouping>
 80089bc:	4603      	mov	r3, r0
 80089be:	2201      	movs	r2, #1
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fc42 	bl	800824c <NVIC_EncodePriority>
 80089c8:	4603      	mov	r3, r0
 80089ca:	4619      	mov	r1, r3
 80089cc:	2015      	movs	r0, #21
 80089ce:	f7ff fc13 	bl	80081f8 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80089d2:	2015      	movs	r0, #21
 80089d4:	f7ff fbf2 	bl	80081bc <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN1->CCCR, FDCAN_CCCR_INIT);
 80089d8:	4b32      	ldr	r3, [pc, #200]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	4a31      	ldr	r2, [pc, #196]	; (8008aa4 <STRHAL_CAN_Run+0x164>)
 80089de:	f023 0301 	bic.w	r3, r3, #1
 80089e2:	6193      	str	r3, [r2, #24]

		_fdcans[STRHAL_FDCAN1].state = STRHAL_CAN_STATE_RUNNING;
 80089e4:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <STRHAL_CAN_Run+0x15c>)
 80089e6:	2202      	movs	r2, #2
 80089e8:	721a      	strb	r2, [r3, #8]
		LL_mDelay(100);
 80089ea:	2064      	movs	r0, #100	; 0x64
 80089ec:	f7fe fa80 	bl	8006ef0 <LL_mDelay>
	}
	if (fdcan2->state == STRHAL_CAN_STATE_INITIALISING)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	7a1b      	ldrb	r3, [r3, #8]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d14c      	bne.n	8008a94 <STRHAL_CAN_Run+0x154>
	{
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	7d5b      	ldrb	r3, [r3, #21]
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d011      	beq.n	8008a2a <STRHAL_CAN_Run+0xea>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO0);
 8008a06:	4b28      	ldr	r3, [pc, #160]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	4a27      	ldr	r2, [pc, #156]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a0c:	f023 0301 	bic.w	r3, r3, #1
 8008a10:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 8008a12:	4b25      	ldr	r3, [pc, #148]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a16:	4a24      	ldr	r2, [pc, #144]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a18:	f043 0301 	orr.w	r3, r3, #1
 8008a1c:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF0NE);
 8008a1e:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a22:	4a21      	ldr	r2, [pc, #132]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a24:	f043 0301 	orr.w	r3, r3, #1
 8008a28:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	7d5b      	ldrb	r3, [r3, #21]
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d011      	beq.n	8008a5a <STRHAL_CAN_Run+0x11a>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO1);
 8008a36:	4b1c      	ldr	r3, [pc, #112]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3a:	4a1b      	ldr	r2, [pc, #108]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a3c:	f023 0302 	bic.w	r3, r3, #2
 8008a40:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 8008a42:	4b19      	ldr	r3, [pc, #100]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a48:	f043 0301 	orr.w	r3, r3, #1
 8008a4c:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF1NE);
 8008a4e:	4b16      	ldr	r3, [pc, #88]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a54:	f043 0308 	orr.w	r3, r3, #8
 8008a58:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN2_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 2));
 8008a5a:	f7ff fba1 	bl	80081a0 <__NVIC_GetPriorityGrouping>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2202      	movs	r2, #2
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fbf1 	bl	800824c <NVIC_EncodePriority>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	2056      	movs	r0, #86	; 0x56
 8008a70:	f7ff fbc2 	bl	80081f8 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8008a74:	2056      	movs	r0, #86	; 0x56
 8008a76:	f7ff fba1 	bl	80081bc <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN2->CCCR, FDCAN_CCCR_INIT);
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	4a0a      	ldr	r2, [pc, #40]	; (8008aa8 <STRHAL_CAN_Run+0x168>)
 8008a80:	f023 0301 	bic.w	r3, r3, #1
 8008a84:	6193      	str	r3, [r2, #24]
		_fdcans[STRHAL_FDCAN2].state = STRHAL_CAN_STATE_RUNNING;
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <STRHAL_CAN_Run+0x15c>)
 8008a88:	2202      	movs	r2, #2
 8008a8a:	f883 2020 	strb.w	r2, [r3, #32]
		LL_mDelay(100);
 8008a8e:	2064      	movs	r0, #100	; 0x64
 8008a90:	f7fe fa2e 	bl	8006ef0 <LL_mDelay>
	}

}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000004 	.word	0x20000004
 8008aa0:	2000001c 	.word	0x2000001c
 8008aa4:	40006400 	.word	0x40006400
 8008aa8:	40006800 	.word	0x40006800

08008aac <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08c      	sub	sp, #48	; 0x30
 8008ab0:	af00      	add	r7, sp, #0
	if (FDCAN1->IR & FDCAN_IR_RF0N)
 8008ab2:	4b47      	ldr	r3, [pc, #284]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d03f      	beq.n	8008b3e <FDCAN1_IT0_IRQHandler+0x92>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF0N);
 8008abe:	4b44      	ldr	r3, [pc, #272]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac2:	4a43      	ldr	r2, [pc, #268]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008ac4:	f043 0301 	orr.w	r3, r3, #1
 8008ac8:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[0];
 8008aca:	4b42      	ldr	r3, [pc, #264]	; (8008bd4 <FDCAN1_IT0_IRQHandler+0x128>)
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 8008ad0:	4b40      	ldr	r3, [pc, #256]	; (8008bd4 <FDCAN1_IT0_IRQHandler+0x128>)
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN1->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 8008ad6:	4b3e      	ldr	r3, [pc, #248]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008adc:	0a1b      	lsrs	r3, r3, #8
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 0303 	and.w	r3, r3, #3
 8008ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 8008ae8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008aec:	4613      	mov	r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	4413      	add	r3, r2
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	33b0      	adds	r3, #176	; 0xb0
 8008af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008af8:	4413      	add	r3, r2
 8008afa:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8008b04:	149b      	asrs	r3, r3, #18
 8008b06:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	799b      	ldrb	r3, [r3, #6]
 8008b0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	4b30      	ldr	r3, [pc, #192]	; (8008bd8 <FDCAN1_IT0_IRQHandler+0x12c>)
 8008b16:	5c9b      	ldrb	r3, [r3, r2]
 8008b18:	61bb      	str	r3, [r7, #24]

		if (rec != NULL)
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <FDCAN1_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	f103 0108 	add.w	r1, r3, #8
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	1e9a      	subs	r2, r3, #2
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	69f8      	ldr	r0, [r7, #28]
 8008b2e:	4798      	blx	r3

		FDCAN1->RXF0A = i & 0x7;
 8008b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b34:	4a26      	ldr	r2, [pc, #152]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	}
	if (FDCAN1->IR & FDCAN_IR_RF1N)
 8008b3e:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d03d      	beq.n	8008bc6 <FDCAN1_IT0_IRQHandler+0x11a>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF1N);
 8008b4a:	4b21      	ldr	r3, [pc, #132]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4e:	4a20      	ldr	r2, [pc, #128]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[1];
 8008b56:	4b1f      	ldr	r3, [pc, #124]	; (8008bd4 <FDCAN1_IT0_IRQHandler+0x128>)
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 8008b5c:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <FDCAN1_IT0_IRQHandler+0x128>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN1->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 8008b62:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 8008b72:	7bfa      	ldrb	r2, [r7, #15]
 8008b74:	4613      	mov	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	4413      	add	r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8008b8e:	149b      	asrs	r3, r3, #18
 8008b90:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	799b      	ldrb	r3, [r3, #6]
 8008b96:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <FDCAN1_IT0_IRQHandler+0x12c>)
 8008ba0:	5c9b      	ldrb	r3, [r3, r2]
 8008ba2:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <FDCAN1_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f103 0108 	add.w	r1, r3, #8
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	1e9a      	subs	r2, r3, #2
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
		FDCAN1->RXF1A = i & 0x7;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	4a04      	ldr	r2, [pc, #16]	; (8008bd0 <FDCAN1_IT0_IRQHandler+0x124>)
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 8008bc6:	bf00      	nop
 8008bc8:	3730      	adds	r7, #48	; 0x30
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	40006400 	.word	0x40006400
 8008bd4:	20000004 	.word	0x20000004
 8008bd8:	0800be64 	.word	0x0800be64

08008bdc <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08c      	sub	sp, #48	; 0x30
 8008be0:	af00      	add	r7, sp, #0
	if (FDCAN2->IR & FDCAN_IR_RF0N)
 8008be2:	4b47      	ldr	r3, [pc, #284]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d03f      	beq.n	8008c6e <FDCAN2_IT0_IRQHandler+0x92>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF0N);
 8008bee:	4b44      	ldr	r3, [pc, #272]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf2:	4a43      	ldr	r2, [pc, #268]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008bf4:	f023 0301 	bic.w	r3, r3, #1
 8008bf8:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[0];
 8008bfa:	4b42      	ldr	r3, [pc, #264]	; (8008d04 <FDCAN2_IT0_IRQHandler+0x128>)
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 8008c00:	4b40      	ldr	r3, [pc, #256]	; (8008d04 <FDCAN2_IT0_IRQHandler+0x128>)
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN2->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 8008c06:	4b3e      	ldr	r3, [pc, #248]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0c:	0a1b      	lsrs	r3, r3, #8
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 8008c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	4413      	add	r3, r2
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	33b0      	adds	r3, #176	; 0xb0
 8008c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c28:	4413      	add	r3, r2
 8008c2a:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8008c34:	149b      	asrs	r3, r3, #18
 8008c36:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	799b      	ldrb	r3, [r3, #6]
 8008c3c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	4b30      	ldr	r3, [pc, #192]	; (8008d08 <FDCAN2_IT0_IRQHandler+0x12c>)
 8008c46:	5c9b      	ldrb	r3, [r3, r2]
 8008c48:	61bb      	str	r3, [r7, #24]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d007      	beq.n	8008c60 <FDCAN2_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	f103 0108 	add.w	r1, r3, #8
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	1e9a      	subs	r2, r3, #2
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	69f8      	ldr	r0, [r7, #28]
 8008c5e:	4798      	blx	r3

		FDCAN2->RXF0A = i & 0x7;
 8008c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c64:	4a26      	ldr	r2, [pc, #152]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	}
	if (FDCAN2->IR & FDCAN_IR_RF1N)
 8008c6e:	4b24      	ldr	r3, [pc, #144]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d03d      	beq.n	8008cf6 <FDCAN2_IT0_IRQHandler+0x11a>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF1N);
 8008c7a:	4b21      	ldr	r3, [pc, #132]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7e:	4a20      	ldr	r2, [pc, #128]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008c80:	f023 0308 	bic.w	r3, r3, #8
 8008c84:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[1];
 8008c86:	4b1f      	ldr	r3, [pc, #124]	; (8008d04 <FDCAN2_IT0_IRQHandler+0x128>)
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	; (8008d04 <FDCAN2_IT0_IRQHandler+0x128>)
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN2->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 8008c92:	4b1b      	ldr	r3, [pc, #108]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c98:	0a1b      	lsrs	r3, r3, #8
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 8008ca2:	7bfa      	ldrb	r2, [r7, #15]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8008cbe:	149b      	asrs	r3, r3, #18
 8008cc0:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	799b      	ldrb	r3, [r3, #6]
 8008cc6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <FDCAN2_IT0_IRQHandler+0x12c>)
 8008cd0:	5c9b      	ldrb	r3, [r3, r2]
 8008cd2:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <FDCAN2_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f103 0108 	add.w	r1, r3, #8
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	1e9a      	subs	r2, r3, #2
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	4798      	blx	r3
		FDCAN2->RXF1A = i & 0x7;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	4a04      	ldr	r2, [pc, #16]	; (8008d00 <FDCAN2_IT0_IRQHandler+0x124>)
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3730      	adds	r7, #48	; 0x30
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	40006800 	.word	0x40006800
 8008d04:	20000004 	.word	0x20000004
 8008d08:	0800be64 	.word	0x0800be64

08008d0c <STRHAL_Clock_Init>:
#include <STRHAL_Clock.h>

void STRHAL_Clock_Init()
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0

}
 8008d10:	bf00      	nop
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <LL_GPIO_ReadInputPort>:
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <LL_GPIO_ReadOutputPort>:
{
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695b      	ldr	r3, [r3, #20]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <LL_GPIO_SetOutputPin>:
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	619a      	str	r2, [r3, #24]
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <LL_GPIO_ResetOutputPin>:
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
	...

08008d84 <LL_AHB2_GRP1_EnableClock>:
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008d8c:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d90:	4907      	ldr	r1, [pc, #28]	; (8008db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008da2:	68fb      	ldr	r3, [r7, #12]
}
 8008da4:	bf00      	nop
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	40021000 	.word	0x40021000

08008db4 <STRHAL_GPIO_Init>:
#include <stm32g4xx_ll_gpio.h>
#include <stm32g4xx_ll_rcc.h>
#include <STRHAL_GPIO.h>

void STRHAL_GPIO_Init()
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8008db8:	2004      	movs	r0, #4
 8008dba:	f7ff ffe3 	bl	8008d84 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8008dbe:	2020      	movs	r0, #32
 8008dc0:	f7ff ffe0 	bl	8008d84 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008dc4:	2001      	movs	r0, #1
 8008dc6:	f7ff ffdd 	bl	8008d84 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8008dca:	2002      	movs	r0, #2
 8008dcc:	f7ff ffda 	bl	8008d84 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8008dd0:	2010      	movs	r0, #16
 8008dd2:	f7ff ffd7 	bl	8008d84 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8008dd6:	2008      	movs	r0, #8
 8008dd8:	f7ff ffd4 	bl	8008d84 <LL_AHB2_GRP1_EnableClock>
}
 8008ddc:	bf00      	nop
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <STRHAL_GPIO_SingleInit>:

// requires the type parameter and the gpio type to be the same TODO: find a better way to enforce that!
void STRHAL_GPIO_SingleInit(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Type_t type)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	791b      	ldrb	r3, [r3, #4]
 8008df0:	2b1f      	cmp	r3, #31
 8008df2:	d84d      	bhi.n	8008e90 <STRHAL_GPIO_SingleInit+0xb0>
		return;

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	605a      	str	r2, [r3, #4]
 8008dfe:	609a      	str	r2, [r3, #8]
 8008e00:	60da      	str	r2, [r3, #12]
 8008e02:	611a      	str	r2, [r3, #16]
 8008e04:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	791b      	ldrb	r3, [r3, #4]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	2301      	movs	r3, #1
 8008e12:	408b      	lsls	r3, r1
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f7ff ffa5 	bl	8008d66 <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = (1 << gpio->pin);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	791b      	ldrb	r3, [r3, #4]
 8008e20:	461a      	mov	r2, r3
 8008e22:	2301      	movs	r3, #1
 8008e24:	4093      	lsls	r3, r2
 8008e26:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	613b      	str	r3, [r7, #16]
	switch (type)
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d825      	bhi.n	8008e7e <STRHAL_GPIO_SingleInit+0x9e>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <STRHAL_GPIO_SingleInit+0x58>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e4d 	.word	0x08008e4d
 8008e3c:	08008e57 	.word	0x08008e57
 8008e40:	08008e61 	.word	0x08008e61
 8008e44:	08008e6b 	.word	0x08008e6b
 8008e48:	08008e75 	.word	0x08008e75
	{
		case STRHAL_GPIO_TYPE_OPP:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]
			break;
 8008e54:	e013      	b.n	8008e7e <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_OOD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008e56:	2301      	movs	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	617b      	str	r3, [r7, #20]
			break;
 8008e5e:	e00e      	b.n	8008e7e <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IHZ:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61bb      	str	r3, [r7, #24]
			break;
 8008e68:	e009      	b.n	8008e7e <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPU:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	61bb      	str	r3, [r7, #24]
			break;
 8008e72:	e004      	b.n	8008e7e <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	61bb      	str	r3, [r7, #24]
			break;
 8008e7c:	bf00      	nop
	}
	LL_GPIO_Init(gpio->port, &GPIO_InitStruct);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f107 0208 	add.w	r2, r7, #8
 8008e86:	4611      	mov	r1, r2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fc fe90 	bl	8005bae <LL_GPIO_Init>
 8008e8e:	e000      	b.n	8008e92 <STRHAL_GPIO_SingleInit+0xb2>
		return;
 8008e90:	bf00      	nop
	//gpio->type = type;
}
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <STRHAL_GPIO_Write>:
		STRHAL_GPIO_SingleInit(&gpios->gpios[i], type);
	}
}

inline void STRHAL_GPIO_Write(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Value_t value)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	791b      	ldrb	r3, [r3, #4]
 8008ea8:	2b1f      	cmp	r3, #31
 8008eaa:	d81a      	bhi.n	8008ee2 <STRHAL_GPIO_Write+0x4a>
		return;

	if (value == STRHAL_GPIO_VALUE_H)
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d10b      	bne.n	8008eca <STRHAL_GPIO_Write+0x32>
	{
		LL_GPIO_SetOutputPin(gpio->port, (1 << gpio->pin));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	791b      	ldrb	r3, [r3, #4]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	408b      	lsls	r3, r1
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7ff ff41 	bl	8008d4a <LL_GPIO_SetOutputPin>
 8008ec8:	e00c      	b.n	8008ee4 <STRHAL_GPIO_Write+0x4c>
	}
	else
	{
		LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	791b      	ldrb	r3, [r3, #4]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	408b      	lsls	r3, r1
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7ff ff43 	bl	8008d66 <LL_GPIO_ResetOutputPin>
 8008ee0:	e000      	b.n	8008ee4 <STRHAL_GPIO_Write+0x4c>
		return;
 8008ee2:	bf00      	nop
	}

}
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <STRHAL_GPIO_Read>:
	for (i = 0; i < gpios->n; ++i)
		STRHAL_GPIO_Write(&gpios->gpios[i], value);
}

STRHAL_GPIO_Value_t STRHAL_GPIO_Read(const STRHAL_GPIO_t *gpio)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
	if (gpio->pin > 0x1F)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	791b      	ldrb	r3, [r3, #4]
 8008ef6:	2b1f      	cmp	r3, #31
 8008ef8:	d901      	bls.n	8008efe <STRHAL_GPIO_Read+0x14>
		return STRHAL_GPIO_VALUE_L;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e010      	b.n	8008f20 <STRHAL_GPIO_Read+0x36>

	return (LL_GPIO_ReadInputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff ff09 	bl	8008d1a <LL_GPIO_ReadInputPort>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	791b      	ldrb	r3, [r3, #4]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	2301      	movs	r3, #1
 8008f12:	408b      	lsls	r3, r1
 8008f14:	4013      	ands	r3, r2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bf14      	ite	ne
 8008f1a:	2301      	movne	r3, #1
 8008f1c:	2300      	moveq	r3, #0
 8008f1e:	b2db      	uxtb	r3, r3
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <STRHAL_GPIO_ReadOutput>:

STRHAL_GPIO_Value_t STRHAL_GPIO_ReadOutput(const STRHAL_GPIO_t *gpio)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	if (gpio->pin > 0x1F)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	791b      	ldrb	r3, [r3, #4]
 8008f34:	2b1f      	cmp	r3, #31
 8008f36:	d901      	bls.n	8008f3c <STRHAL_GPIO_ReadOutput+0x14>
		return STRHAL_GPIO_VALUE_L;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e010      	b.n	8008f5e <STRHAL_GPIO_ReadOutput+0x36>

	return (LL_GPIO_ReadOutputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff fef6 	bl	8008d32 <LL_GPIO_ReadOutputPort>
 8008f46:	4602      	mov	r2, r0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	2301      	movs	r3, #1
 8008f50:	408b      	lsls	r3, r1
 8008f52:	4013      	ands	r3, r2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bf14      	ite	ne
 8008f58:	2301      	movne	r3, #1
 8008f5a:	2300      	moveq	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <LL_AHB2_GRP1_EnableClock>:
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008f70:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f74:	4907      	ldr	r1, [pc, #28]	; (8008f94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4013      	ands	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008f86:	68fb      	ldr	r3, [r7, #12]
}
 8008f88:	bf00      	nop
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	40021000 	.word	0x40021000

08008f98 <LL_APB2_GRP1_EnableClock>:
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8008fa0:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008fa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008fa4:	4907      	ldr	r1, [pc, #28]	; (8008fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008fae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	40021000 	.word	0x40021000

08008fc8 <LL_GPIO_SetPinMode>:
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b08b      	sub	sp, #44	; 0x2c
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	fa93 f3a3 	rbit	r3, r3
 8008fe2:	613b      	str	r3, [r7, #16]
  return result;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008fee:	2320      	movs	r3, #32
 8008ff0:	e003      	b.n	8008ffa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	fab3 f383 	clz	r3, r3
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	2103      	movs	r1, #3
 8008ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8009002:	43db      	mvns	r3, r3
 8009004:	401a      	ands	r2, r3
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	fa93 f3a3 	rbit	r3, r3
 8009010:	61fb      	str	r3, [r7, #28]
  return result;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800901c:	2320      	movs	r3, #32
 800901e:	e003      	b.n	8009028 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	fab3 f383 	clz	r3, r3
 8009026:	b2db      	uxtb	r3, r3
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	fa01 f303 	lsl.w	r3, r1, r3
 8009030:	431a      	orrs	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	372c      	adds	r7, #44	; 0x2c
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <LL_OPAMP_SetFunctionalMode>:
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_BIAS
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_IO1_BIAS
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetFunctionalMode(OPAMP_TypeDef *OPAMPx, uint32_t FunctionalMode)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
  /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode */
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_4 | OPAMP_CSR_PGGAIN_3 | OPAMP_CSR_VMSEL | OPAMP_CSR_CALON, FunctionalMode);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8009054:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	601a      	str	r2, [r3, #0]
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <LL_OPAMP_SetPGAGain>:
  *         @arg @ref LL_OPAMP_PGA_GAIN_32_OR_MINUS_31
  *         @arg @ref LL_OPAMP_PGA_GAIN_64_OR_MINUS_63
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetPGAGain(OPAMP_TypeDef *OPAMPx, uint32_t PGAGain)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f423 32e0 	bic.w	r2, r3, #114688	; 0x1c000
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	601a      	str	r2, [r3, #0]
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <LL_OPAMP_SetInputNonInverting>:
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_IO3
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_DAC
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputNonInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputNonInverting)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_VPSEL, InputNonInverting);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f023 020c 	bic.w	r2, r3, #12
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <LL_OPAMP_SetInputInverting>:
  *         @arg @ref LL_OPAMP_INPUT_INVERT_IO1
  *         @arg @ref LL_OPAMP_INPUT_INVERT_CONNECT_NO
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputInverting)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  /* Manage cases of OPAMP inverting input not connected (0x10 and 0x11)      */
  /* to not modify OPAMP mode follower or PGA.                                */
  /* Bit OPAMP_CSR_VMSEL_1 is set by OPAMP mode (follower, PGA). */
  MODIFY_REG(OPAMPx->CSR, (~(InputInverting >> 1)) & OPAMP_CSR_VMSEL_0, InputInverting);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	43db      	mvns	r3, r3
 80090cc:	f003 0320 	and.w	r3, r3, #32
 80090d0:	43db      	mvns	r3, r3
 80090d2:	401a      	ands	r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	601a      	str	r2, [r3, #0]
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <LL_OPAMP_SetInternalOutput>:
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_DISABLED
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <LL_OPAMP_Enable>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_Enable
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f043 0201 	orr.w	r2, r3, #1
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	601a      	str	r2, [r3, #0]
}
 8009122:	bf00      	nop
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <LL_OPAMP_IsEnabled>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_IsEnabled
  * @param  OPAMPx OPAMP instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_OPAMP_IsEnabled(OPAMP_TypeDef *OPAMPx)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN) == (OPAMP_CSR_OPAMPxEN)) ? 1UL : 0UL);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <LL_OPAMP_IsEnabled+0x18>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <LL_OPAMP_IsEnabled+0x1a>
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <STRHAL_OPAMP_Init>:
#include <STRHAL_OPAMP.h>

void STRHAL_OPAMP_Init()
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0

	// GPIO init
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8009158:	2004      	movs	r0, #4
 800915a:	f7ff ff05 	bl	8008f68 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800915e:	2020      	movs	r0, #32
 8009160:	f7ff ff02 	bl	8008f68 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8009164:	2001      	movs	r0, #1
 8009166:	f7ff feff 	bl	8008f68 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800916a:	2002      	movs	r0, #2
 800916c:	f7ff fefc 	bl	8008f68 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8009170:	2010      	movs	r0, #16
 8009172:	f7ff fef9 	bl	8008f68 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8009176:	2008      	movs	r0, #8
 8009178:	f7ff fef6 	bl	8008f68 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ANALOG);
 800917c:	2203      	movs	r2, #3
 800917e:	2180      	movs	r1, #128	; 0x80
 8009180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009184:	f7ff ff20 	bl	8008fc8 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8009188:	2203      	movs	r2, #3
 800918a:	2101      	movs	r1, #1
 800918c:	4819      	ldr	r0, [pc, #100]	; (80091f4 <STRHAL_OPAMP_Init+0xa0>)
 800918e:	f7ff ff1b 	bl	8008fc8 <LL_GPIO_SetPinMode>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8009192:	2001      	movs	r0, #1
 8009194:	f7ff ff00 	bl	8008f98 <LL_APB2_GRP1_EnableClock>

	LL_OPAMP_SetFunctionalMode(OPAMP2, LL_OPAMP_MODE_PGA);
 8009198:	2140      	movs	r1, #64	; 0x40
 800919a:	4817      	ldr	r0, [pc, #92]	; (80091f8 <STRHAL_OPAMP_Init+0xa4>)
 800919c:	f7ff ff51 	bl	8009042 <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP2, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 80091a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80091a4:	4814      	ldr	r0, [pc, #80]	; (80091f8 <STRHAL_OPAMP_Init+0xa4>)
 80091a6:	f7ff ff61 	bl	800906c <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP2, LL_OPAMP_INPUT_NONINVERT_IO0);
 80091aa:	2100      	movs	r1, #0
 80091ac:	4812      	ldr	r0, [pc, #72]	; (80091f8 <STRHAL_OPAMP_Init+0xa4>)
 80091ae:	f7ff ff70 	bl	8009092 <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP2, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 80091b2:	2140      	movs	r1, #64	; 0x40
 80091b4:	4810      	ldr	r0, [pc, #64]	; (80091f8 <STRHAL_OPAMP_Init+0xa4>)
 80091b6:	f7ff ff7f 	bl	80090b8 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP2, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 80091ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091be:	480e      	ldr	r0, [pc, #56]	; (80091f8 <STRHAL_OPAMP_Init+0xa4>)
 80091c0:	f7ff ff92 	bl	80090e8 <LL_OPAMP_SetInternalOutput>
	LL_OPAMP_SetFunctionalMode(OPAMP3, LL_OPAMP_MODE_PGA);
 80091c4:	2140      	movs	r1, #64	; 0x40
 80091c6:	480d      	ldr	r0, [pc, #52]	; (80091fc <STRHAL_OPAMP_Init+0xa8>)
 80091c8:	f7ff ff3b 	bl	8009042 <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP3, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 80091cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80091d0:	480a      	ldr	r0, [pc, #40]	; (80091fc <STRHAL_OPAMP_Init+0xa8>)
 80091d2:	f7ff ff4b 	bl	800906c <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP3, LL_OPAMP_INPUT_NONINVERT_IO0);
 80091d6:	2100      	movs	r1, #0
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <STRHAL_OPAMP_Init+0xa8>)
 80091da:	f7ff ff5a 	bl	8009092 <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP3, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 80091de:	2140      	movs	r1, #64	; 0x40
 80091e0:	4806      	ldr	r0, [pc, #24]	; (80091fc <STRHAL_OPAMP_Init+0xa8>)
 80091e2:	f7ff ff69 	bl	80090b8 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP3, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 80091e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091ea:	4804      	ldr	r0, [pc, #16]	; (80091fc <STRHAL_OPAMP_Init+0xa8>)
 80091ec:	f7ff ff7c 	bl	80090e8 <LL_OPAMP_SetInternalOutput>
}
 80091f0:	bf00      	nop
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	48000400 	.word	0x48000400
 80091f8:	40010304 	.word	0x40010304
 80091fc:	40010308 	.word	0x40010308

08009200 <STRHAL_OPAMP_Run>:

void STRHAL_OPAMP_Run()
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
	LL_OPAMP_Enable(OPAMP2);
 8009204:	480b      	ldr	r0, [pc, #44]	; (8009234 <STRHAL_OPAMP_Run+0x34>)
 8009206:	f7ff ff82 	bl	800910e <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP2));
 800920a:	bf00      	nop
 800920c:	4809      	ldr	r0, [pc, #36]	; (8009234 <STRHAL_OPAMP_Run+0x34>)
 800920e:	f7ff ff8e 	bl	800912e <LL_OPAMP_IsEnabled>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0f9      	beq.n	800920c <STRHAL_OPAMP_Run+0xc>
	LL_OPAMP_Enable(OPAMP3);
 8009218:	4807      	ldr	r0, [pc, #28]	; (8009238 <STRHAL_OPAMP_Run+0x38>)
 800921a:	f7ff ff78 	bl	800910e <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP3));
 800921e:	bf00      	nop
 8009220:	4805      	ldr	r0, [pc, #20]	; (8009238 <STRHAL_OPAMP_Run+0x38>)
 8009222:	f7ff ff84 	bl	800912e <LL_OPAMP_IsEnabled>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0f9      	beq.n	8009220 <STRHAL_OPAMP_Run+0x20>
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	40010304 	.word	0x40010304
 8009238:	40010308 	.word	0x40010308

0800923c <LL_AHB2_GRP1_EnableClock>:
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8009246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009248:	4907      	ldr	r1, [pc, #28]	; (8009268 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4313      	orrs	r3, r2
 800924e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8009252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4013      	ands	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800925a:	68fb      	ldr	r3, [r7, #12]
}
 800925c:	bf00      	nop
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	40021000 	.word	0x40021000

0800926c <LL_AHB3_GRP1_EnableClock>:
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009274:	4b08      	ldr	r3, [pc, #32]	; (8009298 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8009276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009278:	4907      	ldr	r1, [pc, #28]	; (8009298 <LL_AHB3_GRP1_EnableClock+0x2c>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4313      	orrs	r3, r2
 800927e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009280:	4b05      	ldr	r3, [pc, #20]	; (8009298 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8009282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4013      	ands	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800928a:	68fb      	ldr	r3, [r7, #12]
}
 800928c:	bf00      	nop
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	40021000 	.word	0x40021000

0800929c <_init_GPIO>:
static inline int _wait_for_status(uint32_t flag, uint16_t tot);
static inline int _wait_for_status_clear(uint32_t flag, uint16_t);
static inline void _clear_status(uint32_t flags);

static void _init_GPIO()
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80092a2:	2010      	movs	r0, #16
 80092a4:	f7ff ffca 	bl	800923c <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80092a8:	463b      	mov	r3, r7
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	605a      	str	r2, [r3, #4]
 80092b0:	609a      	str	r2, [r3, #8]
 80092b2:	60da      	str	r2, [r3, #12]
 80092b4:	611a      	str	r2, [r3, #16]
 80092b6:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80092b8:	2300      	movs	r3, #0
 80092ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80092c0:	2302      	movs	r3, #2
 80092c2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11 | LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 80092c4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80092c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80092ca:	2302      	movs	r3, #2
 80092cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 80092ce:	230a      	movs	r3, #10
 80092d0:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80092d2:	463b      	mov	r3, r7
 80092d4:	4619      	mov	r1, r3
 80092d6:	4803      	ldr	r0, [pc, #12]	; (80092e4 <_init_GPIO+0x48>)
 80092d8:	f7fc fc69 	bl	8005bae <LL_GPIO_Init>
}
 80092dc:	bf00      	nop
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	48001000 	.word	0x48001000

080092e8 <STRHAL_QSPI_Init>:

void STRHAL_QSPI_Init()
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_QSPI);
 80092ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80092f0:	f7ff ffbc 	bl	800926c <LL_AHB3_GRP1_EnableClock>
}
 80092f4:	bf00      	nop
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <STRHAL_QSPI_Flash_Init>:

int STRHAL_QSPI_Flash_Init(const STRHAL_QSPI_Config_t *config)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Reset();
 8009300:	f000 f848 	bl	8009394 <STRHAL_QSPI_Reset>

	_init_GPIO();
 8009304:	f7ff ffca 	bl	800929c <_init_GPIO>

	QUADSPI->CR |= STRHAL_QSPI_FIFO_THRESH << QUADSPI_CR_FTHRES_Pos;
 8009308:	4b21      	ldr	r3, [pc, #132]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 800930a:	4a21      	ldr	r2, [pc, #132]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6013      	str	r3, [r2, #0]

	if (_wait_for_status_clear(QUADSPI_SR_BUSY, 100) < 0)
 8009310:	2164      	movs	r1, #100	; 0x64
 8009312:	2020      	movs	r0, #32
 8009314:	f000 fa20 	bl	8009758 <_wait_for_status_clear>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	da02      	bge.n	8009324 <STRHAL_QSPI_Flash_Init+0x2c>
		return -1;
 800931e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009322:	e031      	b.n	8009388 <STRHAL_QSPI_Flash_Init+0x90>

	QUADSPI->CR |= config->psc << QUADSPI_CR_PRESCALER_Pos;
 8009324:	4b1a      	ldr	r3, [pc, #104]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8009330:	b2d2      	uxtb	r2, r2
 8009332:	0612      	lsls	r2, r2, #24
 8009334:	4611      	mov	r1, r2
 8009336:	4a16      	ldr	r2, [pc, #88]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 8009338:	430b      	orrs	r3, r1
 800933a:	6013      	str	r3, [r2, #0]
	QUADSPI->DCR |= config->flash_size << QUADSPI_DCR_FSIZE_Pos;
 800933c:	4b14      	ldr	r3, [pc, #80]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7852      	ldrb	r2, [r2, #1]
 8009344:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	0412      	lsls	r2, r2, #16
 800934c:	4611      	mov	r1, r2
 800934e:	4a10      	ldr	r2, [pc, #64]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 8009350:	430b      	orrs	r3, r1
 8009352:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->ncs_high_time << QUADSPI_DCR_CSHT_Pos;
 8009354:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	7852      	ldrb	r2, [r2, #1]
 800935c:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	0212      	lsls	r2, r2, #8
 8009364:	4611      	mov	r1, r2
 8009366:	4a0a      	ldr	r2, [pc, #40]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 8009368:	430b      	orrs	r3, r1
 800936a:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->clk_level << QUADSPI_DCR_CKMODE_Pos;
 800936c:	4b08      	ldr	r3, [pc, #32]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7892      	ldrb	r2, [r2, #2]
 8009374:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8009378:	b2d2      	uxtb	r2, r2
 800937a:	4611      	mov	r1, r2
 800937c:	4a04      	ldr	r2, [pc, #16]	; (8009390 <STRHAL_QSPI_Flash_Init+0x98>)
 800937e:	430b      	orrs	r3, r1
 8009380:	6053      	str	r3, [r2, #4]

	STRHAL_QSPI_Run();
 8009382:	f000 f82b 	bl	80093dc <STRHAL_QSPI_Run>

	return 0;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	a0001000 	.word	0xa0001000

08009394 <STRHAL_QSPI_Reset>:

void STRHAL_QSPI_Reset()
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
	if (QUADSPI->CR & QUADSPI_CR_EN)
 8009398:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <STRHAL_QSPI_Reset+0x1c>
		QUADSPI->CR &= ~QUADSPI_CR_EN;
 80093a4:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a0b      	ldr	r2, [pc, #44]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 80093aa:	f023 0301 	bic.w	r3, r3, #1
 80093ae:	6013      	str	r3, [r2, #0]

	CLEAR_REG(QUADSPI->CR);
 80093b0:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
	CLEAR_REG(QUADSPI->DCR);
 80093b6:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	605a      	str	r2, [r3, #4]
	CLEAR_REG(QUADSPI->CCR);
 80093bc:	4b06      	ldr	r3, [pc, #24]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 80093be:	2200      	movs	r2, #0
 80093c0:	615a      	str	r2, [r3, #20]

	QUADSPI->FCR |= (QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	4a04      	ldr	r2, [pc, #16]	; (80093d8 <STRHAL_QSPI_Reset+0x44>)
 80093c8:	f043 031b 	orr.w	r3, r3, #27
 80093cc:	60d3      	str	r3, [r2, #12]
}
 80093ce:	bf00      	nop
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	a0001000 	.word	0xa0001000

080093dc <STRHAL_QSPI_Run>:

void STRHAL_QSPI_Run()
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
	QUADSPI->CR |= QUADSPI_CR_EN; // Enable QSPI
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <STRHAL_QSPI_Run+0x1c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <STRHAL_QSPI_Run+0x1c>)
 80093e6:	f043 0301 	orr.w	r3, r3, #1
 80093ea:	6013      	str	r3, [r2, #0]
}
 80093ec:	bf00      	nop
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	a0001000 	.word	0xa0001000

080093fc <STRHAL_QSPI_Indirect_Write>:
{
	QUADSPI->CR &= ~QUADSPI_CR_EN;  // Enable QSPI
}

uint32_t STRHAL_QSPI_Indirect_Write(const STRHAL_QSPI_Command_t *cmd, const uint8_t *data, uint32_t n, uint16_t tot)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 800940a:	887b      	ldrh	r3, [r7, #2]
 800940c:	4619      	mov	r1, r3
 800940e:	2020      	movs	r0, #32
 8009410:	f000 f9a2 	bl	8009758 <_wait_for_status_clear>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	da02      	bge.n	8009420 <STRHAL_QSPI_Indirect_Write+0x24>
		return -1;
 800941a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800941e:	e09e      	b.n	800955e <STRHAL_QSPI_Indirect_Write+0x162>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8009420:	4b51      	ldr	r3, [pc, #324]	; (8009568 <STRHAL_QSPI_Indirect_Write+0x16c>)
 8009422:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8009424:	201b      	movs	r0, #27
 8009426:	f000 f9c3 	bl	80097b0 <_clear_status>

	uint32_t ccr = 0x00000000;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <STRHAL_QSPI_Indirect_Write+0x48>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800943a:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 800943c:	4a4b      	ldr	r2, [pc, #300]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3b01      	subs	r3, #1
 8009442:	6113      	str	r3, [r2, #16]
	}

	if (cmd->alt_size > 0)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	7a5b      	ldrb	r3, [r3, #9]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <STRHAL_QSPI_Indirect_Write+0x72>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009452:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	7a5b      	ldrb	r3, [r3, #9]
 8009458:	3b01      	subs	r3, #1
 800945a:	041b      	lsls	r3, r3, #16
 800945c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	4313      	orrs	r3, r2
 8009464:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 8009466:	4a41      	ldr	r2, [pc, #260]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	7c1b      	ldrb	r3, [r3, #16]
 8009472:	049b      	lsls	r3, r3, #18
 8009474:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 8009478:	69fa      	ldr	r2, [r7, #28]
 800947a:	4313      	orrs	r3, r2
 800947c:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d026      	beq.n	80094d4 <STRHAL_QSPI_Indirect_Write+0xd8>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800948c:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4313      	orrs	r3, r2
 8009498:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	7a1b      	ldrb	r3, [r3, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d014      	beq.n	80094cc <STRHAL_QSPI_Indirect_Write+0xd0>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094a8:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	7a1b      	ldrb	r3, [r3, #8]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	031b      	lsls	r3, r3, #12
 80094b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 80094bc:	4a2b      	ldr	r2, [pc, #172]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 80094c2:	4a2a      	ldr	r2, [pc, #168]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	6193      	str	r3, [r2, #24]
 80094ca:	e01f      	b.n	800950c <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 80094cc:	4a27      	ldr	r2, [pc, #156]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	6153      	str	r3, [r2, #20]
 80094d2:	e01b      	b.n	800950c <STRHAL_QSPI_Indirect_Write+0x110>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	7a1b      	ldrb	r3, [r3, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d014      	beq.n	8009506 <STRHAL_QSPI_Indirect_Write+0x10a>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094e2:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	7a1b      	ldrb	r3, [r3, #8]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	031b      	lsls	r3, r3, #12
 80094ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 80094f6:	4a1d      	ldr	r2, [pc, #116]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 80094fc:	4a1b      	ldr	r2, [pc, #108]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	6193      	str	r3, [r2, #24]
 8009504:	e002      	b.n	800950c <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8009506:	4a19      	ldr	r2, [pc, #100]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	6153      	str	r3, [r2, #20]
		}
	}

	uint32_t i;
	for (i = 0; i < n; ++i)
 800950c:	2300      	movs	r3, #0
 800950e:	61bb      	str	r3, [r7, #24]
 8009510:	e012      	b.n	8009538 <STRHAL_QSPI_Indirect_Write+0x13c>
	{
		if (_wait_for_status(QUADSPI_SR_FTF, tot) < 0)
 8009512:	887b      	ldrh	r3, [r7, #2]
 8009514:	4619      	mov	r1, r3
 8009516:	2004      	movs	r0, #4
 8009518:	f000 f8f2 	bl	8009700 <_wait_for_status>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	da01      	bge.n	8009526 <STRHAL_QSPI_Indirect_Write+0x12a>
			return i;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	e01b      	b.n	800955e <STRHAL_QSPI_Indirect_Write+0x162>

		*((__IO uint8_t*) data_reg) = data[i];
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	4413      	add	r3, r2
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	3301      	adds	r3, #1
 8009536:	61bb      	str	r3, [r7, #24]
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	429a      	cmp	r2, r3
 800953e:	d3e8      	bcc.n	8009512 <STRHAL_QSPI_Indirect_Write+0x116>

	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	4619      	mov	r1, r3
 8009544:	2002      	movs	r0, #2
 8009546:	f000 f8db 	bl	8009700 <_wait_for_status>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <STRHAL_QSPI_Indirect_Write+0x160>
	{
		SET_BIT(QUADSPI->FCR, QUADSPI_FCR_CTCF);
 8009550:	4b06      	ldr	r3, [pc, #24]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	4a05      	ldr	r2, [pc, #20]	; (800956c <STRHAL_QSPI_Indirect_Write+0x170>)
 8009556:	f043 0302 	orr.w	r3, r3, #2
 800955a:	60d3      	str	r3, [r2, #12]
	}

	return i;
 800955c:	69bb      	ldr	r3, [r7, #24]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3720      	adds	r7, #32
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	a0001020 	.word	0xa0001020
 800956c:	a0001000 	.word	0xa0001000

08009570 <STRHAL_QSPI_Indirect_Read>:

uint32_t STRHAL_QSPI_Indirect_Read(const STRHAL_QSPI_Command_t *cmd, uint8_t *data, uint32_t n, uint16_t tot)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 800957e:	887b      	ldrh	r3, [r7, #2]
 8009580:	4619      	mov	r1, r3
 8009582:	2020      	movs	r0, #32
 8009584:	f000 f8e8 	bl	8009758 <_wait_for_status_clear>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	da02      	bge.n	8009594 <STRHAL_QSPI_Indirect_Read+0x24>
		return -1;
 800958e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009592:	e0ad      	b.n	80096f0 <STRHAL_QSPI_Indirect_Read+0x180>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8009594:	4b58      	ldr	r3, [pc, #352]	; (80096f8 <STRHAL_QSPI_Indirect_Read+0x188>)
 8009596:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8009598:	201b      	movs	r0, #27
 800959a:	f000 f909 	bl	80097b0 <_clear_status>

	uint32_t ccr = 0x00000000;
 800959e:	2300      	movs	r3, #0
 80095a0:	61fb      	str	r3, [r7, #28]

	ccr |= QUADSPI_CCR_FMODE_0;
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095a8:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <STRHAL_QSPI_Indirect_Read+0x50>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095b6:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 80095b8:	4a50      	ldr	r2, [pc, #320]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3b01      	subs	r3, #1
 80095be:	6113      	str	r3, [r2, #16]
	}
	if (cmd->alt_size > 0)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	7a5b      	ldrb	r3, [r3, #9]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d010      	beq.n	80095ea <STRHAL_QSPI_Indirect_Read+0x7a>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095ce:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	7a5b      	ldrb	r3, [r3, #9]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	041b      	lsls	r3, r3, #16
 80095d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	4313      	orrs	r3, r2
 80095e0:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 80095e2:	4a46      	ldr	r2, [pc, #280]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	7c1b      	ldrb	r3, [r3, #16]
 80095ee:	049b      	lsls	r3, r3, #18
 80095f0:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d026      	beq.n	8009650 <STRHAL_QSPI_Indirect_Read+0xe0>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009608:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	4313      	orrs	r3, r2
 8009614:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	7a1b      	ldrb	r3, [r3, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d014      	beq.n	8009648 <STRHAL_QSPI_Indirect_Read+0xd8>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009624:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	7a1b      	ldrb	r3, [r3, #8]
 800962a:	3b01      	subs	r3, #1
 800962c:	031b      	lsls	r3, r3, #12
 800962e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	4313      	orrs	r3, r2
 8009636:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8009638:	4a30      	ldr	r2, [pc, #192]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 800963e:	4a2f      	ldr	r2, [pc, #188]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	6193      	str	r3, [r2, #24]
 8009646:	e01f      	b.n	8009688 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8009648:	4a2c      	ldr	r2, [pc, #176]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	6153      	str	r3, [r2, #20]
 800964e:	e01b      	b.n	8009688 <STRHAL_QSPI_Indirect_Read+0x118>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	7a1b      	ldrb	r3, [r3, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d014      	beq.n	8009682 <STRHAL_QSPI_Indirect_Read+0x112>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800965e:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	7a1b      	ldrb	r3, [r3, #8]
 8009664:	3b01      	subs	r3, #1
 8009666:	031b      	lsls	r3, r3, #12
 8009668:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	4313      	orrs	r3, r2
 8009670:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8009672:	4a22      	ldr	r2, [pc, #136]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8009678:	4a20      	ldr	r2, [pc, #128]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	6193      	str	r3, [r2, #24]
 8009680:	e002      	b.n	8009688 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8009682:	4a1e      	ldr	r2, [pc, #120]	; (80096fc <STRHAL_QSPI_Indirect_Read+0x18c>)
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	6153      	str	r3, [r2, #20]
		}
	}

	if (_wait_for_status(QUADSPI_SR_BUSY, tot) < 0)
 8009688:	887b      	ldrh	r3, [r7, #2]
 800968a:	4619      	mov	r1, r3
 800968c:	2020      	movs	r0, #32
 800968e:	f000 f837 	bl	8009700 <_wait_for_status>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	da01      	bge.n	800969c <STRHAL_QSPI_Indirect_Read+0x12c>
		return 0;
 8009698:	2300      	movs	r3, #0
 800969a:	e029      	b.n	80096f0 <STRHAL_QSPI_Indirect_Read+0x180>

	uint32_t i;
	for (i = 0; i < n; ++i)
 800969c:	2300      	movs	r3, #0
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	e016      	b.n	80096d0 <STRHAL_QSPI_Indirect_Read+0x160>
	{
		if (_wait_for_status(QUADSPI_SR_FTF | QUADSPI_SR_TCF, tot) < 0)
 80096a2:	887b      	ldrh	r3, [r7, #2]
 80096a4:	4619      	mov	r1, r3
 80096a6:	2006      	movs	r0, #6
 80096a8:	f000 f82a 	bl	8009700 <_wait_for_status>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	da04      	bge.n	80096bc <STRHAL_QSPI_Indirect_Read+0x14c>
		{
			_clear_status(QUADSPI_SR_TCF);
 80096b2:	2002      	movs	r0, #2
 80096b4:	f000 f87c 	bl	80097b0 <_clear_status>
			return i;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	e019      	b.n	80096f0 <STRHAL_QSPI_Indirect_Read+0x180>
		}
		data[i] = *((__IO uint8_t*) data_reg);
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	4413      	add	r3, r2
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	7812      	ldrb	r2, [r2, #0]
 80096c6:	b2d2      	uxtb	r2, r2
 80096c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	3301      	adds	r3, #1
 80096ce:	61bb      	str	r3, [r7, #24]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d3e4      	bcc.n	80096a2 <STRHAL_QSPI_Indirect_Read+0x132>
	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 80096d8:	887b      	ldrh	r3, [r7, #2]
 80096da:	4619      	mov	r1, r3
 80096dc:	2002      	movs	r0, #2
 80096de:	f000 f80f 	bl	8009700 <_wait_for_status>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <STRHAL_QSPI_Indirect_Read+0x17e>
	{
		_clear_status(QUADSPI_SR_TCF);
 80096e8:	2002      	movs	r0, #2
 80096ea:	f000 f861 	bl	80097b0 <_clear_status>
	}
	return i;
 80096ee:	69bb      	ldr	r3, [r7, #24]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	a0001020 	.word	0xa0001020
 80096fc:	a0001000 	.word	0xa0001000

08009700 <_wait_for_status>:

int _wait_for_status(uint32_t flag, uint16_t tot)
{
 8009700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	460b      	mov	r3, r1
 800970c:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 800970e:	f000 f913 	bl	8009938 <STRHAL_Systick_GetTick>
 8009712:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (!(QUADSPI->SR & flag))
 8009716:	e011      	b.n	800973c <_wait_for_status+0x3c>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 8009718:	f000 f90e 	bl	8009938 <STRHAL_Systick_GetTick>
 800971c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009720:	1a84      	subs	r4, r0, r2
 8009722:	eb61 0503 	sbc.w	r5, r1, r3
 8009726:	887b      	ldrh	r3, [r7, #2]
 8009728:	2200      	movs	r2, #0
 800972a:	4698      	mov	r8, r3
 800972c:	4691      	mov	r9, r2
 800972e:	45a0      	cmp	r8, r4
 8009730:	eb79 0305 	sbcs.w	r3, r9, r5
 8009734:	d202      	bcs.n	800973c <_wait_for_status+0x3c>
			return -1;
 8009736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800973a:	e006      	b.n	800974a <_wait_for_status+0x4a>
	while (!(QUADSPI->SR & flag))
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <_wait_for_status+0x54>)
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4013      	ands	r3, r2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0e7      	beq.n	8009718 <_wait_for_status+0x18>
	}
	return 0;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009754:	a0001000 	.word	0xa0001000

08009758 <_wait_for_status_clear>:

int _wait_for_status_clear(uint32_t flag, uint16_t tot)
{
 8009758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 8009766:	f000 f8e7 	bl	8009938 <STRHAL_Systick_GetTick>
 800976a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (QUADSPI->SR & flag)
 800976e:	e011      	b.n	8009794 <_wait_for_status_clear+0x3c>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 8009770:	f000 f8e2 	bl	8009938 <STRHAL_Systick_GetTick>
 8009774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009778:	1a84      	subs	r4, r0, r2
 800977a:	eb61 0503 	sbc.w	r5, r1, r3
 800977e:	887b      	ldrh	r3, [r7, #2]
 8009780:	2200      	movs	r2, #0
 8009782:	4698      	mov	r8, r3
 8009784:	4691      	mov	r9, r2
 8009786:	45a0      	cmp	r8, r4
 8009788:	eb79 0305 	sbcs.w	r3, r9, r5
 800978c:	d202      	bcs.n	8009794 <_wait_for_status_clear+0x3c>
			return -1;
 800978e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009792:	e006      	b.n	80097a2 <_wait_for_status_clear+0x4a>
	while (QUADSPI->SR & flag)
 8009794:	4b05      	ldr	r3, [pc, #20]	; (80097ac <_wait_for_status_clear+0x54>)
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4013      	ands	r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e7      	bne.n	8009770 <_wait_for_status_clear+0x18>
	}
	return 0;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80097ac:	a0001000 	.word	0xa0001000

080097b0 <_clear_status>:

void _clear_status(uint32_t flags)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
	QUADSPI->FCR |= (flags);
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <_clear_status+0x20>)
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	4904      	ldr	r1, [pc, #16]	; (80097d0 <_clear_status+0x20>)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60cb      	str	r3, [r1, #12]
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	a0001000 	.word	0xa0001000

080097d4 <LL_AHB2_GRP1_EnableClock>:
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80097dc:	4b08      	ldr	r3, [pc, #32]	; (8009800 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80097de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097e0:	4907      	ldr	r1, [pc, #28]	; (8009800 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80097e8:	4b05      	ldr	r3, [pc, #20]	; (8009800 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80097ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4013      	ands	r3, r2
 80097f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80097f2:	68fb      	ldr	r3, [r7, #12]
}
 80097f4:	bf00      	nop
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	40021000 	.word	0x40021000

08009804 <LL_APB1_GRP1_EnableClock>:
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800980c:	4b08      	ldr	r3, [pc, #32]	; (8009830 <LL_APB1_GRP1_EnableClock+0x2c>)
 800980e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009810:	4907      	ldr	r1, [pc, #28]	; (8009830 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4313      	orrs	r3, r2
 8009816:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009818:	4b05      	ldr	r3, [pc, #20]	; (8009830 <LL_APB1_GRP1_EnableClock+0x2c>)
 800981a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4013      	ands	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009822:	68fb      	ldr	r3, [r7, #12]
}
 8009824:	bf00      	nop
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	40021000 	.word	0x40021000

08009834 <LL_APB2_GRP1_EnableClock>:
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800983c:	4b08      	ldr	r3, [pc, #32]	; (8009860 <LL_APB2_GRP1_EnableClock+0x2c>)
 800983e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009840:	4907      	ldr	r1, [pc, #28]	; (8009860 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4313      	orrs	r3, r2
 8009846:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <LL_APB2_GRP1_EnableClock+0x2c>)
 800984a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4013      	ands	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009852:	68fb      	ldr	r3, [r7, #12]
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	40021000 	.word	0x40021000

08009864 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	601a      	str	r2, [r3, #0]
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <STRHAL_SPI_Init>:
static inline int _wait_for_rxtxend(SPI_TypeDef *spix, uint16_t tot);
static inline int _wait_for_rxne(SPI_TypeDef *spix, uint16_t tot);
static inline int _rx_flush(SPI_TypeDef *spix, uint16_t tot);

void STRHAL_SPI_Init()
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8009888:	2004      	movs	r0, #4
 800988a:	f7ff ffa3 	bl	80097d4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800988e:	2020      	movs	r0, #32
 8009890:	f7ff ffa0 	bl	80097d4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8009894:	2001      	movs	r0, #1
 8009896:	f7ff ff9d 	bl	80097d4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800989a:	2002      	movs	r0, #2
 800989c:	f7ff ff9a 	bl	80097d4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80098a0:	2010      	movs	r0, #16
 80098a2:	f7ff ff97 	bl	80097d4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80098a6:	2008      	movs	r0, #8
 80098a8:	f7ff ff94 	bl	80097d4 <LL_AHB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80098ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80098b0:	f7ff ffc0 	bl	8009834 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80098b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80098b8:	f7ff ffa4 	bl	8009804 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80098bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80098c0:	f7ff ffa0 	bl	8009804 <LL_APB1_GRP1_EnableClock>

	LL_SPI_DeInit(SPI1);
 80098c4:	4809      	ldr	r0, [pc, #36]	; (80098ec <STRHAL_SPI_Init+0x68>)
 80098c6:	f7fc fcdb 	bl	8006280 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI2);
 80098ca:	4809      	ldr	r0, [pc, #36]	; (80098f0 <STRHAL_SPI_Init+0x6c>)
 80098cc:	f7fc fcd8 	bl	8006280 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI3);
 80098d0:	4808      	ldr	r0, [pc, #32]	; (80098f4 <STRHAL_SPI_Init+0x70>)
 80098d2:	f7fc fcd5 	bl	8006280 <LL_SPI_DeInit>

	LL_SPI_Disable(SPI1);
 80098d6:	4805      	ldr	r0, [pc, #20]	; (80098ec <STRHAL_SPI_Init+0x68>)
 80098d8:	f7ff ffc4 	bl	8009864 <LL_SPI_Disable>
	LL_SPI_Disable(SPI2);
 80098dc:	4804      	ldr	r0, [pc, #16]	; (80098f0 <STRHAL_SPI_Init+0x6c>)
 80098de:	f7ff ffc1 	bl	8009864 <LL_SPI_Disable>
	LL_SPI_Disable(SPI3);
 80098e2:	4804      	ldr	r0, [pc, #16]	; (80098f4 <STRHAL_SPI_Init+0x70>)
 80098e4:	f7ff ffbe 	bl	8009864 <LL_SPI_Disable>
}
 80098e8:	bf00      	nop
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	40013000 	.word	0x40013000
 80098f0:	40003800 	.word	0x40003800
 80098f4:	40003c00 	.word	0x40003c00

080098f8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <LL_SYSTICK_EnableIT+0x1c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a04      	ldr	r2, [pc, #16]	; (8009914 <LL_SYSTICK_EnableIT+0x1c>)
 8009902:	f043 0302 	orr.w	r3, r3, #2
 8009906:	6013      	str	r3, [r2, #0]
}
 8009908:	bf00      	nop
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	e000e010 	.word	0xe000e010

08009918 <STRHAL_SysTick_Init>:
#include <STRHAL_SysTick.h>

static volatile uint64_t systick_count = 0;

void STRHAL_SysTick_Init()
{
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
	//LL_Init1msTick(SystemCoreClock);
	//1ms tick already in STRHAL.c sysclock init
	LL_SYSTICK_EnableIT();
 800991c:	f7ff ffec 	bl	80098f8 <LL_SYSTICK_EnableIT>
	systick_count = 0;
 8009920:	4904      	ldr	r1, [pc, #16]	; (8009934 <STRHAL_SysTick_Init+0x1c>)
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	f04f 0300 	mov.w	r3, #0
 800992a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800992e:	bf00      	nop
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	200008c0 	.word	0x200008c0

08009938 <STRHAL_Systick_GetTick>:
	uint64_t end = systick_count + ticks;
	while (systick_count < end);
}

uint64_t STRHAL_Systick_GetTick()
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
	return systick_count;
 800993c:	4b04      	ldr	r3, [pc, #16]	; (8009950 <STRHAL_Systick_GetTick+0x18>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8009942:	4610      	mov	r0, r2
 8009944:	4619      	mov	r1, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	200008c0 	.word	0x200008c0

08009954 <SysTick_Handler>:

void SysTick_Handler()
{
 8009954:	b480      	push	{r7}
 8009956:	af00      	add	r7, sp, #0
	systick_count++;
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <SysTick_Handler+0x20>)
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	1c50      	adds	r0, r2, #1
 8009960:	f143 0100 	adc.w	r1, r3, #0
 8009964:	4b03      	ldr	r3, [pc, #12]	; (8009974 <SysTick_Handler+0x20>)
 8009966:	e9c3 0100 	strd	r0, r1, [r3]
}
 800996a:	bf00      	nop
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	200008c0 	.word	0x200008c0

08009978 <__NVIC_GetPriorityGrouping>:
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800997c:	4b04      	ldr	r3, [pc, #16]	; (8009990 <__NVIC_GetPriorityGrouping+0x18>)
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	0a1b      	lsrs	r3, r3, #8
 8009982:	f003 0307 	and.w	r3, r3, #7
}
 8009986:	4618      	mov	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	e000ed00 	.word	0xe000ed00

08009994 <__NVIC_EnableIRQ>:
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800999e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	db0b      	blt.n	80099be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	f003 021f 	and.w	r2, r3, #31
 80099ac:	4907      	ldr	r1, [pc, #28]	; (80099cc <__NVIC_EnableIRQ+0x38>)
 80099ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	2001      	movs	r0, #1
 80099b6:	fa00 f202 	lsl.w	r2, r0, r2
 80099ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	e000e100 	.word	0xe000e100

080099d0 <__NVIC_SetPriority>:
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	6039      	str	r1, [r7, #0]
 80099da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	db0a      	blt.n	80099fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	490c      	ldr	r1, [pc, #48]	; (8009a1c <__NVIC_SetPriority+0x4c>)
 80099ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ee:	0112      	lsls	r2, r2, #4
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	440b      	add	r3, r1
 80099f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099f8:	e00a      	b.n	8009a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	4908      	ldr	r1, [pc, #32]	; (8009a20 <__NVIC_SetPriority+0x50>)
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	f003 030f 	and.w	r3, r3, #15
 8009a06:	3b04      	subs	r3, #4
 8009a08:	0112      	lsls	r2, r2, #4
 8009a0a:	b2d2      	uxtb	r2, r2
 8009a0c:	440b      	add	r3, r1
 8009a0e:	761a      	strb	r2, [r3, #24]
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	e000e100 	.word	0xe000e100
 8009a20:	e000ed00 	.word	0xe000ed00

08009a24 <NVIC_EncodePriority>:
{
 8009a24:	b480      	push	{r7}
 8009a26:	b089      	sub	sp, #36	; 0x24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f003 0307 	and.w	r3, r3, #7
 8009a36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f1c3 0307 	rsb	r3, r3, #7
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	bf28      	it	cs
 8009a42:	2304      	movcs	r3, #4
 8009a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	2b06      	cmp	r3, #6
 8009a4c:	d902      	bls.n	8009a54 <NVIC_EncodePriority+0x30>
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	3b03      	subs	r3, #3
 8009a52:	e000      	b.n	8009a56 <NVIC_EncodePriority+0x32>
 8009a54:	2300      	movs	r3, #0
 8009a56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a62:	43da      	mvns	r2, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	401a      	ands	r2, r3
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	fa01 f303 	lsl.w	r3, r1, r3
 8009a76:	43d9      	mvns	r1, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a7c:	4313      	orrs	r3, r2
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3724      	adds	r7, #36	; 0x24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
	...

08009a8c <LL_AHB2_GRP1_EnableClock>:
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009a94:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8009a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a98:	4907      	ldr	r1, [pc, #28]	; (8009ab8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8009aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
}
 8009aac:	bf00      	nop
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	40021000 	.word	0x40021000

08009abc <LL_APB1_GRP1_EnableClock>:
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009ac4:	4b08      	ldr	r3, [pc, #32]	; (8009ae8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009ac6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ac8:	4907      	ldr	r1, [pc, #28]	; (8009ae8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009ad2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009ada:	68fb      	ldr	r3, [r7, #12]
}
 8009adc:	bf00      	nop
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	40021000 	.word	0x40021000

08009aec <LL_APB2_GRP1_EnableClock>:
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8009af4:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009af8:	4907      	ldr	r1, [pc, #28]	; (8009b18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009b00:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009b02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4013      	ands	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
}
 8009b0c:	bf00      	nop
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	40021000 	.word	0x40021000

08009b1c <LL_TIM_EnableCounter>:
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f043 0201 	orr.w	r2, r3, #1
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	601a      	str	r2, [r3, #0]
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <LL_TIM_IsEnabledCounter>:
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d101      	bne.n	8009b54 <LL_TIM_IsEnabledCounter+0x18>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e000      	b.n	8009b56 <LL_TIM_IsEnabledCounter+0x1a>
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <LL_TIM_EnableARRPreload>:
{
 8009b62:	b480      	push	{r7}
 8009b64:	b083      	sub	sp, #12
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	601a      	str	r2, [r3, #0]
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <LL_TIM_CC_EnableChannel>:
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1a      	ldr	r2, [r3, #32]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	431a      	orrs	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	621a      	str	r2, [r3, #32]
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <LL_TIM_CC_DisableChannel>:
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1a      	ldr	r2, [r3, #32]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	43db      	mvns	r3, r3
 8009bb6:	401a      	ands	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	621a      	str	r2, [r3, #32]
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <LL_TIM_OC_DisableFast>:
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d02e      	beq.n	8009c36 <LL_TIM_OC_DisableFast+0x6e>
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d029      	beq.n	8009c32 <LL_TIM_OC_DisableFast+0x6a>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d024      	beq.n	8009c2e <LL_TIM_OC_DisableFast+0x66>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b40      	cmp	r3, #64	; 0x40
 8009be8:	d01f      	beq.n	8009c2a <LL_TIM_OC_DisableFast+0x62>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf0:	d019      	beq.n	8009c26 <LL_TIM_OC_DisableFast+0x5e>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf8:	d013      	beq.n	8009c22 <LL_TIM_OC_DisableFast+0x5a>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c00:	d00d      	beq.n	8009c1e <LL_TIM_OC_DisableFast+0x56>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c08:	d007      	beq.n	8009c1a <LL_TIM_OC_DisableFast+0x52>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c10:	d101      	bne.n	8009c16 <LL_TIM_OC_DisableFast+0x4e>
 8009c12:	2308      	movs	r3, #8
 8009c14:	e010      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c16:	2309      	movs	r3, #9
 8009c18:	e00e      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c1a:	2307      	movs	r3, #7
 8009c1c:	e00c      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c1e:	2306      	movs	r3, #6
 8009c20:	e00a      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c22:	2305      	movs	r3, #5
 8009c24:	e008      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c26:	2304      	movs	r3, #4
 8009c28:	e006      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e004      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e002      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <LL_TIM_OC_DisableFast+0x70>
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3318      	adds	r3, #24
 8009c3e:	4619      	mov	r1, r3
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	4a0b      	ldr	r2, [pc, #44]	; (8009c70 <LL_TIM_OC_DisableFast+0xa8>)
 8009c44:	5cd3      	ldrb	r3, [r2, r3]
 8009c46:	440b      	add	r3, r1
 8009c48:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	4908      	ldr	r1, [pc, #32]	; (8009c74 <LL_TIM_OC_DisableFast+0xac>)
 8009c52:	5ccb      	ldrb	r3, [r1, r3]
 8009c54:	4619      	mov	r1, r3
 8009c56:	2304      	movs	r3, #4
 8009c58:	408b      	lsls	r3, r1
 8009c5a:	43db      	mvns	r3, r3
 8009c5c:	401a      	ands	r2, r3
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	601a      	str	r2, [r3, #0]
}
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	0800bf78 	.word	0x0800bf78
 8009c74:	0800bf84 	.word	0x0800bf84

08009c78 <LL_TIM_OC_EnablePreload>:
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d02e      	beq.n	8009ce6 <LL_TIM_OC_EnablePreload+0x6e>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d029      	beq.n	8009ce2 <LL_TIM_OC_EnablePreload+0x6a>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b10      	cmp	r3, #16
 8009c92:	d024      	beq.n	8009cde <LL_TIM_OC_EnablePreload+0x66>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b40      	cmp	r3, #64	; 0x40
 8009c98:	d01f      	beq.n	8009cda <LL_TIM_OC_EnablePreload+0x62>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ca0:	d019      	beq.n	8009cd6 <LL_TIM_OC_EnablePreload+0x5e>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca8:	d013      	beq.n	8009cd2 <LL_TIM_OC_EnablePreload+0x5a>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb0:	d00d      	beq.n	8009cce <LL_TIM_OC_EnablePreload+0x56>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cb8:	d007      	beq.n	8009cca <LL_TIM_OC_EnablePreload+0x52>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cc0:	d101      	bne.n	8009cc6 <LL_TIM_OC_EnablePreload+0x4e>
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	e010      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009cc6:	2309      	movs	r3, #9
 8009cc8:	e00e      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009cca:	2307      	movs	r3, #7
 8009ccc:	e00c      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009cce:	2306      	movs	r3, #6
 8009cd0:	e00a      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009cd2:	2305      	movs	r3, #5
 8009cd4:	e008      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009cd6:	2304      	movs	r3, #4
 8009cd8:	e006      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e004      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e002      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <LL_TIM_OC_EnablePreload+0x70>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3318      	adds	r3, #24
 8009cee:	4619      	mov	r1, r3
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <LL_TIM_OC_EnablePreload+0xa4>)
 8009cf4:	5cd3      	ldrb	r3, [r2, r3]
 8009cf6:	440b      	add	r3, r1
 8009cf8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	4907      	ldr	r1, [pc, #28]	; (8009d20 <LL_TIM_OC_EnablePreload+0xa8>)
 8009d02:	5ccb      	ldrb	r3, [r1, r3]
 8009d04:	4619      	mov	r1, r3
 8009d06:	2308      	movs	r3, #8
 8009d08:	408b      	lsls	r3, r1
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	601a      	str	r2, [r3, #0]
}
 8009d10:	bf00      	nop
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	0800bf78 	.word	0x0800bf78
 8009d20:	0800bf84 	.word	0x0800bf84

08009d24 <LL_TIM_DisableMasterSlaveMode>:
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	609a      	str	r2, [r3, #8]
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <LL_TIM_EnableAutomaticOutput>:
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d50:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <LL_TIM_ClearFlag_UPDATE>:
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f06f 0201 	mvn.w	r2, #1
 8009d72:	611a      	str	r2, [r3, #16]
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8009d94:	2301      	movs	r3, #1
 8009d96:	e000      	b.n	8009d9a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <LL_TIM_EnableIT_UPDATE>:
{
 8009da6:	b480      	push	{r7}
 8009da8:	b083      	sub	sp, #12
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f043 0201 	orr.w	r2, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60da      	str	r2, [r3, #12]
}
 8009dba:	bf00      	nop
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <STRHAL_TIM_Init>:
{ .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_13, .afn = LL_GPIO_AF_4, .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, }, [STRHAL_TIM_TIM8_CH4N_PD0] =
{ .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_0, .afn = LL_GPIO_AF_6, .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, }, [STRHAL_TIM_TIM8_CH4_PD1] =
{ .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_1, .afn = LL_GPIO_AF_4, .n = LL_TIM_CHANNEL_CH4, .ccr = &TIM8->CCR4, }, };

void STRHAL_TIM_Init()
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8009dca:	2004      	movs	r0, #4
 8009dcc:	f7ff fe5e 	bl	8009a8c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8009dd0:	2020      	movs	r0, #32
 8009dd2:	f7ff fe5b 	bl	8009a8c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	f7ff fe58 	bl	8009a8c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8009ddc:	2002      	movs	r0, #2
 8009dde:	f7ff fe55 	bl	8009a8c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8009de2:	2010      	movs	r0, #16
 8009de4:	f7ff fe52 	bl	8009a8c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8009de8:	2008      	movs	r0, #8
 8009dea:	f7ff fe4f 	bl	8009a8c <LL_AHB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8009dee:	2001      	movs	r0, #1
 8009df0:	f7ff fe64 	bl	8009abc <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8009df4:	2002      	movs	r0, #2
 8009df6:	f7ff fe61 	bl	8009abc <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8009dfa:	2004      	movs	r0, #4
 8009dfc:	f7ff fe5e 	bl	8009abc <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8009e00:	2010      	movs	r0, #16
 8009e02:	f7ff fe5b 	bl	8009abc <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8009e06:	2020      	movs	r0, #32
 8009e08:	f7ff fe58 	bl	8009abc <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8009e0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e10:	f7ff fe6c 	bl	8009aec <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8009e14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009e18:	f7ff fe68 	bl	8009aec <LL_APB2_GRP1_EnableClock>

	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009e1c:	2036      	movs	r0, #54	; 0x36
 8009e1e:	f7ff fdb9 	bl	8009994 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM7_IRQn);
 8009e22:	2037      	movs	r0, #55	; 0x37
 8009e24:	f7ff fdb6 	bl	8009994 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 3));
 8009e28:	f7ff fda6 	bl	8009978 <__NVIC_GetPriorityGrouping>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2203      	movs	r2, #3
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff fdf6 	bl	8009a24 <NVIC_EncodePriority>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	2036      	movs	r0, #54	; 0x36
 8009e3e:	f7ff fdc7 	bl	80099d0 <__NVIC_SetPriority>
	NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2)); //TODO check priorities
 8009e42:	f7ff fd99 	bl	8009978 <__NVIC_GetPriorityGrouping>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2202      	movs	r2, #2
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fde9 	bl	8009a24 <NVIC_EncodePriority>
 8009e52:	4603      	mov	r3, r0
 8009e54:	4619      	mov	r1, r3
 8009e56:	2037      	movs	r0, #55	; 0x37
 8009e58:	f7ff fdba 	bl	80099d0 <__NVIC_SetPriority>
}
 8009e5c:	bf00      	nop
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <STRHAL_TIM_PWM_Init>:

int32_t STRHAL_TIM_PWM_Init(STRHAL_TIM_TimerId_t id, uint16_t psc, uint16_t res)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08a      	sub	sp, #40	; 0x28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	71fb      	strb	r3, [r7, #7]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	80bb      	strh	r3, [r7, #4]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_TIM || id < 0)
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	2b05      	cmp	r3, #5
 8009e76:	d902      	bls.n	8009e7e <STRHAL_TIM_PWM_Init+0x1e>
		return -1;
 8009e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e7c:	e06e      	b.n	8009f5c <STRHAL_TIM_PWM_Init+0xfc>

	STRHAL_TIM_Timer_t *tim = &_tims[id];
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	4a38      	ldr	r2, [pc, #224]	; (8009f64 <STRHAL_TIM_PWM_Init+0x104>)
 8009e84:	4413      	add	r3, r2
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype == STRHAL_TIM_USAGE_PWM)
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	79db      	ldrb	r3, [r3, #7]
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d101      	bne.n	8009e94 <STRHAL_TIM_PWM_Init+0x34>
		return 0; //TODO: return actual hardware Frequency
 8009e90:	2300      	movs	r3, #0
 8009e92:	e063      	b.n	8009f5c <STRHAL_TIM_PWM_Init+0xfc>

	if (tim->utype != STRHAL_TIM_USAGE_000)
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	79db      	ldrb	r3, [r3, #7]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <STRHAL_TIM_PWM_Init+0x42>
		return -1;
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ea0:	e05c      	b.n	8009f5c <STRHAL_TIM_PWM_Init+0xfc>

	LL_TIM_InitTypeDef TIM_InitStruct =
 8009ea2:	f107 030c 	add.w	r3, r7, #12
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	605a      	str	r2, [r3, #4]
 8009eac:	609a      	str	r2, [r3, #8]
 8009eae:	60da      	str	r2, [r3, #12]
 8009eb0:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 8009eba:	887b      	ldrh	r3, [r7, #2]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 8009ec0:	88bb      	ldrh	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <STRHAL_TIM_PWM_Init+0x6e>
 8009ec6:	88bb      	ldrh	r3, [r7, #4]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	e000      	b.n	8009ed0 <STRHAL_TIM_PWM_Init+0x70>
 8009ece:	88bb      	ldrh	r3, [r7, #4]
 8009ed0:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f107 020c 	add.w	r2, r7, #12
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fc fa9b 	bl	8006418 <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff fe3b 	bl	8009b62 <LL_TIM_EnableARRPreload>
	if (IS_TIM_BREAK_INSTANCE(tim->timx))
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a1d      	ldr	r2, [pc, #116]	; (8009f68 <STRHAL_TIM_PWM_Init+0x108>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d018      	beq.n	8009f28 <STRHAL_TIM_PWM_Init+0xc8>
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a1c      	ldr	r2, [pc, #112]	; (8009f6c <STRHAL_TIM_PWM_Init+0x10c>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d013      	beq.n	8009f28 <STRHAL_TIM_PWM_Init+0xc8>
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1a      	ldr	r2, [pc, #104]	; (8009f70 <STRHAL_TIM_PWM_Init+0x110>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d00e      	beq.n	8009f28 <STRHAL_TIM_PWM_Init+0xc8>
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a19      	ldr	r2, [pc, #100]	; (8009f74 <STRHAL_TIM_PWM_Init+0x114>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d009      	beq.n	8009f28 <STRHAL_TIM_PWM_Init+0xc8>
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a17      	ldr	r2, [pc, #92]	; (8009f78 <STRHAL_TIM_PWM_Init+0x118>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d004      	beq.n	8009f28 <STRHAL_TIM_PWM_Init+0xc8>
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a16      	ldr	r2, [pc, #88]	; (8009f7c <STRHAL_TIM_PWM_Init+0x11c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d104      	bne.n	8009f32 <STRHAL_TIM_PWM_Init+0xd2>
		LL_TIM_EnableAutomaticOutput(tim->timx);
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7ff ff09 	bl	8009d44 <LL_TIM_EnableAutomaticOutput>

	LL_TIM_DisableMasterSlaveMode(tim->timx);
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff fef4 	bl	8009d24 <LL_TIM_DisableMasterSlaveMode>

	tim->cfreq = 0;
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	2200      	movs	r2, #0
 8009f40:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_PWM;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	2202      	movs	r2, #2
 8009f46:	71da      	strb	r2, [r3, #7]

	uint16_t freq = SystemCoreClock / (res * psc);
 8009f48:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <STRHAL_TIM_PWM_Init+0x120>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	887a      	ldrh	r2, [r7, #2]
 8009f4e:	88b9      	ldrh	r1, [r7, #4]
 8009f50:	fb01 f202 	mul.w	r2, r1, r2
 8009f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f58:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 8009f5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3728      	adds	r7, #40	; 0x28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	2000004c 	.word	0x2000004c
 8009f68:	40012c00 	.word	0x40012c00
 8009f6c:	40013400 	.word	0x40013400
 8009f70:	40014000 	.word	0x40014000
 8009f74:	40014400 	.word	0x40014400
 8009f78:	40014800 	.word	0x40014800
 8009f7c:	40015000 	.word	0x40015000
 8009f80:	20000000 	.word	0x20000000

08009f84 <STRHAL_TIM_PWM_AddChannel>:

int STRHAL_TIM_PWM_AddChannel(STRHAL_TIM_PWM_Channel_t *pwmChannel, STRHAL_TIM_ChannelId_t channelId, STRHAL_TIM_PWM_ChannelType_t pwmType)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b092      	sub	sp, #72	; 0x48
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
 8009f90:	4613      	mov	r3, r2
 8009f92:	70bb      	strb	r3, [r7, #2]
	if (channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	2b5b      	cmp	r3, #91	; 0x5b
 8009f98:	d902      	bls.n	8009fa0 <STRHAL_TIM_PWM_AddChannel+0x1c>
		return -1;
 8009f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f9e:	e060      	b.n	800a062 <STRHAL_TIM_PWM_AddChannel+0xde>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[channelId];
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	4413      	add	r3, r2
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	4a30      	ldr	r2, [pc, #192]	; (800a06c <STRHAL_TIM_PWM_AddChannel+0xe8>)
 8009fac:	4413      	add	r3, r2
 8009fae:	647b      	str	r3, [r7, #68]	; 0x44
	if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_SO)
 8009fb0:	78bb      	ldrb	r3, [r7, #2]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d14e      	bne.n	800a054 <STRHAL_TIM_PWM_AddChannel+0xd0>
	{

		LL_GPIO_InitTypeDef GPIO_InitStruct =
 8009fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	609a      	str	r2, [r3, #8]
 8009fc2:	60da      	str	r2, [r3, #12]
 8009fc4:	611a      	str	r2, [r3, #16]
 8009fc6:	615a      	str	r2, [r3, #20]
		{ 0 };
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = ch->afn;
 8009fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Pin = ch->pin;
 8009fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	637b      	str	r3, [r7, #52]	; 0x34
		LL_GPIO_Init(ch->port, &GPIO_InitStruct);
 8009fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009fec:	4611      	mov	r1, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fb fddd 	bl	8005bae <LL_GPIO_Init>

		LL_TIM_OC_InitTypeDef OC_InitStruct =
 8009ff4:	f107 030c 	add.w	r3, r7, #12
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 f9ff 	bl	800b400 <memset>
		{ 0 };
		OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800a002:	2360      	movs	r3, #96	; 0x60
 800a004:	60fb      	str	r3, [r7, #12]
		OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 800a006:	2301      	movs	r3, #1
 800a008:	613b      	str	r3, [r7, #16]
		OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
		OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_LOW;
 800a00e:	2302      	movs	r3, #2
 800a010:	623b      	str	r3, [r7, #32]
		OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800a012:	2300      	movs	r3, #0
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
		OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_HIGH;
 800a016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
		LL_TIM_OC_Init(ch->tim->timx, ch->n, &OC_InitStruct);
 800a01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f107 020c 	add.w	r2, r7, #12
 800a02a:	4619      	mov	r1, r3
 800a02c:	f7fc fa8c 	bl	8006548 <LL_TIM_OC_Init>
		LL_TIM_OC_EnablePreload(ch->tim->timx, ch->n);
 800a030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f7ff fe1b 	bl	8009c78 <LL_TIM_OC_EnablePreload>
		LL_TIM_OC_DisableFast(ch->tim->timx, ch->n);
 800a042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f7ff fdba 	bl	8009bc8 <LL_TIM_OC_DisableFast>
	else if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_IN)
	{
		//LL_TIM_IC_InitTypeDef IC_InitStruct = {0};
	}

	pwmChannel->channelId = channelId;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	78fa      	ldrb	r2, [r7, #3]
 800a058:	701a      	strb	r2, [r3, #0]
	pwmChannel->type = pwmType;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	78ba      	ldrb	r2, [r7, #2]
 800a05e:	705a      	strb	r2, [r3, #1]
	return 0;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3748      	adds	r7, #72	; 0x48
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	0800bf90 	.word	0x0800bf90

0800a070 <STRHAL_TIM_PWM_SetDuty>:
	LL_TIM_SetAutoReload(tim->timx, res - 1);
	return SystemCoreClock / (psc * res);
}

int32_t STRHAL_TIM_PWM_SetDuty(STRHAL_TIM_PWM_Channel_t *pwmChannel, uint16_t duty)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	807b      	strh	r3, [r7, #2]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b5b      	cmp	r3, #91	; 0x5b
 800a082:	d902      	bls.n	800a08a <STRHAL_TIM_PWM_SetDuty+0x1a>
		return -1;
 800a084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a088:	e016      	b.n	800a0b8 <STRHAL_TIM_PWM_SetDuty+0x48>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	4613      	mov	r3, r2
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	4413      	add	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	4a0a      	ldr	r2, [pc, #40]	; (800a0c4 <STRHAL_TIM_PWM_SetDuty+0x54>)
 800a09a:	4413      	add	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	79db      	ldrb	r3, [r3, #7]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d002      	beq.n	800a0ae <STRHAL_TIM_PWM_SetDuty+0x3e>
		return -1;
 800a0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ac:	e004      	b.n	800a0b8 <STRHAL_TIM_PWM_SetDuty+0x48>

	*ch->ccr = duty;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	887a      	ldrh	r2, [r7, #2]
 800a0b4:	601a      	str	r2, [r3, #0]
	return duty;
 800a0b6:	887b      	ldrh	r3, [r7, #2]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	0800bf90 	.word	0x0800bf90

0800a0c8 <STRHAL_TIM_PWM_Enable>:

int STRHAL_TIM_PWM_Enable(STRHAL_TIM_PWM_Channel_t *pwmChannel, int enable)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b5b      	cmp	r3, #91	; 0x5b
 800a0d8:	d902      	bls.n	800a0e0 <STRHAL_TIM_PWM_Enable+0x18>
		return -1;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0de:	e037      	b.n	800a150 <STRHAL_TIM_PWM_Enable+0x88>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	4413      	add	r3, r2
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	4a1a      	ldr	r2, [pc, #104]	; (800a158 <STRHAL_TIM_PWM_Enable+0x90>)
 800a0f0:	4413      	add	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	79db      	ldrb	r3, [r3, #7]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d002      	beq.n	800a104 <STRHAL_TIM_PWM_Enable+0x3c>
		return -1;
 800a0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a102:	e025      	b.n	800a150 <STRHAL_TIM_PWM_Enable+0x88>

	if (enable)
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d018      	beq.n	800a13c <STRHAL_TIM_PWM_Enable+0x74>
	{
		LL_TIM_CC_EnableChannel(ch->tim->timx, ch->n);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7ff fd33 	bl	8009b82 <LL_TIM_CC_EnableChannel>
		if (!LL_TIM_IsEnabledCounter(ch->tim->timx))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff fd0a 	bl	8009b3c <LL_TIM_IsEnabledCounter>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10f      	bne.n	800a14e <STRHAL_TIM_PWM_Enable+0x86>
			LL_TIM_EnableCounter(ch->tim->timx);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fcf1 	bl	8009b1c <LL_TIM_EnableCounter>
 800a13a:	e008      	b.n	800a14e <STRHAL_TIM_PWM_Enable+0x86>
	}
	else
	{
		LL_TIM_CC_DisableChannel(ch->tim->timx, ch->n);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7ff fd2b 	bl	8009ba4 <LL_TIM_CC_DisableChannel>
	}

	return enable;
 800a14e:	683b      	ldr	r3, [r7, #0]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	0800bf90 	.word	0x0800bf90

0800a15c <STRHAL_TIM_Heartbeat_Init>:

int32_t STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_BasicTimerId_t id, uint16_t psc, uint16_t res)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08a      	sub	sp, #40	; 0x28
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	71fb      	strb	r3, [r7, #7]
 800a166:	460b      	mov	r3, r1
 800a168:	80bb      	strh	r3, [r7, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	2b02      	cmp	r3, #2
 800a172:	d902      	bls.n	800a17a <STRHAL_TIM_Heartbeat_Init+0x1e>
		return -1;
 800a174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a178:	e043      	b.n	800a202 <STRHAL_TIM_Heartbeat_Init+0xa6>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 800a17a:	79fa      	ldrb	r2, [r7, #7]
 800a17c:	4613      	mov	r3, r2
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4a21      	ldr	r2, [pc, #132]	; (800a20c <STRHAL_TIM_Heartbeat_Init+0xb0>)
 800a186:	4413      	add	r3, r2
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype != STRHAL_TIM_USAGE_000)
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	799b      	ldrb	r3, [r3, #6]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <STRHAL_TIM_Heartbeat_Init+0x3c>
		return -1;
 800a192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a196:	e034      	b.n	800a202 <STRHAL_TIM_Heartbeat_Init+0xa6>

	LL_TIM_InitTypeDef TIM_InitStruct =
 800a198:	f107 030c 	add.w	r3, r7, #12
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	605a      	str	r2, [r3, #4]
 800a1a2:	609a      	str	r2, [r3, #8]
 800a1a4:	60da      	str	r2, [r3, #12]
 800a1a6:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 800a1b0:	887b      	ldrh	r3, [r7, #2]
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 800a1b6:	88bb      	ldrh	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <STRHAL_TIM_Heartbeat_Init+0x68>
 800a1bc:	88bb      	ldrh	r3, [r7, #4]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	e000      	b.n	800a1c6 <STRHAL_TIM_Heartbeat_Init+0x6a>
 800a1c4:	88bb      	ldrh	r3, [r7, #4]
 800a1c6:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f107 020c 	add.w	r2, r7, #12
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fc f920 	bl	8006418 <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff fcc0 	bl	8009b62 <LL_TIM_EnableARRPreload>

	tim->cfreq = 0;
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_BRN;
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	2203      	movs	r2, #3
 800a1ec:	719a      	strb	r2, [r3, #6]

	uint16_t freq = SystemCoreClock / (res * psc);
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <STRHAL_TIM_Heartbeat_Init+0xb4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	887a      	ldrh	r2, [r7, #2]
 800a1f4:	88b9      	ldrh	r1, [r7, #4]
 800a1f6:	fb01 f202 	mul.w	r2, r1, r2
 800a1fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1fe:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 800a200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 800a202:	4618      	mov	r0, r3
 800a204:	3728      	adds	r7, #40	; 0x28
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20000034 	.word	0x20000034
 800a210:	20000000 	.word	0x20000000

0800a214 <STRHAL_TIM_Heartbeat_Subscribe>:

int STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_BasicTimerId_t id, STRHAL_TIM_Burnable_t burn)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b02      	cmp	r3, #2
 800a224:	d902      	bls.n	800a22c <STRHAL_TIM_Heartbeat_Subscribe+0x18>
		return -1;
 800a226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a22a:	e012      	b.n	800a252 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 800a22c:	79fa      	ldrb	r2, [r7, #7]
 800a22e:	4613      	mov	r3, r2
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4a0a      	ldr	r2, [pc, #40]	; (800a260 <STRHAL_TIM_Heartbeat_Subscribe+0x4c>)
 800a238:	4413      	add	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	799b      	ldrb	r3, [r3, #6]
 800a240:	2b03      	cmp	r3, #3
 800a242:	d002      	beq.n	800a24a <STRHAL_TIM_Heartbeat_Subscribe+0x36>
		return -1;
 800a244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a248:	e003      	b.n	800a252 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	tim->burnie = burn;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	609a      	str	r2, [r3, #8]
	return 0;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20000034 	.word	0x20000034

0800a264 <STRHAL_TIM_Heartbeat_StartHeartbeat>:

int STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_BasicTimerId_t id)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d902      	bls.n	800a27a <STRHAL_TIM_Heartbeat_StartHeartbeat+0x16>
		return -1;
 800a274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a278:	e01e      	b.n	800a2b8 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 800a27a:	79fa      	ldrb	r2, [r7, #7]
 800a27c:	4613      	mov	r3, r2
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4a0e      	ldr	r2, [pc, #56]	; (800a2c0 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x5c>)
 800a286:	4413      	add	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	799b      	ldrb	r3, [r3, #6]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d002      	beq.n	800a298 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x34>
		return -1;
 800a292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a296:	e00f      	b.n	800a2b8 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	LL_TIM_ClearFlag_UPDATE(tim->timx);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff fd61 	bl	8009d64 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(tim->timx);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff fd7d 	bl	8009da6 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(tim->timx);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fc33 	bl	8009b1c <LL_TIM_EnableCounter>
	return 0;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20000034 	.word	0x20000034

0800a2c4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6))
 800a2ca:	480b      	ldr	r0, [pc, #44]	; (800a2f8 <TIM6_DAC_IRQHandler+0x34>)
 800a2cc:	f7ff fd58 	bl	8009d80 <LL_TIM_IsActiveFlag_UPDATE>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00b      	beq.n	800a2ee <TIM6_DAC_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM6];
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <TIM6_DAC_IRQHandler+0x38>)
 800a2d8:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <TIM6_DAC_IRQHandler+0x24>
			tim->burnie();
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM6);
 800a2e8:	4803      	ldr	r0, [pc, #12]	; (800a2f8 <TIM6_DAC_IRQHandler+0x34>)
 800a2ea:	f7ff fd3b 	bl	8009d64 <LL_TIM_ClearFlag_UPDATE>
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	40001000 	.word	0x40001000
 800a2fc:	20000034 	.word	0x20000034

0800a300 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800a306:	480b      	ldr	r0, [pc, #44]	; (800a334 <TIM7_IRQHandler+0x34>)
 800a308:	f7ff fd3a 	bl	8009d80 <LL_TIM_IsActiveFlag_UPDATE>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <TIM7_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM7];
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <TIM7_IRQHandler+0x38>)
 800a314:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <TIM7_IRQHandler+0x24>
			tim->burnie();
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM7);
 800a324:	4803      	ldr	r0, [pc, #12]	; (800a334 <TIM7_IRQHandler+0x34>)
 800a326:	f7ff fd1d 	bl	8009d64 <LL_TIM_ClearFlag_UPDATE>
	}
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	40001400 	.word	0x40001400
 800a338:	20000040 	.word	0x20000040

0800a33c <__NVIC_GetPriorityGrouping>:
{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a340:	4b04      	ldr	r3, [pc, #16]	; (800a354 <__NVIC_GetPriorityGrouping+0x18>)
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	0a1b      	lsrs	r3, r3, #8
 800a346:	f003 0307 	and.w	r3, r3, #7
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	e000ed00 	.word	0xe000ed00

0800a358 <__NVIC_EnableIRQ>:
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a366:	2b00      	cmp	r3, #0
 800a368:	db0b      	blt.n	800a382 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	f003 021f 	and.w	r2, r3, #31
 800a370:	4907      	ldr	r1, [pc, #28]	; (800a390 <__NVIC_EnableIRQ+0x38>)
 800a372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a376:	095b      	lsrs	r3, r3, #5
 800a378:	2001      	movs	r0, #1
 800a37a:	fa00 f202 	lsl.w	r2, r0, r2
 800a37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a382:	bf00      	nop
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	e000e100 	.word	0xe000e100

0800a394 <__NVIC_SetPriority>:
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	db0a      	blt.n	800a3be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	490c      	ldr	r1, [pc, #48]	; (800a3e0 <__NVIC_SetPriority+0x4c>)
 800a3ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3b2:	0112      	lsls	r2, r2, #4
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a3bc:	e00a      	b.n	800a3d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	4908      	ldr	r1, [pc, #32]	; (800a3e4 <__NVIC_SetPriority+0x50>)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	3b04      	subs	r3, #4
 800a3cc:	0112      	lsls	r2, r2, #4
 800a3ce:	b2d2      	uxtb	r2, r2
 800a3d0:	440b      	add	r3, r1
 800a3d2:	761a      	strb	r2, [r3, #24]
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	e000e100 	.word	0xe000e100
 800a3e4:	e000ed00 	.word	0xe000ed00

0800a3e8 <NVIC_EncodePriority>:
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b089      	sub	sp, #36	; 0x24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	f1c3 0307 	rsb	r3, r3, #7
 800a402:	2b04      	cmp	r3, #4
 800a404:	bf28      	it	cs
 800a406:	2304      	movcs	r3, #4
 800a408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	3304      	adds	r3, #4
 800a40e:	2b06      	cmp	r3, #6
 800a410:	d902      	bls.n	800a418 <NVIC_EncodePriority+0x30>
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	3b03      	subs	r3, #3
 800a416:	e000      	b.n	800a41a <NVIC_EncodePriority+0x32>
 800a418:	2300      	movs	r3, #0
 800a41a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a41c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	fa02 f303 	lsl.w	r3, r2, r3
 800a426:	43da      	mvns	r2, r3
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	401a      	ands	r2, r3
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	fa01 f303 	lsl.w	r3, r1, r3
 800a43a:	43d9      	mvns	r1, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a440:	4313      	orrs	r3, r2
}
 800a442:	4618      	mov	r0, r3
 800a444:	3724      	adds	r7, #36	; 0x24
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
	...

0800a450 <LL_AHB1_GRP1_EnableClock>:
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a458:	4b08      	ldr	r3, [pc, #32]	; (800a47c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a45a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a45c:	4907      	ldr	r1, [pc, #28]	; (800a47c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4313      	orrs	r3, r2
 800a462:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a464:	4b05      	ldr	r3, [pc, #20]	; (800a47c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4013      	ands	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a46e:	68fb      	ldr	r3, [r7, #12]
}
 800a470:	bf00      	nop
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	40021000 	.word	0x40021000

0800a480 <LL_AHB2_GRP1_EnableClock>:
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a488:	4b08      	ldr	r3, [pc, #32]	; (800a4ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800a48a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a48c:	4907      	ldr	r1, [pc, #28]	; (800a4ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4313      	orrs	r3, r2
 800a492:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a494:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800a496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4013      	ands	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a49e:	68fb      	ldr	r3, [r7, #12]
}
 800a4a0:	bf00      	nop
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	40021000 	.word	0x40021000

0800a4b0 <LL_APB1_GRP1_EnableClock>:
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a4b8:	4b08      	ldr	r3, [pc, #32]	; (800a4dc <LL_APB1_GRP1_EnableClock+0x2c>)
 800a4ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4bc:	4907      	ldr	r1, [pc, #28]	; (800a4dc <LL_APB1_GRP1_EnableClock+0x2c>)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <LL_APB1_GRP1_EnableClock+0x2c>)
 800a4c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
}
 800a4d0:	bf00      	nop
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	40021000 	.word	0x40021000

0800a4e0 <LL_APB2_GRP1_EnableClock>:
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800a4e8:	4b08      	ldr	r3, [pc, #32]	; (800a50c <LL_APB2_GRP1_EnableClock+0x2c>)
 800a4ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a4ec:	4907      	ldr	r1, [pc, #28]	; (800a50c <LL_APB2_GRP1_EnableClock+0x2c>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a4f4:	4b05      	ldr	r3, [pc, #20]	; (800a50c <LL_APB2_GRP1_EnableClock+0x2c>)
 800a4f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
}
 800a500:	bf00      	nop
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	40021000 	.word	0x40021000

0800a510 <LL_DMA_GetDataLength>:
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800a51e:	4a07      	ldr	r2, [pc, #28]	; (800a53c <LL_DMA_GetDataLength+0x2c>)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	4413      	add	r3, r2
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4413      	add	r3, r2
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	b29b      	uxth	r3, r3
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	0800c818 	.word	0x0800c818

0800a540 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0302 	and.w	r3, r3, #2
 800a550:	2b02      	cmp	r3, #2
 800a552:	d101      	bne.n	800a558 <LL_DMA_IsActiveFlag_TC1+0x18>
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <LL_DMA_IsActiveFlag_TC1+0x1a>
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b20      	cmp	r3, #32
 800a578:	d101      	bne.n	800a57e <LL_DMA_IsActiveFlag_TC2+0x18>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <LL_DMA_IsActiveFlag_TC2+0x1a>
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5a0:	d101      	bne.n	800a5a6 <LL_DMA_IsActiveFlag_TC3+0x1a>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <LL_DMA_IsActiveFlag_TC3+0x1c>
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <LL_DMA_IsActiveFlag_TC4>:
  * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c8:	d101      	bne.n	800a5ce <LL_DMA_IsActiveFlag_TC4+0x1a>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <LL_DMA_IsActiveFlag_TC4+0x1c>
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d101      	bne.n	800a5f4 <LL_DMA_IsActiveFlag_TE1+0x18>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <LL_DMA_IsActiveFlag_TE1+0x1a>
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 800a602:	b480      	push	{r7}
 800a604:	b083      	sub	sp, #12
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d101      	bne.n	800a61a <LL_DMA_IsActiveFlag_TE2+0x18>
 800a616:	2301      	movs	r3, #1
 800a618:	e000      	b.n	800a61c <LL_DMA_IsActiveFlag_TE2+0x1a>
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <LL_DMA_IsActiveFlag_TE3>:
  * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a63c:	d101      	bne.n	800a642 <LL_DMA_IsActiveFlag_TE3+0x1a>
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <LL_DMA_IsActiveFlag_TE3+0x1c>
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <LL_DMA_IsActiveFlag_TE4>:
  * @rmtoll ISR          TEIF4         LL_DMA_IsActiveFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4)) ? 1UL : 0UL);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a664:	d101      	bne.n	800a66a <LL_DMA_IsActiveFlag_TE4+0x1a>
 800a666:	2301      	movs	r3, #1
 800a668:	e000      	b.n	800a66c <LL_DMA_IsActiveFlag_TE4+0x1c>
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	605a      	str	r2, [r3, #4]
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2220      	movs	r2, #32
 800a69e:	605a      	str	r2, [r3, #4]
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <LL_DMA_ClearFlag_TC3>:
  * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6ba:	605a      	str	r2, [r3, #4]
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a6d6:	605a      	str	r2, [r3, #4]
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2208      	movs	r2, #8
 800a6f0:	605a      	str	r2, [r3, #4]
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2280      	movs	r2, #128	; 0x80
 800a70a:	605a      	str	r2, [r3, #4]
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <LL_DMA_ClearFlag_TE3>:
  * @rmtoll IFCR         CTEIF3        LL_DMA_ClearFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a726:	605a      	str	r2, [r3, #4]
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <LL_DMA_ClearFlag_TE4>:
  * @rmtoll IFCR         CTEIF4        LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a742:	605a      	str	r2, [r3, #4]
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800a75e:	4a0c      	ldr	r2, [pc, #48]	; (800a790 <LL_DMA_EnableIT_TC+0x40>)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	4413      	add	r3, r2
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	4413      	add	r3, r2
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4908      	ldr	r1, [pc, #32]	; (800a790 <LL_DMA_EnableIT_TC+0x40>)
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	440a      	add	r2, r1
 800a774:	7812      	ldrb	r2, [r2, #0]
 800a776:	4611      	mov	r1, r2
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	440a      	add	r2, r1
 800a77c:	f043 0302 	orr.w	r3, r3, #2
 800a780:	6013      	str	r3, [r2, #0]
}
 800a782:	bf00      	nop
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	0800c818 	.word	0x0800c818

0800a794 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 800a7a2:	4a0c      	ldr	r2, [pc, #48]	; (800a7d4 <LL_DMA_EnableIT_TE+0x40>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4908      	ldr	r1, [pc, #32]	; (800a7d4 <LL_DMA_EnableIT_TE+0x40>)
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	440a      	add	r2, r1
 800a7b8:	7812      	ldrb	r2, [r2, #0]
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	440a      	add	r2, r1
 800a7c0:	f043 0308 	orr.w	r3, r3, #8
 800a7c4:	6013      	str	r3, [r2, #0]
}
 800a7c6:	bf00      	nop
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	0800c818 	.word	0x0800c818

0800a7d8 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800a7e6:	4a0a      	ldr	r2, [pc, #40]	; (800a810 <LL_DMA_IsEnabledIT_TC+0x38>)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0302 	and.w	r3, r3, #2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d101      	bne.n	800a802 <LL_DMA_IsEnabledIT_TC+0x2a>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e000      	b.n	800a804 <LL_DMA_IsEnabledIT_TC+0x2c>
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	0800c818 	.word	0x0800c818

0800a814 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800a822:	4a0a      	ldr	r2, [pc, #40]	; (800a84c <LL_DMA_IsEnabledIT_TE+0x38>)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	4413      	add	r3, r2
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4413      	add	r3, r2
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0308 	and.w	r3, r3, #8
                    DMA_CCR_TEIE) == (DMA_CCR_TEIE)) ? 1UL : 0UL);
 800a836:	2b08      	cmp	r3, #8
 800a838:	d101      	bne.n	800a83e <LL_DMA_IsEnabledIT_TE+0x2a>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <LL_DMA_IsEnabledIT_TE+0x2c>
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	0800c818 	.word	0x0800c818

0800a850 <LL_USART_Enable>:
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f043 0201 	orr.w	r2, r3, #1
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	601a      	str	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <LL_USART_Disable>:
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f023 0201 	bic.w	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	601a      	str	r2, [r3, #0]
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <LL_USART_DisableFIFO>:
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <LL_USART_SetTXFIFOThreshold>:
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b089      	sub	sp, #36	; 0x24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3308      	adds	r3, #8
 800a8be:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	e853 3f00 	ldrex	r3, [r3]
 800a8c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	075b      	lsls	r3, r3, #29
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	61fb      	str	r3, [r7, #28]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	3308      	adds	r3, #8
 800a8da:	69fa      	ldr	r2, [r7, #28]
 800a8dc:	61ba      	str	r2, [r7, #24]
 800a8de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e0:	6979      	ldr	r1, [r7, #20]
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	e841 2300 	strex	r3, r2, [r1]
 800a8e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1e4      	bne.n	800a8ba <LL_USART_SetTXFIFOThreshold+0xa>
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	3724      	adds	r7, #36	; 0x24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <LL_USART_SetRXFIFOThreshold>:
{
 800a8fe:	b480      	push	{r7}
 800a900:	b089      	sub	sp, #36	; 0x24
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3308      	adds	r3, #8
 800a90c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	60bb      	str	r3, [r7, #8]
   return(result);
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	065b      	lsls	r3, r3, #25
 800a920:	4313      	orrs	r3, r2
 800a922:	61fb      	str	r3, [r7, #28]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3308      	adds	r3, #8
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	61ba      	str	r2, [r7, #24]
 800a92c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6979      	ldr	r1, [r7, #20]
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	613b      	str	r3, [r7, #16]
   return(result);
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e4      	bne.n	800a908 <LL_USART_SetRXFIFOThreshold+0xa>
}
 800a93e:	bf00      	nop
 800a940:	bf00      	nop
 800a942:	3724      	adds	r7, #36	; 0x24
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <LL_USART_EnableDirectionRx>:
{
 800a94c:	b480      	push	{r7}
 800a94e:	b089      	sub	sp, #36	; 0x24
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f043 0304 	orr.w	r3, r3, #4
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	61ba      	str	r2, [r7, #24]
 800a96e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a970:	6979      	ldr	r1, [r7, #20]
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	e841 2300 	strex	r3, r2, [r1]
 800a978:	613b      	str	r3, [r7, #16]
   return(result);
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e9      	bne.n	800a954 <LL_USART_EnableDirectionRx+0x8>
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	3724      	adds	r7, #36	; 0x24
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <LL_USART_EnableDirectionTx>:
{
 800a98e:	b480      	push	{r7}
 800a990:	b089      	sub	sp, #36	; 0x24
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f043 0308 	orr.w	r3, r3, #8
 800a9a8:	61fb      	str	r3, [r7, #28]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	69fa      	ldr	r2, [r7, #28]
 800a9ae:	61ba      	str	r2, [r7, #24]
 800a9b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b2:	6979      	ldr	r1, [r7, #20]
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	e841 2300 	strex	r3, r2, [r1]
 800a9ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1e9      	bne.n	800a996 <LL_USART_EnableDirectionTx+0x8>
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	3724      	adds	r7, #36	; 0x24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <LL_USART_SetTXRXSwap>:
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	605a      	str	r2, [r3, #4]
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	609a      	str	r2, [r3, #8]
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d101      	bne.n	800aa3a <LL_USART_IsActiveFlag_TC+0x18>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <LL_USART_IsActiveFlag_TC+0x1a>
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa58:	2b80      	cmp	r3, #128	; 0x80
 800aa5a:	d101      	bne.n	800aa60 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b089      	sub	sp, #36	; 0x24
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa8a:	61fb      	str	r3, [r7, #28]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3308      	adds	r3, #8
 800aa90:	69fa      	ldr	r2, [r7, #28]
 800aa92:	61ba      	str	r2, [r7, #24]
 800aa94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6979      	ldr	r1, [r7, #20]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e7      	bne.n	800aa76 <LL_USART_EnableDMAReq_RX+0x8>
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	3724      	adds	r7, #36	; 0x24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b089      	sub	sp, #36	; 0x24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3308      	adds	r3, #8
 800aac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad0:	61fb      	str	r3, [r7, #28]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3308      	adds	r3, #8
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	61ba      	str	r2, [r7, #24]
 800aada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	6979      	ldr	r1, [r7, #20]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	613b      	str	r3, [r7, #16]
   return(result);
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e7      	bne.n	800aabc <LL_USART_EnableDMAReq_TX+0x8>
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	3724      	adds	r7, #36	; 0x24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <STRHAL_UART_Init>:
{ [STRHAL_UART1] =
{ .uart = USART1, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_USART1_RX, .dma_tx_request = LL_DMAMUX_REQ_USART1_TX, .it_rx_handler = DMA1_Channel1_IRQn, .it_tx_handler = DMA1_Channel2_IRQn, .baud_rate = 9600, .swap = 1 }, [STRHAL_UART2] =
{ .uart = USART2, .dma_rx_channel = LL_DMA_CHANNEL_3, .dma_tx_channel = LL_DMA_CHANNEL_4, .dma_rx_request = LL_DMAMUX_REQ_USART2_RX, .dma_tx_request = LL_DMAMUX_REQ_USART2_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 } };

void STRHAL_UART_Init()
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800ab02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ab06:	f7ff fceb 	bl	800a4e0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800ab0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ab0e:	f7ff fccf 	bl	800a4b0 <LL_APB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800ab12:	2001      	movs	r0, #1
 800ab14:	f7ff fcb4 	bl	800a480 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800ab18:	2002      	movs	r0, #2
 800ab1a:	f7ff fcb1 	bl	800a480 <LL_AHB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 800ab1e:	2004      	movs	r0, #4
 800ab20:	f7ff fc96 	bl	800a450 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800ab24:	2001      	movs	r0, #1
 800ab26:	f7ff fc93 	bl	800a450 <LL_AHB1_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 800ab2a:	463b      	mov	r3, r7
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	605a      	str	r2, [r3, #4]
 800ab32:	609a      	str	r2, [r3, #8]
 800ab34:	60da      	str	r2, [r3, #12]
 800ab36:	611a      	str	r2, [r3, #16]
 800ab38:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 800ab3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ab3e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ab40:	2302      	movs	r3, #2
 800ab42:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800ab44:	2302      	movs	r3, #2
 800ab46:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800ab50:	2307      	movs	r3, #7
 800ab52:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab54:	463b      	mov	r3, r7
 800ab56:	4619      	mov	r1, r3
 800ab58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab5c:	f7fb f827 	bl	8005bae <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_3 | LL_GPIO_PIN_4;
 800ab60:	2318      	movs	r3, #24
 800ab62:	603b      	str	r3, [r7, #0]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab64:	463b      	mov	r3, r7
 800ab66:	4619      	mov	r1, r3
 800ab68:	4803      	ldr	r0, [pc, #12]	; (800ab78 <STRHAL_UART_Init+0x7c>)
 800ab6a:	f7fb f820 	bl	8005bae <LL_GPIO_Init>
}
 800ab6e:	bf00      	nop
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	48000400 	.word	0x48000400

0800ab7c <STRHAL_UART_Instance_Init>:

int STRHAL_UART_Instance_Init(STRHAL_UART_Id_t uart_id)
{
 800ab7c:	b590      	push	{r4, r7, lr}
 800ab7e:	b097      	sub	sp, #92	; 0x5c
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d902      	bls.n	800ab92 <STRHAL_UART_Instance_Init+0x16>
		return -1;
 800ab8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab90:	e126      	b.n	800ade0 <STRHAL_UART_Instance_Init+0x264>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	f44f 720e 	mov.w	r2, #568	; 0x238
 800ab98:	fb02 f303 	mul.w	r3, r2, r3
 800ab9c:	4a92      	ldr	r2, [pc, #584]	; (800ade8 <STRHAL_UART_Instance_Init+0x26c>)
 800ab9e:	4413      	add	r3, r2
 800aba0:	657b      	str	r3, [r7, #84]	; 0x54

	LL_USART_Disable(_uart->uart);
 800aba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fe62 	bl	800a870 <LL_USART_Disable>

	LL_USART_InitTypeDef UART_InitStruct =
 800abac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800abb0:	2220      	movs	r2, #32
 800abb2:	2100      	movs	r1, #0
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 fc23 	bl	800b400 <memset>
	{ 0 };
	UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800abbe:	2300      	movs	r3, #0
 800abc0:	643b      	str	r3, [r7, #64]	; 0x40
	UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	647b      	str	r3, [r7, #68]	; 0x44
	UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800abc6:	230c      	movs	r3, #12
 800abc8:	64bb      	str	r3, [r7, #72]	; 0x48
	UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800abca:	2300      	movs	r3, #0
 800abcc:	64fb      	str	r3, [r7, #76]	; 0x4c
	UART_InitStruct.BaudRate = _uart->baud_rate;
 800abce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abd0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800abd4:	63bb      	str	r3, [r7, #56]	; 0x38
	UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800abd6:	2300      	movs	r3, #0
 800abd8:	637b      	str	r3, [r7, #52]	; 0x34
	UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800abda:	2300      	movs	r3, #0
 800abdc:	653b      	str	r3, [r7, #80]	; 0x50
	LL_USART_Init(_uart->uart, &UART_InitStruct);
 800abde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fc f8a3 	bl	8006d34 <LL_USART_Init>

	LL_USART_SetTXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 800abee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2100      	movs	r1, #0
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7ff fe5b 	bl	800a8b0 <LL_USART_SetTXFIFOThreshold>
	LL_USART_SetRXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 800abfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff fe7c 	bl	800a8fe <LL_USART_SetRXFIFOThreshold>
	LL_USART_DisableFIFO(_uart->uart);
 800ac06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff fe40 	bl	800a890 <LL_USART_DisableFIFO>
	LL_USART_ConfigAsyncMode(_uart->uart);
 800ac10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff feee 	bl	800a9f6 <LL_USART_ConfigAsyncMode>
	if (_uart->swap)
 800ac1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac1c:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d006      	beq.n	800ac32 <STRHAL_UART_Instance_Init+0xb6>
		LL_USART_SetTXRXSwap(_uart->uart, LL_USART_TXRX_SWAPPED);
 800ac24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fecf 	bl	800a9d0 <LL_USART_SetTXRXSwap>

	LL_DMA_InitTypeDef DMA_InitStruct =
 800ac32:	f107 0308 	add.w	r3, r7, #8
 800ac36:	222c      	movs	r2, #44	; 0x2c
 800ac38:	2100      	movs	r1, #0
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fbe0 	bl	800b400 <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800ac40:	2300      	movs	r3, #0
 800ac42:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->rx_buf.data;
 800ac44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac46:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ac4a:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800ac50:	2380      	movs	r3, #128	; 0x80
 800ac52:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 800ac54:	2320      	movs	r3, #32
 800ac56:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 800ac58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac5c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->RDR);
 800ac5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3324      	adds	r3, #36	; 0x24
 800ac64:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = (uint32_t) LL_DMA_PDATAALIGN_BYTE;
 800ac66:	2300      	movs	r3, #0
 800ac68:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_rx_request;
 800ac6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac70:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800ac76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac7a:	633b      	str	r3, [r7, #48]	; 0x30

	LL_DMA_Init(DMA1, _uart->dma_rx_channel, &DMA_InitStruct);
 800ac7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac82:	f107 0208 	add.w	r2, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	4858      	ldr	r0, [pc, #352]	; (800adec <STRHAL_UART_Instance_Init+0x270>)
 800ac8a:	f7fa fe05 	bl	8005898 <LL_DMA_Init>

	LL_USART_EnableDMAReq_RX(_uart->uart);
 800ac8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff feeb 	bl	800aa6e <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_rx_channel);
 800ac98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4852      	ldr	r0, [pc, #328]	; (800adec <STRHAL_UART_Instance_Init+0x270>)
 800aca2:	f7ff fd55 	bl	800a750 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_rx_channel);
 800aca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aca8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800acac:	4619      	mov	r1, r3
 800acae:	484f      	ldr	r0, [pc, #316]	; (800adec <STRHAL_UART_Instance_Init+0x270>)
 800acb0:	f7ff fd70 	bl	800a794 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_rx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 1));
 800acb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acb6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800acba:	b25c      	sxtb	r4, r3
 800acbc:	f7ff fb3e 	bl	800a33c <__NVIC_GetPriorityGrouping>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2201      	movs	r2, #1
 800acc4:	2101      	movs	r1, #1
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff fb8e 	bl	800a3e8 <NVIC_EncodePriority>
 800accc:	4603      	mov	r3, r0
 800acce:	4619      	mov	r1, r3
 800acd0:	4620      	mov	r0, r4
 800acd2:	f7ff fb5f 	bl	800a394 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_rx_handler);
 800acd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acd8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800acdc:	b25b      	sxtb	r3, r3
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff fb3a 	bl	800a358 <__NVIC_EnableIRQ>

	/*DMA configuration for TX */
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800ace4:	2310      	movs	r3, #16
 800ace6:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->tx_buf.data;
 800ace8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acea:	3304      	adds	r3, #4
 800acec:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800acee:	2300      	movs	r3, #0
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800acf2:	2380      	movs	r3, #128	; 0x80
 800acf4:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 800acfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acfe:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->TDR);
 800ad00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3328      	adds	r3, #40	; 0x28
 800ad06:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_tx_request;
 800ad10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad12:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ad16:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800ad18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad1c:	633b      	str	r3, [r7, #48]	; 0x30
	LL_DMA_Init(DMA1, _uart->dma_tx_channel, &DMA_InitStruct);
 800ad1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad20:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ad24:	f107 0208 	add.w	r2, r7, #8
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4830      	ldr	r0, [pc, #192]	; (800adec <STRHAL_UART_Instance_Init+0x270>)
 800ad2c:	f7fa fdb4 	bl	8005898 <LL_DMA_Init>

	LL_USART_EnableDMAReq_TX(_uart->uart);
 800ad30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff febd 	bl	800aab4 <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_tx_channel);
 800ad3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad3c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ad40:	4619      	mov	r1, r3
 800ad42:	482a      	ldr	r0, [pc, #168]	; (800adec <STRHAL_UART_Instance_Init+0x270>)
 800ad44:	f7ff fd04 	bl	800a750 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_tx_channel);
 800ad48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad4a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4826      	ldr	r0, [pc, #152]	; (800adec <STRHAL_UART_Instance_Init+0x270>)
 800ad52:	f7ff fd1f 	bl	800a794 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_tx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2));
 800ad56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad58:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ad5c:	b25c      	sxtb	r4, r3
 800ad5e:	f7ff faed 	bl	800a33c <__NVIC_GetPriorityGrouping>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2202      	movs	r2, #2
 800ad66:	2101      	movs	r1, #1
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff fb3d 	bl	800a3e8 <NVIC_EncodePriority>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	4619      	mov	r1, r3
 800ad72:	4620      	mov	r0, r4
 800ad74:	f7ff fb0e 	bl	800a394 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_tx_handler);
 800ad78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad7a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff fae9 	bl	800a358 <__NVIC_EnableIRQ>

	LL_USART_EnableDirectionTx(_uart->uart);
 800ad86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff fdff 	bl	800a98e <LL_USART_EnableDirectionTx>
	LL_USART_EnableDirectionRx(_uart->uart);
 800ad90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fdd9 	bl	800a94c <LL_USART_EnableDirectionRx>
	LL_USART_Enable(_uart->uart);
 800ad9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff fd56 	bl	800a850 <LL_USART_Enable>

	_uart->state = STRHAL_UART_STATE_00;
 800ada4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->rx_buf.h = _uart->rx_buf.n = _uart->tx_buf.n = 0;
 800adac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800adb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800adba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800adc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800adc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 800adcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800add2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	_uart->tx_buf.n = 0;
 800add6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800add8:	2200      	movs	r2, #0
 800adda:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	return 0;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	375c      	adds	r7, #92	; 0x5c
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd90      	pop	{r4, r7, pc}
 800ade8:	20000074 	.word	0x20000074
 800adec:	40020000 	.word	0x40020000

0800adf0 <STRHAL_UART_Debug_Write_Blocking>:
{
	return STRHAL_UART_Write_DMA(STRHAL_UART_DEBUG, data, n);
}

int32_t STRHAL_UART_Debug_Write_Blocking(const char *data, uint32_t n, uint16_t timeout)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4613      	mov	r3, r2
 800adfc:	80fb      	strh	r3, [r7, #6]
	return STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, data, n, timeout);
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	68f9      	ldr	r1, [r7, #12]
 800ae04:	2001      	movs	r0, #1
 800ae06:	f000 f805 	bl	800ae14 <STRHAL_UART_Write_Blocking>
 800ae0a:	4603      	mov	r3, r0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <STRHAL_UART_Write_Blocking>:

	return n;
}

int32_t STRHAL_UART_Write_Blocking(STRHAL_UART_Id_t uart_id, const char *data, uint32_t n, uint16_t timeout)
{
 800ae14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae18:	b08c      	sub	sp, #48	; 0x30
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6139      	str	r1, [r7, #16]
 800ae1e:	60fa      	str	r2, [r7, #12]
 800ae20:	461a      	mov	r2, r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]
 800ae26:	4613      	mov	r3, r2
 800ae28:	82bb      	strh	r3, [r7, #20]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d902      	bls.n	800ae36 <STRHAL_UART_Write_Blocking+0x22>
		return -1;
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae34:	e0a7      	b.n	800af86 <STRHAL_UART_Write_Blocking+0x172>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	f44f 720e 	mov.w	r2, #568	; 0x238
 800ae3c:	fb02 f303 	mul.w	r3, r2, r3
 800ae40:	4a53      	ldr	r2, [pc, #332]	; (800af90 <STRHAL_UART_Write_Blocking+0x17c>)
 800ae42:	4413      	add	r3, r2
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24

	if (_uart->state & (STRHAL_UART_STATE_TX | STRHAL_UART_STATE_TE) || n > STRHAL_UART_BUF_SIZE)
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800ae4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d103      	bne.n	800ae5c <STRHAL_UART_Write_Blocking+0x48>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae5a:	d901      	bls.n	800ae60 <STRHAL_UART_Write_Blocking+0x4c>
		return 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e092      	b.n	800af86 <STRHAL_UART_Write_Blocking+0x172>

	uint32_t i;
	for (i = 0; i < n; ++i)
 800ae60:	2300      	movs	r3, #0
 800ae62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae64:	e00c      	b.n	800ae80 <STRHAL_UART_Write_Blocking+0x6c>
		_uart->tx_buf.data[i] = data[i];
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	4413      	add	r3, r2
 800ae6c:	7819      	ldrb	r1, [r3, #0]
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	4413      	add	r3, r2
 800ae74:	3304      	adds	r3, #4
 800ae76:	460a      	mov	r2, r1
 800ae78:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d3ee      	bcc.n	800ae66 <STRHAL_UART_Write_Blocking+0x52>

	_uart->tx_buf.n = n;
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	_uart->state &= ~STRHAL_UART_STATE_TC;
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800ae96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TX;
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800aea8:	f043 0320 	orr.w	r3, r3, #32
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	uint8_t *tx_data = (uint8_t*) _uart->tx_buf.data;
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	62bb      	str	r3, [r7, #40]	; 0x28

	uint64_t tx_starttime = STRHAL_Systick_GetTick();
 800aeba:	f7fe fd3d 	bl	8009938 <STRHAL_Systick_GetTick>
 800aebe:	e9c7 0106 	strd	r0, r1, [r7, #24]

	while (_uart->tx_buf.n > 0)
 800aec2:	e02d      	b.n	800af20 <STRHAL_UART_Write_Blocking+0x10c>
	{
		// wait until byte transmitted, or timeout
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
		{
			if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 800aec4:	f7fe fd38 	bl	8009938 <STRHAL_Systick_GetTick>
 800aec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aecc:	ebb0 0802 	subs.w	r8, r0, r2
 800aed0:	eb61 0903 	sbc.w	r9, r1, r3
 800aed4:	8abb      	ldrh	r3, [r7, #20]
 800aed6:	2200      	movs	r2, #0
 800aed8:	603b      	str	r3, [r7, #0]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aee0:	460b      	mov	r3, r1
 800aee2:	4543      	cmp	r3, r8
 800aee4:	4613      	mov	r3, r2
 800aee6:	eb73 0309 	sbcs.w	r3, r3, r9
 800aeea:	d202      	bcs.n	800aef2 <STRHAL_UART_Write_Blocking+0xde>
				return -1;
 800aeec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aef0:	e049      	b.n	800af86 <STRHAL_UART_Write_Blocking+0x172>
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff fda6 	bl	800aa48 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0e0      	beq.n	800aec4 <STRHAL_UART_Write_Blocking+0xb0>
		}
		_uart->uart->TDR = (uint8_t) (*tx_data & 0xFFU);
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	629a      	str	r2, [r3, #40]	; 0x28
		tx_data++;
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	3301      	adds	r3, #1
 800af10:	62bb      	str	r3, [r7, #40]	; 0x28
		_uart->tx_buf.n--;
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800af18:	1e5a      	subs	r2, r3, #1
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	while (_uart->tx_buf.n > 0)
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1e3      	bne.n	800aef2 <STRHAL_UART_Write_Blocking+0xde>
	}

	// wait until transmission complete, or timeout
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 800af2a:	e011      	b.n	800af50 <STRHAL_UART_Write_Blocking+0x13c>
	{
		if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 800af2c:	f7fe fd04 	bl	8009938 <STRHAL_Systick_GetTick>
 800af30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af34:	1a84      	subs	r4, r0, r2
 800af36:	eb61 0503 	sbc.w	r5, r1, r3
 800af3a:	8abb      	ldrh	r3, [r7, #20]
 800af3c:	2200      	movs	r2, #0
 800af3e:	469a      	mov	sl, r3
 800af40:	4693      	mov	fp, r2
 800af42:	45a2      	cmp	sl, r4
 800af44:	eb7b 0305 	sbcs.w	r3, fp, r5
 800af48:	d202      	bcs.n	800af50 <STRHAL_UART_Write_Blocking+0x13c>
			return -1;
 800af4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af4e:	e01a      	b.n	800af86 <STRHAL_UART_Write_Blocking+0x172>
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff fd64 	bl	800aa22 <LL_USART_IsActiveFlag_TC>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0e5      	beq.n	800af2c <STRHAL_UART_Write_Blocking+0x118>
	}

	_uart->state &= ~STRHAL_UART_STATE_TX;
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800af66:	f023 0320 	bic.w	r3, r3, #32
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TC;
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800af78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af7c:	b2da      	uxtb	r2, r3
 800af7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af80:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	return n;
 800af84:	68fb      	ldr	r3, [r7, #12]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3730      	adds	r7, #48	; 0x30
 800af8a:	46bd      	mov	sp, r7
 800af8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af90:	20000074 	.word	0x20000074

0800af94 <DMA1_Channel1_IRQHandler>:
{
	return _uarts[uart_id].state;
}

void DMA1_Channel1_IRQHandler(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART1];
 800af9a:	4b3f      	ldr	r3, [pc, #252]	; (800b098 <DMA1_Channel1_IRQHandler+0x104>)
 800af9c:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 800af9e:	2100      	movs	r1, #0
 800afa0:	483e      	ldr	r0, [pc, #248]	; (800b09c <DMA1_Channel1_IRQHandler+0x108>)
 800afa2:	f7ff fc19 	bl	800a7d8 <LL_DMA_IsEnabledIT_TC>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d037      	beq.n	800b01c <DMA1_Channel1_IRQHandler+0x88>
 800afac:	483b      	ldr	r0, [pc, #236]	; (800b09c <DMA1_Channel1_IRQHandler+0x108>)
 800afae:	f7ff fac7 	bl	800a540 <LL_DMA_IsActiveFlag_TC1>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d031      	beq.n	800b01c <DMA1_Channel1_IRQHandler+0x88>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 800afb8:	4838      	ldr	r0, [pc, #224]	; (800b09c <DMA1_Channel1_IRQHandler+0x108>)
 800afba:	f7ff fb5d 	bl	800a678 <LL_DMA_ClearFlag_TC1>
		_uart->rx_buf.n += _uart->rx_buf.n_dma;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800afca:	441a      	add	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800afe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afe6:	d953      	bls.n	800b090 <DMA1_Channel1_IRQHandler+0xfc>
		{
			_uart->rx_buf.h += _uart->rx_buf.n % STRHAL_UART_BUF_SIZE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	441a      	add	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			_uart->rx_buf.n = STRHAL_UART_BUF_SIZE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b004:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			_uart->state |= STRHAL_UART_STATE_RO;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b00e:	f043 0308 	orr.w	r3, r3, #8
 800b012:	b2da      	uxtb	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 800b01a:	e039      	b.n	800b090 <DMA1_Channel1_IRQHandler+0xfc>
		}
	}

	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 800b01c:	2100      	movs	r1, #0
 800b01e:	481f      	ldr	r0, [pc, #124]	; (800b09c <DMA1_Channel1_IRQHandler+0x108>)
 800b020:	f7ff fbf8 	bl	800a814 <LL_DMA_IsEnabledIT_TE>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d032      	beq.n	800b090 <DMA1_Channel1_IRQHandler+0xfc>
 800b02a:	481c      	ldr	r0, [pc, #112]	; (800b09c <DMA1_Channel1_IRQHandler+0x108>)
 800b02c:	f7ff fad6 	bl	800a5dc <LL_DMA_IsActiveFlag_TE1>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d02c      	beq.n	800b090 <DMA1_Channel1_IRQHandler+0xfc>
	{
		LL_DMA_ClearFlag_TE1(DMA1);
 800b036:	4819      	ldr	r0, [pc, #100]	; (800b09c <DMA1_Channel1_IRQHandler+0x108>)
 800b038:	f7ff fb54 	bl	800a6e4 <LL_DMA_ClearFlag_TE1>
		_uart->rx_buf.n = STRHAL_UART_BUF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 800b03c:	2100      	movs	r1, #0
 800b03e:	4817      	ldr	r0, [pc, #92]	; (800b09c <DMA1_Channel1_IRQHandler+0x108>)
 800b040:	f7ff fa66 	bl	800a510 <LL_DMA_GetDataLength>
 800b044:	4603      	mov	r3, r0
 800b046:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

		_uart->state &= ~STRHAL_UART_STATE_RX;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b056:	f023 0302 	bic.w	r3, r3, #2
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_RC;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b068:	f023 0304 	bic.w	r3, r3, #4
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_RE;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b07a:	f043 0310 	orr.w	r3, r3, #16
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		STRHAL_OofHandler(STRHAL_OOF_UART, "DMA FAIL");
 800b086:	4906      	ldr	r1, [pc, #24]	; (800b0a0 <DMA1_Channel1_IRQHandler+0x10c>)
 800b088:	2008      	movs	r0, #8
 800b08a:	f7f6 fbf7 	bl	800187c <STRHAL_OofHandler>
	}
}
 800b08e:	e7ff      	b.n	800b090 <DMA1_Channel1_IRQHandler+0xfc>
 800b090:	bf00      	nop
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	20000074 	.word	0x20000074
 800b09c:	40020000 	.word	0x40020000
 800b0a0:	0800b7c4 	.word	0x0800b7c4

0800b0a4 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART1];
 800b0aa:	4b2a      	ldr	r3, [pc, #168]	; (800b154 <DMA1_Channel2_IRQHandler+0xb0>)
 800b0ac:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TC2(DMA1))
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	4829      	ldr	r0, [pc, #164]	; (800b158 <DMA1_Channel2_IRQHandler+0xb4>)
 800b0b2:	f7ff fb91 	bl	800a7d8 <LL_DMA_IsEnabledIT_TC>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01b      	beq.n	800b0f4 <DMA1_Channel2_IRQHandler+0x50>
 800b0bc:	4826      	ldr	r0, [pc, #152]	; (800b158 <DMA1_Channel2_IRQHandler+0xb4>)
 800b0be:	f7ff fa52 	bl	800a566 <LL_DMA_IsActiveFlag_TC2>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d015      	beq.n	800b0f4 <DMA1_Channel2_IRQHandler+0x50>
	{
		LL_DMA_ClearFlag_TC2(DMA1);
 800b0c8:	4823      	ldr	r0, [pc, #140]	; (800b158 <DMA1_Channel2_IRQHandler+0xb4>)
 800b0ca:	f7ff fae2 	bl	800a692 <LL_DMA_ClearFlag_TC2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b0d4:	f023 0320 	bic.w	r3, r3, #32
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TC;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		LL_DMA_ClearFlag_TE2(DMA1);
		_uart->state &= ~STRHAL_UART_STATE_TX;
		_uart->state &= ~STRHAL_UART_STATE_TC;
		_uart->state |= STRHAL_UART_STATE_TE;
	}
}
 800b0f2:	e02a      	b.n	800b14a <DMA1_Channel2_IRQHandler+0xa6>
	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TE2(DMA1))
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	4818      	ldr	r0, [pc, #96]	; (800b158 <DMA1_Channel2_IRQHandler+0xb4>)
 800b0f8:	f7ff fb8c 	bl	800a814 <LL_DMA_IsEnabledIT_TE>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d023      	beq.n	800b14a <DMA1_Channel2_IRQHandler+0xa6>
 800b102:	4815      	ldr	r0, [pc, #84]	; (800b158 <DMA1_Channel2_IRQHandler+0xb4>)
 800b104:	f7ff fa7d 	bl	800a602 <LL_DMA_IsActiveFlag_TE2>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d01d      	beq.n	800b14a <DMA1_Channel2_IRQHandler+0xa6>
		LL_DMA_ClearFlag_TE2(DMA1);
 800b10e:	4812      	ldr	r0, [pc, #72]	; (800b158 <DMA1_Channel2_IRQHandler+0xb4>)
 800b110:	f7ff faf5 	bl	800a6fe <LL_DMA_ClearFlag_TE2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b11a:	f023 0320 	bic.w	r3, r3, #32
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_TC;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b130:	b2da      	uxtb	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b13e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b142:	b2da      	uxtb	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000074 	.word	0x20000074
 800b158:	40020000 	.word	0x40020000

0800b15c <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART2];
 800b162:	4b3f      	ldr	r3, [pc, #252]	; (800b260 <DMA1_Channel3_IRQHandler+0x104>)
 800b164:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_3) && LL_DMA_IsActiveFlag_TC3(DMA1))
 800b166:	2102      	movs	r1, #2
 800b168:	483e      	ldr	r0, [pc, #248]	; (800b264 <DMA1_Channel3_IRQHandler+0x108>)
 800b16a:	f7ff fb35 	bl	800a7d8 <LL_DMA_IsEnabledIT_TC>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d037      	beq.n	800b1e4 <DMA1_Channel3_IRQHandler+0x88>
 800b174:	483b      	ldr	r0, [pc, #236]	; (800b264 <DMA1_Channel3_IRQHandler+0x108>)
 800b176:	f7ff fa09 	bl	800a58c <LL_DMA_IsActiveFlag_TC3>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d031      	beq.n	800b1e4 <DMA1_Channel3_IRQHandler+0x88>
	{
		LL_DMA_ClearFlag_TC3(DMA1);
 800b180:	4838      	ldr	r0, [pc, #224]	; (800b264 <DMA1_Channel3_IRQHandler+0x108>)
 800b182:	f7ff fa93 	bl	800a6ac <LL_DMA_ClearFlag_TC3>
		_uart->rx_buf.n += _uart->rx_buf.n_dma;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b192:	441a      	add	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ae:	d953      	bls.n	800b258 <DMA1_Channel3_IRQHandler+0xfc>
		{
			_uart->rx_buf.h += _uart->rx_buf.n % STRHAL_UART_BUF_SIZE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	441a      	add	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			_uart->rx_buf.n = STRHAL_UART_BUF_SIZE;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			_uart->state |= STRHAL_UART_STATE_RO;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b1d6:	f043 0308 	orr.w	r3, r3, #8
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 800b1e2:	e039      	b.n	800b258 <DMA1_Channel3_IRQHandler+0xfc>
		}
	}

	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_3) && LL_DMA_IsActiveFlag_TE3(DMA1))
 800b1e4:	2102      	movs	r1, #2
 800b1e6:	481f      	ldr	r0, [pc, #124]	; (800b264 <DMA1_Channel3_IRQHandler+0x108>)
 800b1e8:	f7ff fb14 	bl	800a814 <LL_DMA_IsEnabledIT_TE>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d032      	beq.n	800b258 <DMA1_Channel3_IRQHandler+0xfc>
 800b1f2:	481c      	ldr	r0, [pc, #112]	; (800b264 <DMA1_Channel3_IRQHandler+0x108>)
 800b1f4:	f7ff fa18 	bl	800a628 <LL_DMA_IsActiveFlag_TE3>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d02c      	beq.n	800b258 <DMA1_Channel3_IRQHandler+0xfc>
	{
		LL_DMA_ClearFlag_TE3(DMA1);
 800b1fe:	4819      	ldr	r0, [pc, #100]	; (800b264 <DMA1_Channel3_IRQHandler+0x108>)
 800b200:	f7ff fa8a 	bl	800a718 <LL_DMA_ClearFlag_TE3>
		_uart->rx_buf.n = STRHAL_UART_BUF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 800b204:	2102      	movs	r1, #2
 800b206:	4817      	ldr	r0, [pc, #92]	; (800b264 <DMA1_Channel3_IRQHandler+0x108>)
 800b208:	f7ff f982 	bl	800a510 <LL_DMA_GetDataLength>
 800b20c:	4603      	mov	r3, r0
 800b20e:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

		_uart->state &= ~STRHAL_UART_STATE_RX;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b21e:	f023 0302 	bic.w	r3, r3, #2
 800b222:	b2da      	uxtb	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_RC;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b230:	f023 0304 	bic.w	r3, r3, #4
 800b234:	b2da      	uxtb	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_RE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b242:	f043 0310 	orr.w	r3, r3, #16
 800b246:	b2da      	uxtb	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		STRHAL_OofHandler(STRHAL_OOF_UART, "DMA FAIL");
 800b24e:	4906      	ldr	r1, [pc, #24]	; (800b268 <DMA1_Channel3_IRQHandler+0x10c>)
 800b250:	2008      	movs	r0, #8
 800b252:	f7f6 fb13 	bl	800187c <STRHAL_OofHandler>
	}
}
 800b256:	e7ff      	b.n	800b258 <DMA1_Channel3_IRQHandler+0xfc>
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	200002ac 	.word	0x200002ac
 800b264:	40020000 	.word	0x40020000
 800b268:	0800b7c4 	.word	0x0800b7c4

0800b26c <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART2];
 800b272:	4b2a      	ldr	r3, [pc, #168]	; (800b31c <DMA1_Channel4_IRQHandler+0xb0>)
 800b274:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_4) && LL_DMA_IsActiveFlag_TC4(DMA1))
 800b276:	2103      	movs	r1, #3
 800b278:	4829      	ldr	r0, [pc, #164]	; (800b320 <DMA1_Channel4_IRQHandler+0xb4>)
 800b27a:	f7ff faad 	bl	800a7d8 <LL_DMA_IsEnabledIT_TC>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d01b      	beq.n	800b2bc <DMA1_Channel4_IRQHandler+0x50>
 800b284:	4826      	ldr	r0, [pc, #152]	; (800b320 <DMA1_Channel4_IRQHandler+0xb4>)
 800b286:	f7ff f995 	bl	800a5b4 <LL_DMA_IsActiveFlag_TC4>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d015      	beq.n	800b2bc <DMA1_Channel4_IRQHandler+0x50>
	{
		LL_DMA_ClearFlag_TC4(DMA1);
 800b290:	4823      	ldr	r0, [pc, #140]	; (800b320 <DMA1_Channel4_IRQHandler+0xb4>)
 800b292:	f7ff fa19 	bl	800a6c8 <LL_DMA_ClearFlag_TC4>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b29c:	f023 0320 	bic.w	r3, r3, #32
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TC;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		LL_DMA_ClearFlag_TE4(DMA1);
		_uart->state &= ~STRHAL_UART_STATE_TX;
		_uart->state &= ~STRHAL_UART_STATE_TC;
		_uart->state |= STRHAL_UART_STATE_TE;
	}
}
 800b2ba:	e02a      	b.n	800b312 <DMA1_Channel4_IRQHandler+0xa6>
	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_4) && LL_DMA_IsActiveFlag_TE4(DMA1))
 800b2bc:	2103      	movs	r1, #3
 800b2be:	4818      	ldr	r0, [pc, #96]	; (800b320 <DMA1_Channel4_IRQHandler+0xb4>)
 800b2c0:	f7ff faa8 	bl	800a814 <LL_DMA_IsEnabledIT_TE>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d023      	beq.n	800b312 <DMA1_Channel4_IRQHandler+0xa6>
 800b2ca:	4815      	ldr	r0, [pc, #84]	; (800b320 <DMA1_Channel4_IRQHandler+0xb4>)
 800b2cc:	f7ff f9c0 	bl	800a650 <LL_DMA_IsActiveFlag_TE4>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d01d      	beq.n	800b312 <DMA1_Channel4_IRQHandler+0xa6>
		LL_DMA_ClearFlag_TE4(DMA1);
 800b2d6:	4812      	ldr	r0, [pc, #72]	; (800b320 <DMA1_Channel4_IRQHandler+0xb4>)
 800b2d8:	f7ff fa2c 	bl	800a734 <LL_DMA_ClearFlag_TE4>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b2e2:	f023 0320 	bic.w	r3, r3, #32
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_TC;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b2f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800b306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	200002ac 	.word	0x200002ac
 800b320:	40020000 	.word	0x40020000

0800b324 <_ZdlPvj>:
 800b324:	f000 b812 	b.w	800b34c <_ZdlPv>

0800b328 <__cxa_guard_acquire>:
 800b328:	6803      	ldr	r3, [r0, #0]
 800b32a:	07db      	lsls	r3, r3, #31
 800b32c:	d406      	bmi.n	800b33c <__cxa_guard_acquire+0x14>
 800b32e:	7843      	ldrb	r3, [r0, #1]
 800b330:	b103      	cbz	r3, 800b334 <__cxa_guard_acquire+0xc>
 800b332:	deff      	udf	#255	; 0xff
 800b334:	2301      	movs	r3, #1
 800b336:	7043      	strb	r3, [r0, #1]
 800b338:	4618      	mov	r0, r3
 800b33a:	4770      	bx	lr
 800b33c:	2000      	movs	r0, #0
 800b33e:	4770      	bx	lr

0800b340 <__cxa_guard_release>:
 800b340:	2301      	movs	r3, #1
 800b342:	6003      	str	r3, [r0, #0]
 800b344:	4770      	bx	lr

0800b346 <__cxa_pure_virtual>:
 800b346:	b508      	push	{r3, lr}
 800b348:	f000 f80e 	bl	800b368 <_ZSt9terminatev>

0800b34c <_ZdlPv>:
 800b34c:	f000 b842 	b.w	800b3d4 <free>

0800b350 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b350:	b508      	push	{r3, lr}
 800b352:	4780      	blx	r0
 800b354:	f000 f80d 	bl	800b372 <abort>

0800b358 <_ZSt13get_terminatev>:
 800b358:	4b02      	ldr	r3, [pc, #8]	; (800b364 <_ZSt13get_terminatev+0xc>)
 800b35a:	6818      	ldr	r0, [r3, #0]
 800b35c:	f3bf 8f5b 	dmb	ish
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	200004e4 	.word	0x200004e4

0800b368 <_ZSt9terminatev>:
 800b368:	b508      	push	{r3, lr}
 800b36a:	f7ff fff5 	bl	800b358 <_ZSt13get_terminatev>
 800b36e:	f7ff ffef 	bl	800b350 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b372 <abort>:
 800b372:	b508      	push	{r3, lr}
 800b374:	2006      	movs	r0, #6
 800b376:	f000 f8bf 	bl	800b4f8 <raise>
 800b37a:	2001      	movs	r0, #1
 800b37c:	f7f6 fae0 	bl	8001940 <_exit>

0800b380 <__errno>:
 800b380:	4b01      	ldr	r3, [pc, #4]	; (800b388 <__errno+0x8>)
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	200004e8 	.word	0x200004e8

0800b38c <__libc_init_array>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	4d0d      	ldr	r5, [pc, #52]	; (800b3c4 <__libc_init_array+0x38>)
 800b390:	4c0d      	ldr	r4, [pc, #52]	; (800b3c8 <__libc_init_array+0x3c>)
 800b392:	1b64      	subs	r4, r4, r5
 800b394:	10a4      	asrs	r4, r4, #2
 800b396:	2600      	movs	r6, #0
 800b398:	42a6      	cmp	r6, r4
 800b39a:	d109      	bne.n	800b3b0 <__libc_init_array+0x24>
 800b39c:	4d0b      	ldr	r5, [pc, #44]	; (800b3cc <__libc_init_array+0x40>)
 800b39e:	4c0c      	ldr	r4, [pc, #48]	; (800b3d0 <__libc_init_array+0x44>)
 800b3a0:	f000 f8d4 	bl	800b54c <_init>
 800b3a4:	1b64      	subs	r4, r4, r5
 800b3a6:	10a4      	asrs	r4, r4, #2
 800b3a8:	2600      	movs	r6, #0
 800b3aa:	42a6      	cmp	r6, r4
 800b3ac:	d105      	bne.n	800b3ba <__libc_init_array+0x2e>
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b4:	4798      	blx	r3
 800b3b6:	3601      	adds	r6, #1
 800b3b8:	e7ee      	b.n	800b398 <__libc_init_array+0xc>
 800b3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3be:	4798      	blx	r3
 800b3c0:	3601      	adds	r6, #1
 800b3c2:	e7f2      	b.n	800b3aa <__libc_init_array+0x1e>
 800b3c4:	0800c820 	.word	0x0800c820
 800b3c8:	0800c820 	.word	0x0800c820
 800b3cc:	0800c820 	.word	0x0800c820
 800b3d0:	0800c824 	.word	0x0800c824

0800b3d4 <free>:
 800b3d4:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <free+0xc>)
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	f000 b819 	b.w	800b410 <_free_r>
 800b3de:	bf00      	nop
 800b3e0:	200004e8 	.word	0x200004e8

0800b3e4 <memcpy>:
 800b3e4:	440a      	add	r2, r1
 800b3e6:	4291      	cmp	r1, r2
 800b3e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b3ec:	d100      	bne.n	800b3f0 <memcpy+0xc>
 800b3ee:	4770      	bx	lr
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3fa:	4291      	cmp	r1, r2
 800b3fc:	d1f9      	bne.n	800b3f2 <memcpy+0xe>
 800b3fe:	bd10      	pop	{r4, pc}

0800b400 <memset>:
 800b400:	4402      	add	r2, r0
 800b402:	4603      	mov	r3, r0
 800b404:	4293      	cmp	r3, r2
 800b406:	d100      	bne.n	800b40a <memset+0xa>
 800b408:	4770      	bx	lr
 800b40a:	f803 1b01 	strb.w	r1, [r3], #1
 800b40e:	e7f9      	b.n	800b404 <memset+0x4>

0800b410 <_free_r>:
 800b410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b412:	2900      	cmp	r1, #0
 800b414:	d044      	beq.n	800b4a0 <_free_r+0x90>
 800b416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b41a:	9001      	str	r0, [sp, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f1a1 0404 	sub.w	r4, r1, #4
 800b422:	bfb8      	it	lt
 800b424:	18e4      	addlt	r4, r4, r3
 800b426:	f000 f883 	bl	800b530 <__malloc_lock>
 800b42a:	4a1e      	ldr	r2, [pc, #120]	; (800b4a4 <_free_r+0x94>)
 800b42c:	9801      	ldr	r0, [sp, #4]
 800b42e:	6813      	ldr	r3, [r2, #0]
 800b430:	b933      	cbnz	r3, 800b440 <_free_r+0x30>
 800b432:	6063      	str	r3, [r4, #4]
 800b434:	6014      	str	r4, [r2, #0]
 800b436:	b003      	add	sp, #12
 800b438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b43c:	f000 b87e 	b.w	800b53c <__malloc_unlock>
 800b440:	42a3      	cmp	r3, r4
 800b442:	d908      	bls.n	800b456 <_free_r+0x46>
 800b444:	6825      	ldr	r5, [r4, #0]
 800b446:	1961      	adds	r1, r4, r5
 800b448:	428b      	cmp	r3, r1
 800b44a:	bf01      	itttt	eq
 800b44c:	6819      	ldreq	r1, [r3, #0]
 800b44e:	685b      	ldreq	r3, [r3, #4]
 800b450:	1949      	addeq	r1, r1, r5
 800b452:	6021      	streq	r1, [r4, #0]
 800b454:	e7ed      	b.n	800b432 <_free_r+0x22>
 800b456:	461a      	mov	r2, r3
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	b10b      	cbz	r3, 800b460 <_free_r+0x50>
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	d9fa      	bls.n	800b456 <_free_r+0x46>
 800b460:	6811      	ldr	r1, [r2, #0]
 800b462:	1855      	adds	r5, r2, r1
 800b464:	42a5      	cmp	r5, r4
 800b466:	d10b      	bne.n	800b480 <_free_r+0x70>
 800b468:	6824      	ldr	r4, [r4, #0]
 800b46a:	4421      	add	r1, r4
 800b46c:	1854      	adds	r4, r2, r1
 800b46e:	42a3      	cmp	r3, r4
 800b470:	6011      	str	r1, [r2, #0]
 800b472:	d1e0      	bne.n	800b436 <_free_r+0x26>
 800b474:	681c      	ldr	r4, [r3, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	6053      	str	r3, [r2, #4]
 800b47a:	4421      	add	r1, r4
 800b47c:	6011      	str	r1, [r2, #0]
 800b47e:	e7da      	b.n	800b436 <_free_r+0x26>
 800b480:	d902      	bls.n	800b488 <_free_r+0x78>
 800b482:	230c      	movs	r3, #12
 800b484:	6003      	str	r3, [r0, #0]
 800b486:	e7d6      	b.n	800b436 <_free_r+0x26>
 800b488:	6825      	ldr	r5, [r4, #0]
 800b48a:	1961      	adds	r1, r4, r5
 800b48c:	428b      	cmp	r3, r1
 800b48e:	bf04      	itt	eq
 800b490:	6819      	ldreq	r1, [r3, #0]
 800b492:	685b      	ldreq	r3, [r3, #4]
 800b494:	6063      	str	r3, [r4, #4]
 800b496:	bf04      	itt	eq
 800b498:	1949      	addeq	r1, r1, r5
 800b49a:	6021      	streq	r1, [r4, #0]
 800b49c:	6054      	str	r4, [r2, #4]
 800b49e:	e7ca      	b.n	800b436 <_free_r+0x26>
 800b4a0:	b003      	add	sp, #12
 800b4a2:	bd30      	pop	{r4, r5, pc}
 800b4a4:	200008c8 	.word	0x200008c8

0800b4a8 <_raise_r>:
 800b4a8:	291f      	cmp	r1, #31
 800b4aa:	b538      	push	{r3, r4, r5, lr}
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	d904      	bls.n	800b4bc <_raise_r+0x14>
 800b4b2:	2316      	movs	r3, #22
 800b4b4:	6003      	str	r3, [r0, #0]
 800b4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4be:	b112      	cbz	r2, 800b4c6 <_raise_r+0x1e>
 800b4c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4c4:	b94b      	cbnz	r3, 800b4da <_raise_r+0x32>
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f000 f830 	bl	800b52c <_getpid_r>
 800b4cc:	462a      	mov	r2, r5
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4d6:	f000 b817 	b.w	800b508 <_kill_r>
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d00a      	beq.n	800b4f4 <_raise_r+0x4c>
 800b4de:	1c59      	adds	r1, r3, #1
 800b4e0:	d103      	bne.n	800b4ea <_raise_r+0x42>
 800b4e2:	2316      	movs	r3, #22
 800b4e4:	6003      	str	r3, [r0, #0]
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	e7e7      	b.n	800b4ba <_raise_r+0x12>
 800b4ea:	2400      	movs	r4, #0
 800b4ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	4798      	blx	r3
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	e7e0      	b.n	800b4ba <_raise_r+0x12>

0800b4f8 <raise>:
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <raise+0xc>)
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	f7ff bfd3 	b.w	800b4a8 <_raise_r>
 800b502:	bf00      	nop
 800b504:	200004e8 	.word	0x200004e8

0800b508 <_kill_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d07      	ldr	r5, [pc, #28]	; (800b528 <_kill_r+0x20>)
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	4611      	mov	r1, r2
 800b514:	602b      	str	r3, [r5, #0]
 800b516:	f7f6 fa03 	bl	8001920 <_kill>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d102      	bne.n	800b524 <_kill_r+0x1c>
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	b103      	cbz	r3, 800b524 <_kill_r+0x1c>
 800b522:	6023      	str	r3, [r4, #0]
 800b524:	bd38      	pop	{r3, r4, r5, pc}
 800b526:	bf00      	nop
 800b528:	200008cc 	.word	0x200008cc

0800b52c <_getpid_r>:
 800b52c:	f7f6 b9f0 	b.w	8001910 <_getpid>

0800b530 <__malloc_lock>:
 800b530:	4801      	ldr	r0, [pc, #4]	; (800b538 <__malloc_lock+0x8>)
 800b532:	f000 b809 	b.w	800b548 <__retarget_lock_acquire_recursive>
 800b536:	bf00      	nop
 800b538:	200008d0 	.word	0x200008d0

0800b53c <__malloc_unlock>:
 800b53c:	4801      	ldr	r0, [pc, #4]	; (800b544 <__malloc_unlock+0x8>)
 800b53e:	f000 b804 	b.w	800b54a <__retarget_lock_release_recursive>
 800b542:	bf00      	nop
 800b544:	200008d0 	.word	0x200008d0

0800b548 <__retarget_lock_acquire_recursive>:
 800b548:	4770      	bx	lr

0800b54a <__retarget_lock_release_recursive>:
 800b54a:	4770      	bx	lr

0800b54c <_init>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	bf00      	nop
 800b550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b552:	bc08      	pop	{r3}
 800b554:	469e      	mov	lr, r3
 800b556:	4770      	bx	lr

0800b558 <_fini>:
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	bf00      	nop
 800b55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55e:	bc08      	pop	{r3}
 800b560:	469e      	mov	lr, r3
 800b562:	4770      	bx	lr
