
firmware_liquids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001308  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a298  0800a298  00020784  2**0
                  CONTENTS
  4 .ARM          00000000  0800a298  0800a298  00020784  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a298  0800a298  00020784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a298  0800a298  0001a298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000784  20000000  0800a2a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000788  0800aa24  00020788  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b6c  0800aa24  00020b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020784  2**0
                  CONTENTS, READONLY
 12 .debug_info   000246d0  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060d2  00000000  00000000  00044e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0004af58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  0004c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa48  00000000  00000000  0004dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a31d  00000000  00000000  000786d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000def52  00000000  00000000  000929f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006660  00000000  00000000  00171998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000788 	.word	0x20000788
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008f78 	.word	0x08008f78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000078c 	.word	0x2000078c
 8000214:	08008f78 	.word	0x08008f78

08000218 <_ZN11AbstractComC1Em>:
#include <AbstractCom.h>

AbstractCom::AbstractCom(uint32_t nodeId) :
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
		nodeId(nodeId)
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <_ZN11AbstractComC1Em+0x24>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	605a      	str	r2, [r3, #4]
{
}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	080090e4 	.word	0x080090e4

08000240 <_ZN3CanC1Em>:
#include <cstdio>

Com_Receptor_t Can::standardReceptor = nullptr;
uint32_t Can::_nodeId = 0; // TODO fix this pfusch

Can::Can(uint32_t nodeId) :
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
		AbstractCom(nodeId)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6839      	ldr	r1, [r7, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffe2 	bl	8000218 <_ZN11AbstractComC1Em>
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <_ZN3CanC1Em+0x24>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]
{
}
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	080090f4 	.word	0x080090f4

08000268 <_ZN3Can8instanceEm>:

Can& Can::instance(uint32_t nodeId)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	static Can can(nodeId);
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	f3bf 8f5b 	dmb	ish
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	bf0c      	ite	eq
 8000282:	2301      	moveq	r3, #1
 8000284:	2300      	movne	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d011      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 800028e:	f008 fd61 	bl	8008d54 <__cxa_guard_acquire>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf14      	ite	ne
 8000298:	2301      	movne	r3, #1
 800029a:	2300      	moveq	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d006      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	4809      	ldr	r0, [pc, #36]	; (80002cc <_ZN3Can8instanceEm+0x64>)
 80002a6:	f7ff ffcb 	bl	8000240 <_ZN3CanC1Em>
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 80002ac:	f008 fd5e 	bl	8008d6c <__cxa_guard_release>

	if (nodeId != 0)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <_ZN3Can8instanceEm+0x54>
		_nodeId = nodeId;
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <_ZN3Can8instanceEm+0x68>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]

	return can;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <_ZN3Can8instanceEm+0x64>)
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200007b4 	.word	0x200007b4
 80002cc:	200007ac 	.word	0x200007ac
 80002d0:	200007a8 	.word	0x200007a8

080002d4 <_ZN3Can4initEPFvmPhmEPFvvE>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	return Can::init(receptor, heartbeat, COMMode::STANDARD_COM_MODE);
 80002e0:	2300      	movs	r3, #0
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f000 f806 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 80002ec:	4603      	mov	r3, r0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat, COMMode mode)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a4      	sub	sp, #144	; 0x90
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	603b      	str	r3, [r7, #0]
	if(nodeId == 0)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d102      	bne.n	8000314 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x1c>
		return -1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000312:	e17a      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	standardReceptor = receptor;
 8000314:	4abf      	ldr	r2, [pc, #764]	; (8000614 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x31c>)
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	6013      	str	r3, [r2, #0]

	if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN1) != 0)
 800031a:	2000      	movs	r0, #0
 800031c:	f005 ff1a 	bl	8006154 <STRHAL_CAN_Instance_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf14      	ite	ne
 8000326:	2301      	movne	r3, #1
 8000328:	2300      	moveq	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x3e>
		return -1;
 8000330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000334:	e169      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	//if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN2) != 0)
	//	return -1;

	if (STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_TIM7, 1600, 1000) != 100)
 8000336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800033e:	2001      	movs	r0, #1
 8000340:	f007 fdb6 	bl	8007eb0 <STRHAL_TIM_Heartbeat_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b64      	cmp	r3, #100	; 0x64
 8000348:	bf14      	ite	ne
 800034a:	2301      	movne	r3, #1
 800034c:	2300      	moveq	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x62>
		return -1;
 8000354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000358:	e157      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_TIM7, heartbeat) != 0)
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	2001      	movs	r0, #1
 800035e:	f007 fe03 	bl	8007f68 <STRHAL_TIM_Heartbeat_Subscribe>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x80>
		return -1;
 8000372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000376:	e148      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (mode == COMMode::STANDARD_COM_MODE)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d16f      	bne.n	800045e <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x166>
	{
		Can_MessageId_t mask =
 800037e:	2300      	movs	r3, #0
 8000380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		{ 0 };
		mask.info.direction = 0x1;
 8000384:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.node_id = 0x3F;
 8000390:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000394:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 8000398:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.special_cmd = 0x3;
 800039c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80003a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003a4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		Can_MessageId_t id =
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 80003ae:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003b2:	f36f 0300 	bfc	r3, #0, #1
 80003b6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ba:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80003be:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003c2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		id.info.node_id = nodeId;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003d4:	f362 0346 	bfi	r3, r2, #1, #6
 80003d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		Can_MessageId_t id2 =
 80003dc:	2300      	movs	r3, #0
 80003de:	67fb      	str	r3, [r7, #124]	; 0x7c
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80003e0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003e4:	f36f 0300 	bfc	r3, #0, #1
 80003e8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ec:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80003f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003f4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		id2.info.node_id = 0;
 80003f8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003fc:	f36f 0346 	bfc	r3, #1, #6
 8000400:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

		STRHAL_FDCAN_Filter_t mainFilter[] =
 8000404:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]
 8000416:	2302      	movs	r3, #2
 8000418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800041a:	2302      	movs	r3, #2
 800041c:	67bb      	str	r3, [r7, #120]	; 0x78
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800041e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000422:	667b      	str	r3, [r7, #100]	; 0x64
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000428:	66bb      	str	r3, [r7, #104]	; 0x68
 800042a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800042c:	673b      	str	r3, [r7, #112]	; 0x70
 800042e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000432:	677b      	str	r3, [r7, #116]	; 0x74

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 2, receptor) != 2)
 8000434:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2302      	movs	r3, #2
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f005 ff8b 	bl	800635c <STRHAL_CAN_Subscribe>
 8000446:	4603      	mov	r3, r0
 8000448:	2b02      	cmp	r3, #2
 800044a:	bf14      	ite	ne
 800044c:	2301      	movne	r3, #1
 800044e:	2300      	moveq	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	f000 80d8 	beq.w	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045c:	e0d5      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::LISTENER_COM_MODE)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b02      	cmp	r3, #2
 8000462:	f040 809f 	bne.w	80005a4 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2ac>
	{
		Can_MessageId_t mask =
 8000466:	2300      	movs	r3, #0
 8000468:	663b      	str	r3, [r7, #96]	; 0x60
		{ 0 };
		mask.info.direction = 0x1;
 800046a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.node_id = 0x1F;
 8000476:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800047a:	221f      	movs	r2, #31
 800047c:	f362 0346 	bfi	r3, r2, #1, #6
 8000480:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.special_cmd = 0x3;
 8000484:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000488:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800048c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		Can_MessageId_t id =
 8000490:	2300      	movs	r3, #0
 8000492:	65fb      	str	r3, [r7, #92]	; 0x5c
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 8000494:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000498:	f36f 0300 	bfc	r3, #0, #1
 800049c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80004a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004a8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		id.info.node_id = nodeId;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80004ba:	f362 0346 	bfi	r3, r2, #1, #6
 80004be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

		Can_MessageId_t id2 =
 80004c2:	2300      	movs	r3, #0
 80004c4:	65bb      	str	r3, [r7, #88]	; 0x58
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80004c6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004ca:	f36f 0300 	bfc	r3, #0, #1
 80004ce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80004d6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		id2.info.node_id = 0;
 80004de:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004e2:	f36f 0346 	bfc	r3, #1, #6
 80004e6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

		Can_MessageId_t id3 =
 80004ea:	2300      	movs	r3, #0
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
		{ 0 };
		id3.info.direction = NODE2MASTER_DIRECTION;
 80004ee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		id3.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80004fe:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000502:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		id3.info.node_id = 6;
 8000506:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800050a:	2206      	movs	r2, #6
 800050c:	f362 0346 	bfi	r3, r2, #1, #6
 8000510:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

		Can_MessageId_t id4 =
 8000514:	2300      	movs	r3, #0
 8000516:	653b      	str	r3, [r7, #80]	; 0x50
		{ 0 };
		id4.info.direction = NODE2MASTER_DIRECTION;
 8000518:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		id4.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000524:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000528:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800052c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		id4.info.node_id = 7;
 8000530:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000534:	2207      	movs	r2, #7
 8000536:	f362 0346 	bfi	r3, r2, #1, #6
 800053a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		STRHAL_FDCAN_Filter_t mainFilter[] =
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 fc70 	bl	8008e2c <memset>
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
 8000550:	2302      	movs	r3, #2
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
 8000554:	2302      	movs	r3, #2
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
 8000558:	2302      	movs	r3, #2
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800055c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800055e:	617b      	str	r3, [r7, #20]
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000562:	61bb      	str	r3, [r7, #24]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000566:	623b      	str	r3, [r7, #32]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800056c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
 8000574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
 8000578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 4, receptor) != 4)
 800057c:	f107 0214 	add.w	r2, r7, #20
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2304      	movs	r3, #4
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f005 fee7 	bl	800635c <STRHAL_CAN_Subscribe>
 800058e:	4603      	mov	r3, r0
 8000590:	2b04      	cmp	r3, #4
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d034      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a2:	e032      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::BRIDGE_COM_MODE)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d12e      	bne.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
	{
		STRHAL_FDCAN_Filter_t mainFilter[] =
 80005aa:	2300      	movs	r3, #0
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b4:	2300      	movs	r3, #0
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		{
		{ .value_id1 = 0x00, .mask_id2 = 0xFFFF, .type = FDCAN_FILTER_RANGE } };

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 1, Can::internalReceptor) != 1)
 80005b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x320>)
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f005 fec9 	bl	800635c <STRHAL_CAN_Subscribe>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2e8>
			return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005de:	e014      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN2, STRHAL_FDCAN_RX0, mainFilter, 1, Can::externalReceptor) != 1)
 80005e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x324>)
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	2100      	movs	r1, #0
 80005ec:	2001      	movs	r0, #1
 80005ee:	f005 feb5 	bl	800635c <STRHAL_CAN_Subscribe>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000606:	e000      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}

	return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3788      	adds	r7, #136	; 0x88
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200007a4 	.word	0x200007a4
 8000618:	08000771 	.word	0x08000771
 800061c:	08000791 	.word	0x08000791

08000620 <_ZN3Can4execEv>:

int Can::exec()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	STRHAL_CAN_Run();
 8000628:	f006 f854 	bl	80066d4 <STRHAL_CAN_Run>
	if (STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_TIM7) != 0)
 800062c:	2001      	movs	r0, #1
 800062e:	f007 fcc3 	bl	8007fb8 <STRHAL_TIM_Heartbeat_StartHeartbeat>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <_ZN3Can4execEv+0x28>
		return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	e000      	b.n	800064a <_ZN3Can4execEv+0x2a>

	return 0;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <_ZN3Can4sendEmPhh>:

int Can::send(uint32_t id, uint8_t *data, uint8_t n)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
	Can_MessageId_t msgId =
 8000662:	2300      	movs	r3, #0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000666:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800066a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800066e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	msgId.info.direction = NODE2MASTER_DIRECTION;
 8000672:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	if (id == 0)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <_ZN3Can4sendEmPhh+0x48>
	{
		msgId.info.node_id = _nodeId;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <_ZN3Can4sendEmPhh+0xa0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800068c:	b2da      	uxtb	r2, r3
 800068e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000692:	f362 0346 	bfi	r3, r2, #1, #6
 8000696:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800069a:	e009      	b.n	80006b0 <_ZN3Can4sendEmPhh+0x5c>
	}
	else
	{
		msgId.info.node_id = id;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80006a8:	f362 0346 	bfi	r3, r2, #1, #6
 80006ac:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}
	msgId.info.priority = STANDARD_PRIORITY;
 80006b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80006b4:	2202      	movs	r2, #2
 80006b6:	f362 0342 	bfi	r3, r2, #1, #2
 80006ba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	Can_MessageData_t msgData =
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2242      	movs	r2, #66	; 0x42
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f008 fbb0 	bl	8008e2c <memset>
	{ 0 };

	memcpy(msgData.uint8, data, n);
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f008 fb9b 	bl	8008e10 <memcpy>

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 80006da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f107 0210 	add.w	r2, r7, #16
 80006e2:	2000      	movs	r0, #0
 80006e4:	f005 ff1e 	bl	8006524 <STRHAL_CAN_Send>
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200007a8 	.word	0x200007a8

080006f8 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
}

void Can::bridgeReceptor(STRHAL_FDCAN_Id_t bus_id, uint32_t id, uint8_t *data, uint32_t n)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
	Can_MessageId_t incoming_id;
	incoming_id.uint32 = id;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	617b      	str	r3, [r7, #20]

	if (incoming_id.info.node_id == _nodeId)
 800070c:	7d3b      	ldrb	r3, [r7, #20]
 800070e:	f3c3 0345 	ubfx	r3, r3, #1, #6
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x70>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	429a      	cmp	r2, r3
 800071c:	d106      	bne.n	800072c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x34>
	{
		Can::standardReceptor(id, data, n);
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	4798      	blx	r3
	}
	else
	{
		STRHAL_CAN_Send(bus_id, id, data, n);
	}
}
 800072a:	e018      	b.n	800075e <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
	else if (incoming_id.info.node_id == 0)
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10c      	bne.n	8000752 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x5a>
		STRHAL_CAN_Send(bus_id, id, data, n);
 8000738:	7bf8      	ldrb	r0, [r7, #15]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	f005 fef0 	bl	8006524 <STRHAL_CAN_Send>
		Can::standardReceptor(id, data, n);
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	4798      	blx	r3
}
 8000750:	e005      	b.n	800075e <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
		STRHAL_CAN_Send(bus_id, id, data, n);
 8000752:	7bf8      	ldrb	r0, [r7, #15]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	f005 fee3 	bl	8006524 <STRHAL_CAN_Send>
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200007a8 	.word	0x200007a8
 800076c:	200007a4 	.word	0x200007a4

08000770 <_ZN3Can16internalReceptorEmPhm>:

void Can::internalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	//Can::bridgeReceptor(STRHAL_FDCAN2, id, data, n);
	STRHAL_CAN_Send(STRHAL_FDCAN2, id, data, n);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	68f9      	ldr	r1, [r7, #12]
 8000782:	2001      	movs	r0, #1
 8000784:	f005 fece 	bl	8006524 <STRHAL_CAN_Send>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN3Can16externalReceptorEmPhm>:

void Can::externalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	Can::bridgeReceptor(STRHAL_FDCAN1, id, data, n);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ffa8 	bl	80006f8 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN14GenericChannelD1Ev>:
#include <STRHAL.h>
#include <Radio.h>
#include "../Modules/W25Qxx_Flash.h"
#include <Can.h>

class GenericChannel: public AbstractChannel
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <_ZN14GenericChannelD1Ev+0x20>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe01 	bl	80013c8 <_ZN15AbstractChannelD1Ev>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	080091ac 	.word	0x080091ac

080007d4 <_ZN14GenericChannelD0Ev>:
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffe7 	bl	80007b0 <_ZN14GenericChannelD1Ev>
 80007e2:	21c8      	movs	r1, #200	; 0xc8
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f008 fab3 	bl	8008d50 <_ZdlPvj>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <_ZN17DigitalOutChannelD1Ev>:

#include "./Channels/AbstractChannel.h"
#include <can_houbolt/channels/digital_out_channel_def.h>
#include <STRHAL.h>

class DigitalOutChannel: public AbstractChannel
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_ZN17DigitalOutChannelD1Ev+0x20>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fddf 	bl	80013c8 <_ZN15AbstractChannelD1Ev>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	0800917c 	.word	0x0800917c

08000818 <_ZN17DigitalOutChannelD0Ev>:
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ffe7 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000826:	212c      	movs	r1, #44	; 0x2c
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f008 fa91 	bl	8008d50 <_ZdlPvj>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZN22PressureControlChannelD1Ev>:
#include "./Channels/DigitalOutChannel.h"
#include "./Channels/ADCChannel.h"
#include <can_houbolt/channels/control_channel_def.h>
#include <STRHAL.h>

class PressureControlChannel: public AbstractChannel
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_ZN22PressureControlChannelD1Ev+0x20>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fdbd 	bl	80013c8 <_ZN15AbstractChannelD1Ev>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	080091dc 	.word	0x080091dc

0800085c <_ZN22PressureControlChannelD0Ev>:
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffe7 	bl	8000838 <_ZN22PressureControlChannelD1Ev>
 800086a:	2130      	movs	r1, #48	; 0x30
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f008 fa6f 	bl	8008d50 <_ZdlPvj>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_ZN5IOBv4C1Emmm>:
#include <cstring>


#if defined(IOBv4_BOARD)

IOBv4::IOBv4(uint32_t node_id, uint32_t fw_version, uint32_t refresh_divider) :
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b0b9      	sub	sp, #228	; 0xe4
 8000880:	af02      	add	r7, sp, #8
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	603b      	str	r3, [r7, #0]
		channel9(9,{ ADC1, STRHAL_ADC_CHANNEL_2 },		{ GPIOA,  0, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		channel10(10,{ ADC1, STRHAL_ADC_CHANNEL_9 },	{ GPIOC,  2, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		channel11(11,{ ADC1, STRHAL_ADC_CHANNEL_7 },	{ GPIOB,  3, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		pressurecontrol0(12, (GenericChannel&)*this, 4, channel9, 1),

		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	f000 ff11 	bl	80016b8 <_ZN14GenericChannelC1Emmm>
 8000896:	4ad6      	ldr	r2, [pc, #856]	; (8000bf0 <_ZN5IOBv4C1Emmm+0x374>)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4ad5      	ldr	r2, [pc, #852]	; (8000bf4 <_ZN5IOBv4C1Emmm+0x378>)
 80008a0:	33c8      	adds	r3, #200	; 0xc8
 80008a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4ad2      	ldr	r2, [pc, #840]	; (8000bf8 <_ZN5IOBv4C1Emmm+0x37c>)
 80008ae:	33d0      	adds	r3, #208	; 0xd0
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4ad0      	ldr	r2, [pc, #832]	; (8000bfc <_ZN5IOBv4C1Emmm+0x380>)
 80008bc:	33d8      	adds	r3, #216	; 0xd8
 80008be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80008cc:	4acc      	ldr	r2, [pc, #816]	; (8000c00 <_ZN5IOBv4C1Emmm+0x384>)
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80008da:	4aca      	ldr	r2, [pc, #808]	; (8000c04 <_ZN5IOBv4C1Emmm+0x388>)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	f107 0214 	add.w	r2, r7, #20
 80008f0:	2101      	movs	r1, #1
 80008f2:	9101      	str	r1, [sp, #4]
 80008f4:	2100      	movs	r1, #0
 80008f6:	9100      	str	r1, [sp, #0]
 80008f8:	2100      	movs	r1, #0
 80008fa:	4620      	mov	r0, r4
 80008fc:	f000 fd74 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8000906:	4ac0      	ldr	r2, [pc, #768]	; (8000c08 <_ZN5IOBv4C1Emmm+0x38c>)
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000910:	e883 0003 	stmia.w	r3, {r0, r1}
 8000914:	4abd      	ldr	r2, [pc, #756]	; (8000c0c <_ZN5IOBv4C1Emmm+0x390>)
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000926:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800092a:	2101      	movs	r1, #1
 800092c:	9101      	str	r1, [sp, #4]
 800092e:	2100      	movs	r1, #0
 8000930:	9100      	str	r1, [sp, #0]
 8000932:	2101      	movs	r1, #1
 8000934:	4620      	mov	r0, r4
 8000936:	f000 fd57 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8000940:	4ab3      	ldr	r2, [pc, #716]	; (8000c10 <_ZN5IOBv4C1Emmm+0x394>)
 8000942:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000946:	e892 0003 	ldmia.w	r2, {r0, r1}
 800094a:	e883 0003 	stmia.w	r3, {r0, r1}
 800094e:	4ab1      	ldr	r2, [pc, #708]	; (8000c14 <_ZN5IOBv4C1Emmm+0x398>)
 8000950:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000958:	e883 0003 	stmia.w	r3, {r0, r1}
 800095c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000960:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000964:	2101      	movs	r1, #1
 8000966:	9101      	str	r1, [sp, #4]
 8000968:	2100      	movs	r1, #0
 800096a:	9100      	str	r1, [sp, #0]
 800096c:	2102      	movs	r1, #2
 800096e:	4620      	mov	r0, r4
 8000970:	f000 fd3a 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 800097a:	4aa7      	ldr	r2, [pc, #668]	; (8000c18 <_ZN5IOBv4C1Emmm+0x39c>)
 800097c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000984:	e883 0003 	stmia.w	r3, {r0, r1}
 8000988:	4aa4      	ldr	r2, [pc, #656]	; (8000c1c <_ZN5IOBv4C1Emmm+0x3a0>)
 800098a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000992:	e883 0003 	stmia.w	r3, {r0, r1}
 8000996:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800099a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800099e:	2101      	movs	r1, #1
 80009a0:	9101      	str	r1, [sp, #4]
 80009a2:	2100      	movs	r1, #0
 80009a4:	9100      	str	r1, [sp, #0]
 80009a6:	2103      	movs	r1, #3
 80009a8:	4620      	mov	r0, r4
 80009aa:	f000 fd1d 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 80009b4:	4a9a      	ldr	r2, [pc, #616]	; (8000c20 <_ZN5IOBv4C1Emmm+0x3a4>)
 80009b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009be:	e883 0003 	stmia.w	r3, {r0, r1}
 80009c2:	4a98      	ldr	r2, [pc, #608]	; (8000c24 <_ZN5IOBv4C1Emmm+0x3a8>)
 80009c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80009d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009d4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80009d8:	2101      	movs	r1, #1
 80009da:	9101      	str	r1, [sp, #4]
 80009dc:	2100      	movs	r1, #0
 80009de:	9100      	str	r1, [sp, #0]
 80009e0:	2104      	movs	r1, #4
 80009e2:	4620      	mov	r0, r4
 80009e4:	f000 fd00 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f503 74de 	add.w	r4, r3, #444	; 0x1bc
 80009ee:	4a8e      	ldr	r2, [pc, #568]	; (8000c28 <_ZN5IOBv4C1Emmm+0x3ac>)
 80009f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <_ZN5IOBv4C1Emmm+0x3b0>)
 80009fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a0e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000a12:	2101      	movs	r1, #1
 8000a14:	9101      	str	r1, [sp, #4]
 8000a16:	2100      	movs	r1, #0
 8000a18:	9100      	str	r1, [sp, #0]
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f000 fce3 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f503 74f4 	add.w	r4, r3, #488	; 0x1e8
 8000a28:	4a81      	ldr	r2, [pc, #516]	; (8000c30 <_ZN5IOBv4C1Emmm+0x3b4>)
 8000a2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a32:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a36:	4a7f      	ldr	r2, [pc, #508]	; (8000c34 <_ZN5IOBv4C1Emmm+0x3b8>)
 8000a38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a40:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a48:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	9101      	str	r1, [sp, #4]
 8000a50:	2100      	movs	r1, #0
 8000a52:	9100      	str	r1, [sp, #0]
 8000a54:	2106      	movs	r1, #6
 8000a56:	4620      	mov	r0, r4
 8000a58:	f000 fcc6 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8000a62:	4a75      	ldr	r2, [pc, #468]	; (8000c38 <_ZN5IOBv4C1Emmm+0x3bc>)
 8000a64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a70:	4a72      	ldr	r2, [pc, #456]	; (8000c3c <_ZN5IOBv4C1Emmm+0x3c0>)
 8000a72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a7e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a82:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000a86:	2101      	movs	r1, #1
 8000a88:	9101      	str	r1, [sp, #4]
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	9100      	str	r1, [sp, #0]
 8000a8e:	2107      	movs	r1, #7
 8000a90:	4620      	mov	r0, r4
 8000a92:	f000 fca9 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f503 7410 	add.w	r4, r3, #576	; 0x240
 8000a9c:	4a68      	ldr	r2, [pc, #416]	; (8000c40 <_ZN5IOBv4C1Emmm+0x3c4>)
 8000a9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aa6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000aaa:	4a66      	ldr	r2, [pc, #408]	; (8000c44 <_ZN5IOBv4C1Emmm+0x3c8>)
 8000aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ab8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000abc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	9101      	str	r1, [sp, #4]
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	9100      	str	r1, [sp, #0]
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4620      	mov	r0, r4
 8000acc:	f000 fc8c 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 8000ad6:	4a5c      	ldr	r2, [pc, #368]	; (8000c48 <_ZN5IOBv4C1Emmm+0x3cc>)
 8000ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae0:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8000af8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000afc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000b00:	2101      	movs	r1, #1
 8000b02:	9101      	str	r1, [sp, #4]
 8000b04:	2100      	movs	r1, #0
 8000b06:	9100      	str	r1, [sp, #0]
 8000b08:	2109      	movs	r1, #9
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f000 fc6c 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f503 7426 	add.w	r4, r3, #664	; 0x298
 8000b16:	4a4d      	ldr	r2, [pc, #308]	; (8000c4c <_ZN5IOBv4C1Emmm+0x3d0>)
 8000b18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b20:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <_ZN5IOBv4C1Emmm+0x3d4>)
 8000b26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b32:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b36:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	9101      	str	r1, [sp, #4]
 8000b3e:	2100      	movs	r1, #0
 8000b40:	9100      	str	r1, [sp, #0]
 8000b42:	210a      	movs	r1, #10
 8000b44:	4620      	mov	r0, r4
 8000b46:	f000 fc4f 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f503 7431 	add.w	r4, r3, #708	; 0x2c4
 8000b50:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <_ZN5IOBv4C1Emmm+0x3d8>)
 8000b52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b5e:	4a3e      	ldr	r2, [pc, #248]	; (8000c58 <_ZN5IOBv4C1Emmm+0x3dc>)
 8000b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b68:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b70:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000b74:	2101      	movs	r1, #1
 8000b76:	9101      	str	r1, [sp, #4]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	9100      	str	r1, [sp, #0]
 8000b7c:	210b      	movs	r1, #11
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f000 fc32 	bl	80013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8000b8a:	68fa      	ldr	r2, [r7, #12]
		pressurecontrol0(12, (GenericChannel&)*this, 4, channel9, 1),
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 8000b92:	2101      	movs	r1, #1
 8000b94:	9101      	str	r1, [sp, #4]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2304      	movs	r3, #4
 8000b9a:	210c      	movs	r1, #12
 8000b9c:	f001 fa62 	bl	8002064 <_ZN22PressureControlChannelC1EhR14GenericChannelhR17DigitalOutChannelm>
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
 8000bac:	2254      	movs	r2, #84	; 0x54
 8000bae:	f887 20d7 	strb.w	r2, [r7, #215]	; 0xd7
 8000bb2:	f107 02d7 	add.w	r2, r7, #215	; 0xd7
 8000bb6:	f107 01d6 	add.w	r1, r7, #214	; 0xd6
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f9cb 	bl	8000f56 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>

	//registerChannel(&servo0);
	//registerChannel(&servo1);
	//registerChannel(&servo2);

	registerChannel(&channel0);
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	33e0      	adds	r3, #224	; 0xe0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4610      	mov	r0, r2
 8000bca:	f001 f8f9 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel1);
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4610      	mov	r0, r2
 8000bda:	f001 f8f1 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel2);
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000be6:	4619      	mov	r1, r3
 8000be8:	4610      	mov	r0, r2
 8000bea:	f001 f8e9 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
 8000bee:	e035      	b.n	8000c5c <_ZN5IOBv4C1Emmm+0x3e0>
 8000bf0:	08009104 	.word	0x08009104
 8000bf4:	08008f90 	.word	0x08008f90
 8000bf8:	08008f98 	.word	0x08008f98
 8000bfc:	08008fa0 	.word	0x08008fa0
 8000c00:	08008fa8 	.word	0x08008fa8
 8000c04:	08008fb0 	.word	0x08008fb0
 8000c08:	08008fb8 	.word	0x08008fb8
 8000c0c:	08008fc0 	.word	0x08008fc0
 8000c10:	08008fc8 	.word	0x08008fc8
 8000c14:	08008fd0 	.word	0x08008fd0
 8000c18:	08008fd8 	.word	0x08008fd8
 8000c1c:	08008fe0 	.word	0x08008fe0
 8000c20:	08008fe8 	.word	0x08008fe8
 8000c24:	08008ff0 	.word	0x08008ff0
 8000c28:	08008ff8 	.word	0x08008ff8
 8000c2c:	08009000 	.word	0x08009000
 8000c30:	08009008 	.word	0x08009008
 8000c34:	08009010 	.word	0x08009010
 8000c38:	08009018 	.word	0x08009018
 8000c3c:	08009020 	.word	0x08009020
 8000c40:	08009028 	.word	0x08009028
 8000c44:	08009030 	.word	0x08009030
 8000c48:	08009038 	.word	0x08009038
 8000c4c:	08009040 	.word	0x08009040
 8000c50:	08009048 	.word	0x08009048
 8000c54:	08009050 	.word	0x08009050
 8000c58:	08009058 	.word	0x08009058
	registerChannel(&channel3);
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000c64:	4619      	mov	r1, r3
 8000c66:	4610      	mov	r0, r2
 8000c68:	f001 f8aa 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel4);
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000c74:	4619      	mov	r1, r3
 8000c76:	4610      	mov	r0, r2
 8000c78:	f001 f8a2 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel5);
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c84:	4619      	mov	r1, r3
 8000c86:	4610      	mov	r0, r2
 8000c88:	f001 f89a 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel6);
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f001 f892 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel7);
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	f001 f88a 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel8);
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	f001 f882 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel9);
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	f001 f87a 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel10);
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	f001 f872 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel11);
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	f001 f86a 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&pressurecontrol0);
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f001 f862 	bl	8001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	//registerModule(&flash);

}
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	37dc      	adds	r7, #220	; 0xdc
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	bf00      	nop

08000d08 <_ZN5IOBv44initEv>:

int IOBv4::init()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	if (STRHAL_Init(STRHAL_SYSCLK_SRC_EXT, 8000000) != STRHAL_NOICE)
 8000d10:	4933      	ldr	r1, [pc, #204]	; (8000de0 <_ZN5IOBv44initEv+0xd8>)
 8000d12:	2002      	movs	r0, #2
 8000d14:	f004 f94c 	bl	8004fb0 <STRHAL_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bf14      	ite	ne
 8000d1e:	2301      	movne	r3, #1
 8000d20:	2300      	moveq	r3, #0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <_ZN5IOBv44initEv+0x26>
		return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2c:	e053      	b.n	8000dd6 <_ZN5IOBv44initEv+0xce>

	// init status LEDs
	STRHAL_GPIO_SingleInit(&led1, STRHAL_GPIO_TYPE_OPP);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	33c8      	adds	r3, #200	; 0xc8
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 ff11 	bl	8006b5c <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led2, STRHAL_GPIO_TYPE_OPP);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	33d0      	adds	r3, #208	; 0xd0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 ff0b 	bl	8006b5c <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led_debug, STRHAL_GPIO_TYPE_OPP);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	33d8      	adds	r3, #216	; 0xd8
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 ff05 	bl	8006b5c <STRHAL_GPIO_SingleInit>




	// init debug uart
	if (STRHAL_UART_Instance_Init(STRHAL_UART_DEBUG) != 0)
 8000d52:	2002      	movs	r0, #2
 8000d54:	f007 fd0c 	bl	8008770 <STRHAL_UART_Instance_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf14      	ite	ne
 8000d5e:	2301      	movne	r3, #1
 8000d60:	2300      	moveq	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <_ZN5IOBv44initEv+0x66>
		return -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6c:	e033      	b.n	8000dd6 <_ZN5IOBv44initEv+0xce>

	if (can.init(receptor, heartbeatCan, COMMode::STANDARD_COM_MODE) != 0)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8000d74:	2300      	movs	r3, #0
 8000d76:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <_ZN5IOBv44initEv+0xdc>)
 8000d78:	491b      	ldr	r1, [pc, #108]	; (8000de8 <_ZN5IOBv44initEv+0xe0>)
 8000d7a:	f7ff fabd 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <_ZN5IOBv44initEv+0x8c>
		return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d92:	e020      	b.n	8000dd6 <_ZN5IOBv44initEv+0xce>

	if (GenericChannel::init() != 0)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fce5 	bl	8001766 <_ZN14GenericChannel4initEv>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <_ZN5IOBv44initEv+0xaa>
		return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db0:	e011      	b.n	8000dd6 <_ZN5IOBv44initEv+0xce>

	speaker.init();
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f8e1 	bl	8000f80 <_ZN7Speaker4initEv>
	STRHAL_GPIO_Write(&led_debug, STRHAL_GPIO_VALUE_H);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	33d8      	adds	r3, #216	; 0xd8
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 ff25 	bl	8006c14 <STRHAL_GPIO_Write>

	STRHAL_UART_Debug_Write_Blocking("Started\n", 8, 50);
 8000dca:	2232      	movs	r2, #50	; 0x32
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <_ZN5IOBv44initEv+0xe4>)
 8000dd0:	f007 fe08 	bl	80089e4 <STRHAL_UART_Debug_Write_Blocking>


	return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	007a1200 	.word	0x007a1200
 8000de4:	08001f7d 	.word	0x08001f7d
 8000de8:	08001e1d 	.word	0x08001e1d
 8000dec:	08009060 	.word	0x08009060

08000df0 <_ZN5IOBv44execEv>:

int IOBv4::exec()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	STRHAL_OPAMP_Run();
 8000df8:	f006 f8a0 	bl	8006f3c <STRHAL_OPAMP_Run>
	STRHAL_ADC_Run();
 8000dfc:	f004 ffc8 	bl	8005d90 <STRHAL_ADC_Run>
	STRHAL_QSPI_Run();
 8000e00:	f006 f98a 	bl	8007118 <STRHAL_QSPI_Run>

	if (can.exec() != 0)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4610      	mov	r0, r2
 8000e18:	4798      	blx	r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <_ZN5IOBv44execEv+0x40>
		return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2e:	e01b      	b.n	8000e68 <_ZN5IOBv44execEv+0x78>


	speaker.beep(3, 300, 200);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8000e36:	23c8      	movs	r3, #200	; 0xc8
 8000e38:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e3c:	2103      	movs	r1, #3
 8000e3e:	f000 f8db 	bl	8000ff8 <_ZN7Speaker4beepEhtt>
	STRHAL_UART_Debug_Write_Blocking("Test\n", 5, 50);
 8000e42:	2232      	movs	r2, #50	; 0x32
 8000e44:	2105      	movs	r1, #5
 8000e46:	480a      	ldr	r0, [pc, #40]	; (8000e70 <_ZN5IOBv44execEv+0x80>)
 8000e48:	f007 fdcc 	bl	80089e4 <STRHAL_UART_Debug_Write_Blocking>

	while (1)
	{
		if (GenericChannel::exec() != 0)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fce1 	bl	8001816 <_ZN14GenericChannel4execEv>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f3      	beq.n	8000e4c <_ZN5IOBv44execEv+0x5c>
			return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	speaker.beep(6, 100, 100);

	return 0;
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	0800906c 	.word	0x0800906c

08000e74 <_ZN5IOBv4D1Ev>:
#include <Can.h>
#include <Speaker.h>

#include <STRHAL.h>

class IOBv4: public GenericChannel
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	4a2c      	ldr	r2, [pc, #176]	; (8000f30 <_ZN5IOBv4D1Ev+0xbc>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fcd5 	bl	8000838 <_ZN22PressureControlChannelD1Ev>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fcad 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fca7 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fca1 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fc9b 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fc95 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fc8f 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc89 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fc83 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fc7d 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fc77 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fc71 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	33e0      	adds	r3, #224	; 0xe0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fc6c 	bl	80007f4 <_ZN17DigitalOutChannelD1Ev>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fc46 	bl	80007b0 <_ZN14GenericChannelD1Ev>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	08009104 	.word	0x08009104

08000f34 <_ZN5IOBv4D0Ev>:
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff99 	bl	8000e74 <_ZN5IOBv4D1Ev>
 8000f42:	f44f 714a 	mov.w	r1, #808	; 0x328
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f007 ff02 	bl	8008d50 <_ZdlPvj>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>:
#include "../Inc/Speaker.h"

Speaker::Speaker(const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control) :
 8000f56:	b480      	push	{r7}
 8000f58:	b085      	sub	sp, #20
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
		pwmTimer(pwmTimer), ctrlChannelId(control)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	705a      	strb	r2, [r3, #1]
{
}
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_ZN7Speaker4initEv>:

int Speaker::init()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	if (STRHAL_TIM_PWM_Init(pwmTimer, PWM_PSC, PWM_RES) < 0)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f90:	2158      	movs	r1, #88	; 0x58
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fe0e 	bl	8007bb4 <STRHAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	0fdb      	lsrs	r3, r3, #31
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <_ZN7Speaker4initEv+0x28>
		return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa6:	e023      	b.n	8000ff0 <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_AddChannel(&pwmChannel, ctrlChannelId, STRHAL_TIM_PWM_CHANNELTYPE_SO) < 0)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	1c98      	adds	r0, r3, #2
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f006 fe90 	bl	8007cd8 <STRHAL_TIM_PWM_AddChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	0fdb      	lsrs	r3, r3, #31
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <_ZN7Speaker4initEv+0x48>
		return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc6:	e013      	b.n	8000ff0 <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_SetDuty(&pwmChannel, 1800) != 1800)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fef7 	bl	8007dc4 <STRHAL_TIM_PWM_SetDuty>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000fdc:	bf14      	ite	ne
 8000fde:	2301      	movne	r3, #1
 8000fe0:	2300      	moveq	r3, #0
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <_ZN7Speaker4initEv+0x6e>
	{
		return -1;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fec:	e000      	b.n	8000ff0 <_ZN7Speaker4initEv+0x70>
	}

	return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_ZN7Speaker4beepEhtt>:
{
	STRHAL_TIM_PWM_Enable(&pwmChannel, ena);
}

void Speaker::beep(uint8_t n, uint16_t tot1, uint16_t tot2)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	4608      	mov	r0, r1
 8001002:	4611      	mov	r1, r2
 8001004:	461a      	mov	r2, r3
 8001006:	4603      	mov	r3, r0
 8001008:	72fb      	strb	r3, [r7, #11]
 800100a:	460b      	mov	r3, r1
 800100c:	813b      	strh	r3, [r7, #8]
 800100e:	4613      	mov	r3, r2
 8001010:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < n; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	7afb      	ldrb	r3, [r7, #11]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	429a      	cmp	r2, r3
 800101c:	da17      	bge.n	800104e <_ZN7Speaker4beepEhtt+0x56>
	{
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3302      	adds	r3, #2
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f006 fef9 	bl	8007e1c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot1);
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fd05 	bl	8004a3c <LL_mDelay>
		STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3302      	adds	r3, #2
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f006 feef 	bl	8007e1c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot2);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fcfb 	bl	8004a3c <LL_mDelay>
	for (int i = 0; i < n; i++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e7e3      	b.n	8001016 <_ZN7Speaker4beepEhtt+0x1e>
	}
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <main>:
#include "RCU.h"
#include "LCB.h"
#include "git_version.h"

int main(void)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
 800105e:	af00      	add	r7, sp, #0
#elif defined(IOBv4_BOARD)
#ifdef UART_DEBUG
	// Ox 10, Fuel 11
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,100); // TODO disregard node ID and read dipswitches in IOB/LCB class
#else
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,1); // TODO disregard node ID and read dipswitches in IOB/LCB class
 8001060:	4638      	mov	r0, r7
 8001062:	2301      	movs	r3, #1
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <main+0x5c>)
 8001066:	210a      	movs	r1, #10
 8001068:	f7ff fc08 	bl	800087c <_ZN5IOBv4C1Emmm>
#endif
	if(iob.init() != 0)
 800106c:	463b      	mov	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe4a 	bl	8000d08 <_ZN5IOBv44initEv>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <main+0x3a>
			return -1;
 8001084:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,1); // TODO disregard node ID and read dipswitches in IOB/LCB class
 8001088:	463b      	mov	r3, r7
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fef2 	bl	8000e74 <_ZN5IOBv4D1Ev>
 8001090:	e009      	b.n	80010a6 <main+0x4e>

	STRHAL_UART_Debug_Write_Blocking("IOBv4 STARTED\n", 14, 50);
 8001092:	2232      	movs	r2, #50	; 0x32
 8001094:	210e      	movs	r1, #14
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <main+0x60>)
 8001098:	f007 fca4 	bl	80089e4 <STRHAL_UART_Debug_Write_Blocking>
	iob.exec();
 800109c:	463b      	mov	r3, r7
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fea6 	bl	8000df0 <_ZN5IOBv44execEv>

	STRHAL_UART_Debug_Write_Blocking("LCB STARTED\n", 12, 50);
	lcb.exec();
#endif

	while (1);
 80010a4:	e7fe      	b.n	80010a4 <main+0x4c>
}
 80010a6:	4623      	mov	r3, r4
 80010a8:	4618      	mov	r0, r3
 80010aa:	f507 774b 	add.w	r7, r7, #812	; 0x32c
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	ef9383f2 	.word	0xef9383f2
 80010b8:	08009074 	.word	0x08009074

080010bc <STRHAL_OofHandler>:

void STRHAL_OofHandler(STRHAL_Oof_t oof, char *msg)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
	do
	{
	} while (0);
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <NMI_Handler>:
#include "stm32g4xx_it.h"
#include <STRHAL.h>

void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, (1 << 1));
 8001104:	2102      	movs	r1, #2
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <HardFault_Handler+0x10>)
 8001108:	f7ff ffe4 	bl	80010d4 <LL_GPIO_ResetOutputPin>
	while (1)
 800110c:	e7fe      	b.n	800110c <HardFault_Handler+0xc>
 800110e:	bf00      	nop
 8001110:	48000c00 	.word	0x48000c00

08001114 <MemManage_Handler>:
	{
	}
}

void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:
	{
	}
}

void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
	while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:
	{
	}
}

void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:
	{
	}
}

void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_kill>:

int _kill(int pid, int sig)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800116a:	f007 fe1f 	bl	8008dac <__errno>
 800116e:	4603      	mov	r3, r0
 8001170:	2216      	movs	r2, #22
 8001172:	601a      	str	r2, [r3, #0]
	return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_exit>:

void _exit(int status)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffe7 	bl	8001160 <_kill>
	while (1)
 8001192:	e7fe      	b.n	8001192 <_exit+0x12>

08001194 <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SystemInit+0x28>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <SystemInit+0x28>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SystemInit+0x28>)
 80011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ae:	609a      	str	r2, [r3, #8]
#endif
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>:
#include "../Inc/Channels/AbstractChannel.h"

#include <cstring>

AbstractChannel::AbstractChannel(CHANNEL_TYPE type, uint8_t id, uint32_t refreshDivider) :
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	72fb      	strb	r3, [r7, #11]
 80011ce:	4613      	mov	r3, r2
 80011d0:	72bb      	strb	r3, [r7, #10]
		refreshDivider(refreshDivider), refreshCounter(0), channelType(type), channelId(id), channelStatus(CHANNEL_STATUS_NOICE)
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm+0x44>)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	7afa      	ldrb	r2, [r7, #11]
 80011e8:	731a      	strb	r2, [r3, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	7aba      	ldrb	r2, [r7, #10]
 80011ee:	735a      	strb	r2, [r3, #13]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	739a      	strb	r2, [r3, #14]
{

}
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	0800914c 	.word	0x0800914c

08001208 <_ZNK15AbstractChannel14getChannelTypeEv>:

CHANNEL_TYPE AbstractChannel::getChannelType() const
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	return channelType;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7b1b      	ldrb	r3, [r3, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_ZNK15AbstractChannel16getChannelStatusEv>:

CHANNEL_STATUS AbstractChannel::getChannelStatus() const
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	return channelStatus;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7b9b      	ldrb	r3, [r3, #14]
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_ZNK15AbstractChannel12getChannelIdEv>:

uint8_t AbstractChannel::getChannelId() const
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	return channelId;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7b5b      	ldrb	r3, [r3, #13]
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZNK15AbstractChannel11IsChannelIdEh>:
{
	return type == channelType;
}

bool AbstractChannel::IsChannelId(uint8_t id) const
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
	return channelId == id;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7b5b      	ldrb	r3, [r3, #13]
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	429a      	cmp	r2, r3
 8001264:	bf0c      	ite	eq
 8001266:	2301      	moveq	r3, #1
 8001268:	2300      	movne	r3, #0
 800126a:	b2db      	uxtb	r3, r3
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_ZN15AbstractChannel11IsRefreshedEv>:

bool AbstractChannel::IsRefreshed()
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	if (refreshDivider == 0)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <_ZN15AbstractChannel11IsRefreshedEv+0x14>
		return false;
 8001288:	2300      	movs	r3, #0
 800128a:	e010      	b.n	80012ae <_ZN15AbstractChannel11IsRefreshedEv+0x36>
	refreshCounter++;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	609a      	str	r2, [r3, #8]
	if (refreshCounter != refreshDivider)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <_ZN15AbstractChannel11IsRefreshedEv+0x2e>
		return false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e003      	b.n	80012ae <_ZN15AbstractChannel11IsRefreshedEv+0x36>

	refreshCounter = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	return true;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <_ZNK15AbstractChannel14getMeasurementEv>:


uint16_t AbstractChannel::getMeasurement() const
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	return -1;
 80012c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <_ZN15AbstractChannel14processMessageEhPhRh>:

int AbstractChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	72fb      	strb	r3, [r7, #11]
	SetMsg_t *setMsg;
	setMsg = (SetMsg_t*) returnData;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	61fb      	str	r3, [r7, #28]
	int32_t temp = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
	int status = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
	switch (commandId)
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d862      	bhi.n	80013bc <_ZN15AbstractChannel14processMessageEhPhRh+0xe8>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <_ZN15AbstractChannel14processMessageEhPhRh+0x28>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001347 	.word	0x08001347
 8001300:	080013bd 	.word	0x080013bd
 8001304:	080013b3 	.word	0x080013b3
 8001308:	080013bd 	.word	0x080013bd
 800130c:	08001357 	.word	0x08001357
 8001310:	080013bd 	.word	0x080013bd
 8001314:	08001319 	.word	0x08001319
	{
		case COMMON_REQ_GET_VARIABLE:
			status = getVariable(setMsg->variable_id, temp);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3324      	adds	r3, #36	; 0x24
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	7811      	ldrb	r1, [r2, #0]
 8001324:	f107 0214 	add.w	r2, r7, #20
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	4798      	blx	r3
 800132c:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	3305      	adds	r3, #5
 800133c:	b2da      	uxtb	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	701a      	strb	r2, [r3, #0]
			return status;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	e03c      	b.n	80013c0 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_RESET_SETTINGS:
			return reset();
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	330c      	adds	r3, #12
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	4798      	blx	r3
 8001352:	4603      	mov	r3, r0
 8001354:	e034      	b.n	80013c0 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_SET_VARIABLE:
			if (setVariable(setMsg->variable_id, setMsg->value) == -1)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3320      	adds	r3, #32
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	7811      	ldrb	r1, [r2, #0]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f8d2 2001 	ldr.w	r2, [r2, #1]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	4798      	blx	r3
 800136c:	4603      	mov	r3, r0
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <_ZN15AbstractChannel14processMessageEhPhRh+0xb0>
				return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001382:	e01d      	b.n	80013c0 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>
			status = getVariable(setMsg->variable_id, temp);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3324      	adds	r3, #36	; 0x24
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	7811      	ldrb	r1, [r2, #0]
 8001390:	f107 0214 	add.w	r2, r7, #20
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	4798      	blx	r3
 8001398:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3305      	adds	r3, #5
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	701a      	strb	r2, [r3, #0]
			return status;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	e006      	b.n	80013c0 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_STATUS:
			return getChannelStatus();
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ff34 	bl	8001220 <_ZNK15AbstractChannel16getChannelStatusEv>
 80013b8:	4603      	mov	r3, r0
 80013ba:	e001      	b.n	80013c0 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		default:
			return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN15AbstractChannelD1Ev>:

AbstractChannel::~AbstractChannel()
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <_ZN15AbstractChannelD1Ev+0x1c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
{
}
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	0800914c 	.word	0x0800914c

080013e8 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>:
#include <Channels/DigitalOutChannel.h>

DigitalOutChannel::DigitalOutChannel(uint8_t id, const STRHAL_ADC_Channel_t &adcChannel, const STRHAL_GPIO_t &cntrlPin, STRHAL_ADC_InType_t adcInType, uint32_t refreshDivider) :
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	460b      	mov	r3, r1
 80013f6:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), adcChannel(adcChannel), cntrlPin(cntrlPin), adcInType(adcInType), hasFeedback(true)
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	7afa      	ldrb	r2, [r7, #11]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2107      	movs	r1, #7
 8001400:	f7ff fede 	bl	80011c0 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x60>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	3314      	adds	r3, #20
 8001410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001414:	e883 0003 	stmia.w	r3, {r0, r1}
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	3320      	adds	r3, #32
 8001424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001428:	e883 0003 	stmia.w	r3, {r0, r1}
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	7e3a      	ldrb	r2, [r7, #24]
 8001430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
{
}
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0800917c 	.word	0x0800917c

0800144c <_ZN17DigitalOutChannel4initEv>:
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), cntrlPin(cntrlPin)
{
}

int DigitalOutChannel::init()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&cntrlPin, STRHAL_GPIO_TYPE_OPP);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3320      	adds	r3, #32
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fb7e 	bl	8006b5c <STRHAL_GPIO_SingleInit>
	if (hasFeedback)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001466:	2b00      	cmp	r3, #0
 8001468:	d013      	beq.n	8001492 <_ZN17DigitalOutChannel4initEv+0x46>
	{
		adcMeasurement = STRHAL_ADC_SubscribeChannel(&adcChannel, adcInType);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f103 0214 	add.w	r2, r3, #20
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f004 fafd 	bl	8005a78 <STRHAL_ADC_SubscribeChannel>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	61da      	str	r2, [r3, #28]

		if (adcMeasurement == nullptr)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_ZN17DigitalOutChannel4initEv+0x46>
			return -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001490:	e000      	b.n	8001494 <_ZN17DigitalOutChannel4initEv+0x48>
	}

	return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN17DigitalOutChannel4execEv>:

int DigitalOutChannel::exec()
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_ZN17DigitalOutChannel5resetEv>:

int DigitalOutChannel::reset()
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	return 0;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN17DigitalOutChannel14processMessageEhPhRh>:

int DigitalOutChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	460b      	mov	r3, r1
 80014d6:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	7af9      	ldrb	r1, [r7, #11]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	f7ff fef8 	bl	80012d4 <_ZN15AbstractChannel14processMessageEhPhRh>
 80014e4:	4603      	mov	r3, r0
	}
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_ZN17DigitalOutChannel13getSensorDataEPhRh>:

int DigitalOutChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
	*out = (hasFeedback) ? (*adcMeasurement << 4) : 0; // shift to 16bit full scale, if no feedback is present return 0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x30>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	b29a      	uxth	r2, r3
 800151c:	e000      	b.n	8001520 <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x32>
 800151e:	2200      	movs	r2, #0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	801a      	strh	r2, [r3, #0]

	n += DIGITAL_OUT_DATA_N_BYTES;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3302      	adds	r3, #2
 800152a:	b2da      	uxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <_ZN17DigitalOutChannel11setVariableEhl>:

int DigitalOutChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	460b      	mov	r3, r1
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d833      	bhi.n	80015bc <_ZN17DigitalOutChannel11setVariableEhl+0x7c>
 8001554:	a201      	add	r2, pc, #4	; (adr r2, 800155c <_ZN17DigitalOutChannel11setVariableEhl+0x1c>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	08001571 	.word	0x08001571
 8001560:	08001595 	.word	0x08001595
 8001564:	080015a1 	.word	0x080015a1
 8001568:	080015bd 	.word	0x080015bd
 800156c:	080015ad 	.word	0x080015ad
	{
		case DIGITAL_OUT_STATE:
			if (setState(data) != 0)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f876 	bl	8001666 <_ZN17DigitalOutChannel8setStateEm>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <_ZN17DigitalOutChannel11setVariableEhl+0x50>
				return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158e:	e017      	b.n	80015c0 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
			return 0;
 8001590:	2300      	movs	r3, #0
 8001592:	e015      	b.n	80015c0 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_DUTY_CYCLE:
			dutyCycle = data;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	821a      	strh	r2, [r3, #16]
			return 0;
 800159c:	2300      	movs	r3, #0
 800159e:	e00f      	b.n	80015c0 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_FREQUENCY:
			frequency = data;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	825a      	strh	r2, [r3, #18]
			return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e009      	b.n	80015c0 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
			return 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e001      	b.n	80015c0 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		default:
			return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_ZNK17DigitalOutChannel11getVariableEhRl>:

int DigitalOutChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	460b      	mov	r3, r1
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d82b      	bhi.n	8001634 <_ZNK17DigitalOutChannel11getVariableEhRl+0x6c>
 80015dc:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <_ZNK17DigitalOutChannel11getVariableEhRl+0x1c>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	080015f9 	.word	0x080015f9
 80015e8:	0800160b 	.word	0x0800160b
 80015ec:	08001619 	.word	0x08001619
 80015f0:	08001635 	.word	0x08001635
 80015f4:	08001627 	.word	0x08001627
	{
		case DIGITAL_OUT_STATE:
			data = getState();
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 f821 	bl	8001640 <_ZNK17DigitalOutChannel8getStateEv>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
			return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	e016      	b.n	8001638 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_DUTY_CYCLE:
			data = dutyCycle;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8a1b      	ldrh	r3, [r3, #16]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	601a      	str	r2, [r3, #0]
			return 0;
 8001614:	2300      	movs	r3, #0
 8001616:	e00f      	b.n	8001638 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_FREQUENCY:
			data = frequency;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8a5b      	ldrh	r3, [r3, #18]
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
			return 0;
 8001622:	2300      	movs	r3, #0
 8001624:	e008      	b.n	8001638 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	601a      	str	r2, [r3, #0]
			return 0;
 8001630:	2300      	movs	r3, #0
 8001632:	e001      	b.n	8001638 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		default:
			return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZNK17DigitalOutChannel8getStateEv>:

uint32_t DigitalOutChannel::getState() const
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	return (STRHAL_GPIO_ReadOutput(&cntrlPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3320      	adds	r3, #32
 800164c:	4618      	mov	r0, r3
 800164e:	f005 fb0a 	bl	8006c66 <STRHAL_GPIO_ReadOutput>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZN17DigitalOutChannel8setStateEm>:

int DigitalOutChannel::setState(uint32_t state)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
	if (state == 0)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <_ZN17DigitalOutChannel8setStateEm+0x1e>
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_L);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3320      	adds	r3, #32
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f005 fac9 	bl	8006c14 <STRHAL_GPIO_Write>
 8001682:	e005      	b.n	8001690 <_ZN17DigitalOutChannel8setStateEm+0x2a>
	}
	else
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_H);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3320      	adds	r3, #32
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f005 fac2 	bl	8006c14 <STRHAL_GPIO_Write>
	}
	return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_ZNK17DigitalOutChannel14getMeasurementEv>:
{
	return false;
}

uint16_t DigitalOutChannel::getMeasurement() const
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	return *adcMeasurement;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <_ZN14GenericChannelC1Emmm>:
#include <git_version.h>

GenericChannel* GenericChannel::gcPtr = nullptr; // necessary for static callbacks
bool GenericChannel::loraActive = false;

GenericChannel::GenericChannel(uint32_t nodeId, uint32_t firmwareVersion, uint32_t refreshDivider) :
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
		AbstractChannel(CHANNEL_TYPE_NODE_GENERIC, GENERIC_CHANNEL_ID, refreshDivider), can(Can::instance(nodeId)), flash(W25Qxx_Flash::instance()), nodeId(nodeId), firmwareVersion(GIT_COMMIT_HASH_VALUE)
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	223f      	movs	r2, #63	; 0x3f
 80016cc:	2101      	movs	r1, #1
 80016ce:	f7ff fd77 	bl	80011c0 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <_ZN14GenericChannelC1Emmm+0x88>)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3310      	adds	r3, #16
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f007 fba3 	bl	8008e2c <memset>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3390      	adds	r3, #144	; 0x90
 80016ea:	2220      	movs	r2, #32
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f007 fb9c 	bl	8008e2c <memset>
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f7fe fdb7 	bl	8000268 <_ZN3Can8instanceEm>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001702:	f000 ff05 	bl	8002510 <_ZN12W25Qxx_Flash8instanceEv>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <_ZN14GenericChannelC1Emmm+0x8c>)
 800171a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
{
	gcPtr = this;
 800172e:	4a06      	ldr	r2, [pc, #24]	; (8001748 <_ZN14GenericChannelC1Emmm+0x90>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	080091ac 	.word	0x080091ac
 8001744:	ef9383f2 	.word	0xef9383f2
 8001748:	20000818 	.word	0x20000818

0800174c <_ZNK14GenericChannel9getNodeIdEv>:

uint32_t GenericChannel::getNodeId() const
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	return nodeId;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_ZN14GenericChannel4initEv>:

int GenericChannel::init()
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b08a      	sub	sp, #40	; 0x28
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3390      	adds	r3, #144	; 0x90
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	3320      	adds	r3, #32
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	429a      	cmp	r2, r3
 8001784:	d01a      	beq.n	80017bc <_ZN14GenericChannel4initEv+0x56>
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00f      	beq.n	80017b2 <_ZN14GenericChannel4initEv+0x4c>
			continue;
		if (module->init() != 0)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6978      	ldr	r0, [r7, #20]
 800179a:	4798      	blx	r3
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <_ZN14GenericChannel4initEv+0x4e>
			return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b0:	e02d      	b.n	800180e <_ZN14GenericChannel4initEv+0xa8>
			continue;
 80017b2:	bf00      	nop
	for (AbstractModule *module : modules)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3304      	adds	r3, #4
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e7e0      	b.n	800177e <_ZN14GenericChannel4initEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3310      	adds	r3, #16
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	623b      	str	r3, [r7, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	3380      	adds	r3, #128	; 0x80
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d01b      	beq.n	800180c <_ZN14GenericChannel4initEv+0xa6>
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d010      	beq.n	8001802 <_ZN14GenericChannel4initEv+0x9c>
			continue;
		if (channel->init() != 0)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3308      	adds	r3, #8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	4798      	blx	r3
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <_ZN14GenericChannel4initEv+0x9e>
		{
			return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001800:	e005      	b.n	800180e <_ZN14GenericChannel4initEv+0xa8>
			continue;
 8001802:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	3304      	adds	r3, #4
 8001808:	623b      	str	r3, [r7, #32]
 800180a:	e7df      	b.n	80017cc <_ZN14GenericChannel4initEv+0x66>
		}
	}

	return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_ZN14GenericChannel4execEv>:

int GenericChannel::exec()
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b08a      	sub	sp, #40	; 0x28
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3390      	adds	r3, #144	; 0x90
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3320      	adds	r3, #32
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	429a      	cmp	r2, r3
 8001834:	d01b      	beq.n	800186e <_ZN14GenericChannel4execEv+0x58>
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d010      	beq.n	8001864 <_ZN14GenericChannel4execEv+0x4e>
			continue;
		if (module->exec() != 0)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3308      	adds	r3, #8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	4798      	blx	r3
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <_ZN14GenericChannel4execEv+0x50>
			return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001862:	e02d      	b.n	80018c0 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 8001864:	bf00      	nop
	for (AbstractModule *module : modules)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3304      	adds	r3, #4
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	e7df      	b.n	800182e <_ZN14GenericChannel4execEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3310      	adds	r3, #16
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	3380      	adds	r3, #128	; 0x80
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	6a3a      	ldr	r2, [r7, #32]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d01b      	beq.n	80018be <_ZN14GenericChannel4execEv+0xa8>
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d010      	beq.n	80018b4 <_ZN14GenericChannel4execEv+0x9e>
			continue;
		if (channel->exec() != 0)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3310      	adds	r3, #16
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68b8      	ldr	r0, [r7, #8]
 800189c:	4798      	blx	r3
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <_ZN14GenericChannel4execEv+0xa0>
			return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b2:	e005      	b.n	80018c0 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 80018b4:	bf00      	nop
	for (AbstractChannel *channel : channels)
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	3304      	adds	r3, #4
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	e7df      	b.n	800187e <_ZN14GenericChannel4execEv+0x68>
	}
	return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN14GenericChannel5resetEv>:

int GenericChannel::reset()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	(void) flash.reset();
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3304      	adds	r3, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4610      	mov	r0, r2
 80018e4:	4798      	blx	r3
	return 0;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_ZN14GenericChannel14processMessageEhPhRh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	460b      	mov	r3, r1
 80018fe:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	2b12      	cmp	r3, #18
 8001904:	d86d      	bhi.n	80019e2 <_ZN14GenericChannel14processMessageEhPhRh+0xf2>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <_ZN14GenericChannel14processMessageEhPhRh+0x1c>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	0800197b 	.word	0x0800197b
 8001910:	080019e3 	.word	0x080019e3
 8001914:	080019e3 	.word	0x080019e3
 8001918:	080019e3 	.word	0x080019e3
 800191c:	080019e3 	.word	0x080019e3
 8001920:	080019e3 	.word	0x080019e3
 8001924:	080019e3 	.word	0x080019e3
 8001928:	080019e3 	.word	0x080019e3
 800192c:	080019e3 	.word	0x080019e3
 8001930:	080019e3 	.word	0x080019e3
 8001934:	08001967 	.word	0x08001967
 8001938:	080019e3 	.word	0x080019e3
 800193c:	08001959 	.word	0x08001959
 8001940:	080019e3 	.word	0x080019e3
 8001944:	080019e3 	.word	0x080019e3
 8001948:	080019e3 	.word	0x080019e3
 800194c:	080019e3 	.word	0x080019e3
 8001950:	080019e3 	.word	0x080019e3
 8001954:	080019c7 	.word	0x080019c7
	{
		case GENERIC_REQ_NODE_INFO:
			//LL_mDelay(100*this->nodeId);
			return this->getNodeInfo(returnData, n);
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f9d2 	bl	8001d06 <_ZN14GenericChannel11getNodeInfoEPhRh>
 8001962:	4603      	mov	r3, r0
 8001964:	e045      	b.n	80019f2 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_DATA:
			return this->getSensorData(returnData, n);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3318      	adds	r3, #24
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	4798      	blx	r3
 8001976:	4603      	mov	r3, r0
 8001978:	e03b      	b.n	80019f2 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_RESET_ALL_SETTINGS:
			(void) flash.configReset();
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fa1b 	bl	8002dbc <_ZN12W25Qxx_Flash11configResetEv>
			for (AbstractChannel *channel : channels)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3310      	adds	r3, #16
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	3380      	adds	r3, #128	; 0x80
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	429a      	cmp	r2, r3
 800199c:	d011      	beq.n	80019c2 <_ZN14GenericChannel14processMessageEhPhRh+0xd2>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
			{
				if (channel == nullptr)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <_ZN14GenericChannel14processMessageEhPhRh+0xc8>
					continue;

				channel->reset(); // TODO implement good reset for every channel
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	330c      	adds	r3, #12
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6938      	ldr	r0, [r7, #16]
 80019b4:	4798      	blx	r3
 80019b6:	e000      	b.n	80019ba <_ZN14GenericChannel14processMessageEhPhRh+0xca>
					continue;
 80019b8:	bf00      	nop
			for (AbstractChannel *channel : channels)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	e7e9      	b.n	8001996 <_ZN14GenericChannel14processMessageEhPhRh+0xa6>
			}
			return 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e015      	b.n	80019f2 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_FLASH_CLEAR:
			(void) flash.setState(FlashState::CLEARING);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80019cc:	2101      	movs	r1, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 ff7a 	bl	80028c8 <_ZN12W25Qxx_Flash8setStateE10FlashState>
			return this->getFlashClearInfo(returnData, n);
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f958 	bl	8001c8e <_ZN14GenericChannel17getFlashClearInfoEPhRh>
 80019de:	4603      	mov	r3, r0
 80019e0:	e007      	b.n	80019f2 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	7af9      	ldrb	r1, [r7, #11]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	f7ff fc73 	bl	80012d4 <_ZN15AbstractChannel14processMessageEhPhRh>
 80019ee:	4603      	mov	r3, r0
 80019f0:	bf00      	nop
	}
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop

080019fc <_ZN14GenericChannel14processMessageEhPhRhh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n, uint8_t channelId)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	72fb      	strb	r3, [r7, #11]
	for (AbstractChannel *channel : channels)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3310      	adds	r3, #16
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	3380      	adds	r3, #128	; 0x80
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d029      	beq.n	8001a78 <_ZN14GenericChannel14processMessageEhPhRhh+0x7c>
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
	{
		if (channel->IsChannelId(channelId))
 8001a2a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6938      	ldr	r0, [r7, #16]
 8001a32:	f7ff fc0d 	bl	8001250 <_ZNK15AbstractChannel11IsChannelIdEh>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d019      	beq.n	8001a70 <_ZN14GenericChannel14processMessageEhPhRhh+0x74>
		{
			if (channel == nullptr)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <_ZN14GenericChannel14processMessageEhPhRhh+0x72>
				continue;

			if (channel->processMessage(commandId, returnData, n) != 0)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3314      	adds	r3, #20
 8001a48:	681c      	ldr	r4, [r3, #0]
 8001a4a:	7af9      	ldrb	r1, [r7, #11]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6938      	ldr	r0, [r7, #16]
 8001a52:	47a0      	blx	r4
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <_ZN14GenericChannel14processMessageEhPhRhh+0x6e>
				return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a68:	e008      	b.n	8001a7c <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
			return 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e006      	b.n	8001a7c <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
				continue;
 8001a6e:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3304      	adds	r3, #4
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e7d1      	b.n	8001a1c <_ZN14GenericChannel14processMessageEhPhRhh+0x20>
		}

	}
	return -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}

08001a84 <_ZN14GenericChannel11setVariableEhl>:

int GenericChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001a92:	7afb      	ldrb	r3, [r7, #11]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d029      	beq.n	8001aec <_ZN14GenericChannel11setVariableEhl+0x68>
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	dc33      	bgt.n	8001b04 <_ZN14GenericChannel11setVariableEhl+0x80>
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d002      	beq.n	8001aa6 <_ZN14GenericChannel11setVariableEhl+0x22>
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d008      	beq.n	8001ab6 <_ZN14GenericChannel11setVariableEhl+0x32>
 8001aa4:	e02e      	b.n	8001b04 <_ZN14GenericChannel11setVariableEhl+0x80>
	{
		case GENERIC_REFRESH_DIVIDER:
			refreshDivider = data;
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
			return 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e028      	b.n	8001b08 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LOGGING_ENABLED:
			loggingEnabled = data;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (loggingEnabled == 0)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d107      	bne.n	8001ada <_ZN14GenericChannel11setVariableEhl+0x56>
			{
				flash.setState(FlashState::IDLE);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fef8 	bl	80028c8 <_ZN12W25Qxx_Flash8setStateE10FlashState>
 8001ad8:	e006      	b.n	8001ae8 <_ZN14GenericChannel11setVariableEhl+0x64>
			}
			else
			{
				flash.setState(FlashState::LOGGING);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fef0 	bl	80028c8 <_ZN12W25Qxx_Flash8setStateE10FlashState>
			}
			return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e00d      	b.n	8001b08 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LORA_ENABLED:
			if (data == 0)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <_ZN14GenericChannel11setVariableEhl+0x76>
			{
				setLoraActive(false);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f982 	bl	8001dfc <_ZN14GenericChannel13setLoraActiveEb>
 8001af8:	e002      	b.n	8001b00 <_ZN14GenericChannel11setVariableEhl+0x7c>
			}
			else
			{
				setLoraActive(true);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f000 f97e 	bl	8001dfc <_ZN14GenericChannel13setLoraActiveEb>
			}
			return 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e001      	b.n	8001b08 <_ZN14GenericChannel11setVariableEhl+0x84>
		default:
			return -1;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZNK14GenericChannel11getVariableEhRl>:

int GenericChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d015      	beq.n	8001b50 <_ZNK14GenericChannel11getVariableEhRl+0x40>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	dc20      	bgt.n	8001b6a <_ZNK14GenericChannel11getVariableEhRl+0x5a>
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d002      	beq.n	8001b32 <_ZNK14GenericChannel11getVariableEhRl+0x22>
 8001b2c:	2b07      	cmp	r3, #7
 8001b2e:	d007      	beq.n	8001b40 <_ZNK14GenericChannel11getVariableEhRl+0x30>
 8001b30:	e01b      	b.n	8001b6a <_ZNK14GenericChannel11getVariableEhRl+0x5a>
	{
		case GENERIC_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	601a      	str	r2, [r3, #0]
			return 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e016      	b.n	8001b6e <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LOGGING_ENABLED:
			data = (int32_t) loggingEnabled;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]
			return 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e00e      	b.n	8001b6e <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LORA_ENABLED:
			if (loraActive)
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <_ZNK14GenericChannel11getVariableEhRl+0x6c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <_ZNK14GenericChannel11getVariableEhRl+0x50>
				data = 1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e002      	b.n	8001b66 <_ZNK14GenericChannel11getVariableEhRl+0x56>
			else
				data = 0;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
			return 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e001      	b.n	8001b6e <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		default:
			return -1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	2000081c 	.word	0x2000081c

08001b80 <_ZN14GenericChannel13getSensorDataEPhRh>:
	n = sizeof(FlashStatusMsg_t);
	return 0;
}

int GenericChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
	if (!IsRefreshed())
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb72 	bl	8001278 <_ZN15AbstractChannel11IsRefreshedEv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f083 0301 	eor.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <_ZN14GenericChannel13getSensorDataEPhRh+0x26>
		return -1;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba4:	e06f      	b.n	8001c86 <_ZN14GenericChannel13getSensorDataEPhRh+0x106>

	DataMsg_t *dataMsg = (DataMsg_t*) data;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	623b      	str	r3, [r7, #32]
	dataMsg->channel_mask = 0;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	705a      	strb	r2, [r3, #1]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	709a      	strb	r2, [r3, #2]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	70da      	strb	r2, [r3, #3]
	for (AbstractChannel *channel : channels)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3310      	adds	r3, #16
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3380      	adds	r3, #128	; 0x80
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d03a      	beq.n	8001c4a <_ZN14GenericChannel13getSensorDataEPhRh+0xca>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr || !channel->IsRefreshed())
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <_ZN14GenericChannel13getSensorDataEPhRh+0x72>
 8001be0:	6978      	ldr	r0, [r7, #20]
 8001be2:	f7ff fb49 	bl	8001278 <_ZN15AbstractChannel11IsRefreshedEv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <_ZN14GenericChannel13getSensorDataEPhRh+0x76>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <_ZN14GenericChannel13getSensorDataEPhRh+0x78>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d11f      	bne.n	8001c3c <_ZN14GenericChannel13getSensorDataEPhRh+0xbc>
			continue;
		if (channel->getSensorData(&dataMsg->uint8[0], n) == -1)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3318      	adds	r3, #24
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	1d11      	adds	r1, r2, #4
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	4798      	blx	r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c14:	bf0c      	ite	eq
 8001c16:	2301      	moveq	r3, #1
 8001c18:	2300      	movne	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10f      	bne.n	8001c40 <_ZN14GenericChannel13getSensorDataEPhRh+0xc0>
			continue;
		dataMsg->channel_mask |= 1 << channel->getChannelId();
 8001c20:	6978      	ldr	r0, [r7, #20]
 8001c22:	f7ff fb09 	bl	8001238 <_ZNK15AbstractChannel12getChannelIdEv>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	fa03 f202 	lsl.w	r2, r3, r2
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e002      	b.n	8001c42 <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001c3c:	bf00      	nop
 8001c3e:	e000      	b.n	8001c42 <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001c40:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3304      	adds	r3, #4
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	e7c0      	b.n	8001bcc <_ZN14GenericChannel13getSensorDataEPhRh+0x4c>
	}
	n += 1 * sizeof(uint32_t);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	701a      	strb	r2, [r3, #0]

	if (loggingEnabled && !flash.lock)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d011      	beq.n	8001c84 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c66:	791b      	ldrb	r3, [r3, #4]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
		flash.addLog(data, n);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	f000 feb5 	bl	80029ee <_ZN12W25Qxx_Flash6addLogEPhh>
	return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZN14GenericChannel17getFlashClearInfoEPhRh>:

int GenericChannel::getFlashClearInfo(uint8_t *data, uint8_t &n)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]

	FlashStatusMsg_t *info = (FlashStatusMsg_t*) data;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	617b      	str	r3, [r7, #20]

	FlashState flashState = flash.getState();
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fe1e 	bl	80028e6 <_ZN12W25Qxx_Flash8getStateEv>
 8001caa:	6138      	str	r0, [r7, #16]
	if (flashState == FlashState::IDLE || flashState == FlashState::CLEARING)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x2a>
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d103      	bne.n	8001cc0 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x32>
	{ //TODO actually check if clearing has initiated
		info->status = INITIATED;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e009      	b.n	8001cd4 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else if (flashState == FlashState::READY)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d103      	bne.n	8001cce <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x40>
	{
		info->status = COMPLETED;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e002      	b.n	8001cd4 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else
	{
		info->status = INITIATED;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
	}

	n = sizeof(FlashStatusMsg_t);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN14GenericChannel22getControlInputChannelEh>:

AbstractChannel* GenericChannel::getControlInputChannel(uint8_t id)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
	return channels[id];
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3204      	adds	r2, #4
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_ZN14GenericChannel11getNodeInfoEPhRh>:


int GenericChannel::getNodeInfo(uint8_t *data, uint8_t &n)
{
 8001d06:	b590      	push	{r4, r7, lr}
 8001d08:	b08d      	sub	sp, #52	; 0x34
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
	NodeInfoMsg_t *info = (NodeInfoMsg_t*) data;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	623b      	str	r3, [r7, #32]

	info->firmware_version = firmwareVersion;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	601a      	str	r2, [r3, #0]

	info->channel_mask = 0x00000000;
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	2200      	movs	r2, #0
 8001d24:	711a      	strb	r2, [r3, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	715a      	strb	r2, [r3, #5]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	719a      	strb	r2, [r3, #6]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	71da      	strb	r2, [r3, #7]
	uint32_t length = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t i = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (AbstractChannel *channel : channels)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3310      	adds	r3, #16
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3380      	adds	r3, #128	; 0x80
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d02a      	beq.n	8001daa <_ZN14GenericChannel11getNodeInfoEPhRh+0xa4>
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01f      	beq.n	8001da0 <_ZN14GenericChannel11getNodeInfoEPhRh+0x9a>
			continue;

		info->channel_type[i] = channel->getChannelType();
 8001d60:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8001d64:	6978      	ldr	r0, [r7, #20]
 8001d66:	f7ff fa4f 	bl	8001208 <_ZNK15AbstractChannel14getChannelTypeEv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	4423      	add	r3, r4
 8001d72:	721a      	strb	r2, [r3, #8]
		info->channel_mask |= 1 << channel->getChannelId();
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7ff fa5f 	bl	8001238 <_ZNK15AbstractChannel12getChannelIdEv>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	fa03 f202 	lsl.w	r2, r3, r2
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	605a      	str	r2, [r3, #4]
		length++;
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	3301      	adds	r3, #1
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8001d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001d9e:	e000      	b.n	8001da2 <_ZN14GenericChannel11getNodeInfoEPhRh+0x9c>
			continue;
 8001da0:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3304      	adds	r3, #4
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	e7d0      	b.n	8001d4c <_ZN14GenericChannel11getNodeInfoEPhRh+0x46>
	}
	n = length + 2 * sizeof(uint32_t);
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3308      	adds	r3, #8
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	701a      	strb	r2, [r3, #0]
	return 0;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3734      	adds	r7, #52	; 0x34
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}

08001dc0 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>:

void GenericChannel::registerChannel(AbstractChannel *channel)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	if (channel->getChannelId() < MAX_CHANNELS)
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7ff fa34 	bl	8001238 <_ZNK15AbstractChannel12getChannelIdEv>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b1f      	cmp	r3, #31
 8001dd4:	bf94      	ite	ls
 8001dd6:	2301      	movls	r3, #1
 8001dd8:	2300      	movhi	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <_ZN14GenericChannel15registerChannelEP15AbstractChannel+0x34>
		channels[channel->getChannelId()] = channel;
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f7ff fa29 	bl	8001238 <_ZNK15AbstractChannel12getChannelIdEv>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3204      	adds	r2, #4
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN14GenericChannel13setLoraActiveEb>:
	{
		printLog();
	}
}

void GenericChannel::setLoraActive(bool enable) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	loraActive = enable;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <_ZN14GenericChannel13setLoraActiveEb+0x1c>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	7013      	strb	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	2000081c 	.word	0x2000081c

08001e1c <_ZN14GenericChannel8receptorEmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
}

void GenericChannel::receptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8001e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1e:	b09d      	sub	sp, #116	; 0x74
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	Can_MessageId_t msgId =
 8001e28:	2300      	movs	r3, #0
 8001e2a:	663b      	str	r3, [r7, #96]	; 0x60
	{ 0 };
	Can_MessageData_t msgData =
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2242      	movs	r2, #66	; 0x42
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 fff9 	bl	8008e2c <memset>
	{ 0 };

	msgId.uint32 = id;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	663b      	str	r3, [r7, #96]	; 0x60
	memcpy(msgData.uint8, data, 64); //TODO only copy n bytes
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	461c      	mov	r4, r3
 8001e42:	f107 061c 	add.w	r6, r7, #28
 8001e46:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8001e4a:	4635      	mov	r5, r6
 8001e4c:	4623      	mov	r3, r4
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e58:	3410      	adds	r4, #16
 8001e5a:	3610      	adds	r6, #16
 8001e5c:	4564      	cmp	r4, ip
 8001e5e:	d1f4      	bne.n	8001e4a <_ZN14GenericChannel8receptorEmPhm+0x2e>
	uint8_t commandId = msgData.bit.cmd_id;
 8001e60:	7f7b      	ldrb	r3, [r7, #29]
 8001e62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t channelId = msgData.bit.info.channel_id;
 8001e66:	7f3b      	ldrb	r3, [r7, #28]
 8001e68:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t ret_n = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	76fb      	strb	r3, [r7, #27]

	if (channelId == GENERIC_CHANNEL_ID)
 8001e76:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8001e7c:	d118      	bne.n	8001eb0 <_ZN14GenericChannel8receptorEmPhm+0x94>
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n) != 0)
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <_ZN14GenericChannel8receptorEmPhm+0x158>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <_ZN14GenericChannel8receptorEmPhm+0x158>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3314      	adds	r3, #20
 8001e8a:	681c      	ldr	r4, [r3, #0]
 8001e8c:	f107 051b 	add.w	r5, r7, #27
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	1c9a      	adds	r2, r3, #2
 8001e96:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
 8001e9a:	462b      	mov	r3, r5
 8001e9c:	47a0      	blx	r4
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d017      	beq.n	8001ede <_ZN14GenericChannel8receptorEmPhm+0xc2>
			return;
 8001eae:	e05d      	b.n	8001f6c <_ZN14GenericChannel8receptorEmPhm+0x150>
	}
	else
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n, channelId) != 0)
 8001eb0:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <_ZN14GenericChannel8receptorEmPhm+0x158>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f107 041b 	add.w	r4, r7, #27
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	1c9a      	adds	r2, r3, #2
 8001ebe:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
 8001ec2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4623      	mov	r3, r4
 8001eca:	f7ff fd97 	bl	80019fc <_ZN14GenericChannel14processMessageEhPhRhh>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d145      	bne.n	8001f6a <_ZN14GenericChannel8receptorEmPhm+0x14e>
			return;
	}

	msgId.info.direction = NODE2MASTER_DIRECTION;
 8001ede:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	msgId.info.node_id = gcPtr->getNodeId();
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <_ZN14GenericChannel8receptorEmPhm+0x158>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc2c 	bl	800174c <_ZNK14GenericChannel9getNodeIdEv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001f00:	f362 0346 	bfi	r3, r2, #1, #6
 8001f04:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8001f08:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001f0c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8001f10:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	msgId.info.priority = STANDARD_PRIORITY;
 8001f14:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001f18:	2202      	movs	r2, #2
 8001f1a:	f362 0342 	bfi	r3, r2, #1, #2
 8001f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	msgData.bit.cmd_id = commandId + 1;
 8001f22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f26:	3301      	adds	r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	777b      	strb	r3, [r7, #29]
	msgBuf[CAN_MSG_LENGTH(ret_n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(ret_n) + 3);
#endif

	//(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
	if(STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n)) == -1)
 8001f2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f2e:	7efb      	ldrb	r3, [r7, #27]
 8001f30:	3302      	adds	r3, #2
 8001f32:	f107 021c 	add.w	r2, r7, #28
 8001f36:	2000      	movs	r0, #0
 8001f38:	f004 faf4 	bl	8006524 <STRHAL_CAN_Send>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00e      	beq.n	8001f6c <_ZN14GenericChannel8receptorEmPhm+0x150>
	{
		STRHAL_GPIO_t led_2 = { GPIOB, 14, STRHAL_GPIO_TYPE_OPP };
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <_ZN14GenericChannel8receptorEmPhm+0x15c>)
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f58:	e883 0003 	stmia.w	r3, {r0, r1}
		STRHAL_GPIO_Write(&led_2, STRHAL_GPIO_VALUE_H);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	2101      	movs	r1, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fe56 	bl	8006c14 <STRHAL_GPIO_Write>
 8001f68:	e000      	b.n	8001f6c <_ZN14GenericChannel8receptorEmPhm+0x150>
			return;
 8001f6a:	bf00      	nop

	}


}
 8001f6c:	376c      	adds	r7, #108	; 0x6c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000818 	.word	0x20000818
 8001f78:	0800909c 	.word	0x0800909c

08001f7c <_ZN14GenericChannel12heartbeatCanEv>:

void GenericChannel::heartbeatCan()
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b095      	sub	sp, #84	; 0x54
 8001f80:	af00      	add	r7, sp, #0
	Can_MessageId_t msgId =
 8001f82:	2300      	movs	r3, #0
 8001f84:	64fb      	str	r3, [r7, #76]	; 0x4c
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8001f86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f8a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8001f8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	msgId.info.direction = NODE2MASTER_DIRECTION;
 8001f92:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.node_id = gcPtr->getNodeId();
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fbd2 	bl	800174c <_ZNK14GenericChannel9getNodeIdEv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001fb4:	f362 0346 	bfi	r3, r2, #1, #6
 8001fb8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.priority = STANDARD_PRIORITY;
 8001fbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f362 0342 	bfi	r3, r2, #1, #2
 8001fc6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	Can_MessageData_t msgData =
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	2242      	movs	r2, #66	; 0x42
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f006 ff2a 	bl	8008e2c <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_DATA;
 8001fd8:	230b      	movs	r3, #11
 8001fda:	727b      	strb	r3, [r7, #9]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8001fdc:	7a3b      	ldrb	r3, [r7, #8]
 8001fde:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001fe2:	723b      	strb	r3, [r7, #8]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8001fe4:	7a3b      	ldrb	r3, [r7, #8]
 8001fe6:	f36f 1387 	bfc	r3, #6, #2
 8001fea:	723b      	strb	r3, [r7, #8]

	uint8_t n = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	71fb      	strb	r3, [r7, #7]
	if (gcPtr->getSensorData(&msgData.bit.data.uint8[0], n) != 0)
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3318      	adds	r3, #24
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1dfc      	adds	r4, r7, #7
 8002000:	f107 0208 	add.w	r2, r7, #8
 8002004:	1c91      	adds	r1, r2, #2
 8002006:	4622      	mov	r2, r4
 8002008:	4798      	blx	r3
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <_ZN14GenericChannel12heartbeatCanEv+0xd0>
	{ // Sensor Data collection failed, or Refresh Divider not yet met
		return;
	}

	if (loraActive)
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <_ZN14GenericChannel12heartbeatCanEv+0xdc>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <_ZN14GenericChannel12heartbeatCanEv+0xc0>
	{
		Radio::msgArray[Radio::RCU_START_ADDR] = 1;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <_ZN14GenericChannel12heartbeatCanEv+0xe0>)
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		memcpy(&Radio::msgArray[Radio::RCU_START_ADDR + 1], msgData.bit.data.uint8, n);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	461a      	mov	r2, r3
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	3302      	adds	r3, #2
 8002034:	4619      	mov	r1, r3
 8002036:	480a      	ldr	r0, [pc, #40]	; (8002060 <_ZN14GenericChannel12heartbeatCanEv+0xe4>)
 8002038:	f006 feea 	bl	8008e10 <memcpy>
	memcpy(&msgBuf[2], msgData.uint8, CAN_MSG_LENGTH(n));
	msgBuf[CAN_MSG_LENGTH(n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(n) + 3);
#endif

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 800203c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f107 0208 	add.w	r2, r7, #8
 8002044:	2000      	movs	r0, #0
 8002046:	f004 fa6d 	bl	8006524 <STRHAL_CAN_Send>
 800204a:	e000      	b.n	800204e <_ZN14GenericChannel12heartbeatCanEv+0xd2>
		return;
 800204c:	bf00      	nop
}
 800204e:	3754      	adds	r7, #84	; 0x54
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}
 8002054:	20000818 	.word	0x20000818
 8002058:	2000081c 	.word	0x2000081c
 800205c:	200007b8 	.word	0x200007b8
 8002060:	200007f0 	.word	0x200007f0

08002064 <_ZN22PressureControlChannelC1EhR14GenericChannelhR17DigitalOutChannelm>:
#include <Channels/PressureControlChannel.h>


PressureControlChannel::PressureControlChannel(uint8_t id, GenericChannel &parent, uint8_t inputChannelId, DigitalOutChannel &solenoidChannel, uint32_t refreshDivider):
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	72fb      	strb	r3, [r7, #11]
 8002074:	4613      	mov	r3, r2
 8002076:	72bb      	strb	r3, [r7, #10]
		AbstractChannel(CHANNEL_TYPE_CONTROL, id, refreshDivider), parent(parent),inputChannelId(inputChannelId), solenoidChannel(solenoidChannel)
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	7afa      	ldrb	r2, [r7, #11]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	210a      	movs	r1, #10
 8002080:	f7ff f89e 	bl	80011c0 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <_ZN22PressureControlChannelC1EhR14GenericChannelhR17DigitalOutChannelm+0x68>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	821a      	strh	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	825a      	strh	r2, [r3, #18]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	829a      	strh	r2, [r3, #20]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	82da      	strh	r2, [r3, #22]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	7aba      	ldrb	r2, [r7, #10]
 80020ac:	771a      	strb	r2, [r3, #28]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	621a      	str	r2, [r3, #32]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
{
}
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	080091dc 	.word	0x080091dc

080020d0 <_ZN22PressureControlChannel4initEv>:

int PressureControlChannel::init()
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

	return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_ZN22PressureControlChannel4execEv>:

int PressureControlChannel::exec()
{
 80020e6:	b5b0      	push	{r4, r5, r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 80020ee:	f005 facd 	bl	800768c <STRHAL_Systick_GetTick>
 80020f2:	e9c7 0104 	strd	r0, r1, [r7, #16]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002100:	1a84      	subs	r4, r0, r2
 8002102:	eb61 0503 	sbc.w	r5, r1, r3
 8002106:	2c64      	cmp	r4, #100	; 0x64
 8002108:	f175 0300 	sbcs.w	r3, r5, #0
 800210c:	d201      	bcs.n	8002112 <_ZN22PressureControlChannel4execEv+0x2c>
		return 0;
 800210e:	2300      	movs	r3, #0
 8002110:	e066      	b.n	80021e0 <_ZN22PressureControlChannel4execEv+0xfa>

	timeLastSample = time;
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002118:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (enabled == 1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8a1b      	ldrh	r3, [r3, #16]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d15c      	bne.n	80021de <_ZN22PressureControlChannel4execEv+0xf8>
	{

		uint16_t pressure = (parent.getControlInputChannel(inputChannelId))->getMeasurement(); //pressureChannel.getMeasurement();
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7f1b      	ldrb	r3, [r3, #28]
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f7ff fdd8 	bl	8001ce4 <_ZN14GenericChannel22getControlInputChannelEh>
 8002134:	4603      	mov	r3, r0
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	321c      	adds	r2, #28
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	4790      	blx	r2
 8002140:	4603      	mov	r3, r0
 8002142:	81fb      	strh	r3, [r7, #14]
		if (pressure > threshold)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8a9b      	ldrh	r3, [r3, #20]
 8002148:	89fa      	ldrh	r2, [r7, #14]
 800214a:	429a      	cmp	r2, r3
 800214c:	d925      	bls.n	800219a <_ZN22PressureControlChannel4execEv+0xb4>
		{ // pressure too high
			threshold = targetPressure - hysteresis;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8a5a      	ldrh	r2, [r3, #18]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8adb      	ldrh	r3, [r3, #22]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	829a      	strh	r2, [r3, #20]
			if (solenoidChannel.getState() != 0)// if not already closed -> close
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa6c 	bl	8001640 <_ZNK17DigitalOutChannel8getStateEv>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d032      	beq.n	80021de <_ZN22PressureControlChannel4execEv+0xf8>
			{
				if (solenoidChannel.setState(0) != 0)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fa71 	bl	8001666 <_ZN17DigitalOutChannel8setStateEm>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d024      	beq.n	80021de <_ZN22PressureControlChannel4execEv+0xf8>
					return -1;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002198:	e022      	b.n	80021e0 <_ZN22PressureControlChannel4execEv+0xfa>
			}
		}
		else
		{ // pressure below threshold
			threshold = targetPressure;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8a5a      	ldrh	r2, [r3, #18]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	829a      	strh	r2, [r3, #20]
			if (solenoidChannel.getState() != 1)// if not already open -> open
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fa4a 	bl	8001640 <_ZNK17DigitalOutChannel8getStateEv>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <_ZN22PressureControlChannel4execEv+0xf8>
			{
				if (solenoidChannel.setState(1) != 0)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fa4f 	bl	8001666 <_ZN17DigitalOutChannel8setStateEm>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <_ZN22PressureControlChannel4execEv+0xf8>
					return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021dc:	e000      	b.n	80021e0 <_ZN22PressureControlChannel4execEv+0xfa>
			}
		}
	}
	return 0;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdb0      	pop	{r4, r5, r7, pc}

080021e8 <_ZN22PressureControlChannel5resetEv>:

int PressureControlChannel::reset()
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_ZN22PressureControlChannel14processMessageEhPhRh>:

int PressureControlChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	460b      	mov	r3, r1
 800220c:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	7af9      	ldrb	r1, [r7, #11]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	f7ff f85d 	bl	80012d4 <_ZN15AbstractChannel14processMessageEhPhRh>
 800221a:	4603      	mov	r3, r0
	}
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZN22PressureControlChannel13getSensorDataEPhRh>:

int PressureControlChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
	*out = (uint16_t) solenoidChannel.getState();
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f9fd 	bl	8001640 <_ZNK17DigitalOutChannel8getStateEv>
 8002246:	4603      	mov	r3, r0
 8002248:	b29a      	uxth	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	801a      	strh	r2, [r3, #0]

	n += CONTROL_DATA_N_BYTES;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3302      	adds	r3, #2
 8002254:	b2da      	uxtb	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	701a      	strb	r2, [r3, #0]
	return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZN22PressureControlChannel11setVariableEhl>:

int PressureControlChannel::setVariable(uint8_t variableId, int32_t data)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	460b      	mov	r3, r1
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d87a      	bhi.n	800236e <_ZN22PressureControlChannel11setVariableEhl+0x10a>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <_ZN22PressureControlChannel11setVariableEhl+0x1c>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	0800229d 	.word	0x0800229d
 8002284:	080022eb 	.word	0x080022eb
 8002288:	08002327 	.word	0x08002327
 800228c:	0800232d 	.word	0x0800232d
 8002290:	0800234d 	.word	0x0800234d
 8002294:	08002353 	.word	0x08002353
 8002298:	0800235f 	.word	0x0800235f
	{
		case CONTROL_ENABLED:
			enabled = data;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	821a      	strh	r2, [r3, #16]
			if (data == 0 && solenoidChannel.getState() != 0)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <_ZN22PressureControlChannel11setVariableEhl+0x5a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f9c6 	bl	8001640 <_ZNK17DigitalOutChannel8getStateEv>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <_ZN22PressureControlChannel11setVariableEhl+0x5a>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <_ZN22PressureControlChannel11setVariableEhl+0x5c>
 80022be:	2300      	movs	r3, #0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <_ZN22PressureControlChannel11setVariableEhl+0x82>
			{
				if (solenoidChannel.setState(0) != 0) // make sure solenoid is closed after disabling
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f9cb 	bl	8001666 <_ZN17DigitalOutChannel8setStateEm>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <_ZN22PressureControlChannel11setVariableEhl+0x82>
					return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022e4:	e045      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
			}
			return 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e043      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_TARGET:
			targetPressure = data * 4095 / UINT16_MAX; // convert from 16 to 12bit scale
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	031b      	lsls	r3, r3, #12
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	4a22      	ldr	r2, [pc, #136]	; (800237c <_ZN22PressureControlChannel11setVariableEhl+0x118>)
 80022f4:	fb82 1203 	smull	r1, r2, r2, r3
 80022f8:	441a      	add	r2, r3
 80022fa:	13d2      	asrs	r2, r2, #15
 80022fc:	17db      	asrs	r3, r3, #31
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	825a      	strh	r2, [r3, #18]
			threshold = data * 4095 / UINT16_MAX;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	031b      	lsls	r3, r3, #12
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	4a1b      	ldr	r2, [pc, #108]	; (800237c <_ZN22PressureControlChannel11setVariableEhl+0x118>)
 8002310:	fb82 1203 	smull	r1, r2, r2, r3
 8002314:	441a      	add	r2, r3
 8002316:	13d2      	asrs	r2, r2, #15
 8002318:	17db      	asrs	r3, r3, #31
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	829a      	strh	r2, [r3, #20]
			return 0;
 8002322:	2300      	movs	r3, #0
 8002324:	e025      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_THRESHOLD: //cannot set threshold
			return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800232a:	e022      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_HYSTERESIS:
			hysteresis = data * 4095 / UINT16_MAX;
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	031b      	lsls	r3, r3, #12
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <_ZN22PressureControlChannel11setVariableEhl+0x118>)
 8002336:	fb82 1203 	smull	r1, r2, r2, r3
 800233a:	441a      	add	r2, r3
 800233c:	13d2      	asrs	r2, r2, #15
 800233e:	17db      	asrs	r3, r3, #31
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	82da      	strh	r2, [r3, #22]
			return 0;
 8002348:	2300      	movs	r3, #0
 800234a:	e012      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_ACTUATOR_CHANNEL_ID:
			return -1;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002350:	e00f      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_SENSOR_CHANNEL_ID:
			inputChannelId = data;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	771a      	strb	r2, [r3, #28]
			return 0;
 800235a:	2300      	movs	r3, #0
 800235c:	e009      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		case CONTROL_REFRESH_DIVIDER:
			refreshDivider = data;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
			return 0;
 800236a:	2300      	movs	r3, #0
 800236c:	e001      	b.n	8002372 <_ZN22PressureControlChannel11setVariableEhl+0x10e>
		default:
			return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	80008001 	.word	0x80008001

08002380 <_ZNK22PressureControlChannel11getVariableEhRl>:

int PressureControlChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	460b      	mov	r3, r1
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d865      	bhi.n	8002460 <_ZNK22PressureControlChannel11getVariableEhRl+0xe0>
 8002394:	a201      	add	r2, pc, #4	; (adr r2, 800239c <_ZNK22PressureControlChannel11getVariableEhRl+0x1c>)
 8002396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239a:	bf00      	nop
 800239c:	080023b9 	.word	0x080023b9
 80023a0:	080023c7 	.word	0x080023c7
 80023a4:	080023e9 	.word	0x080023e9
 80023a8:	0800240b 	.word	0x0800240b
 80023ac:	0800242d 	.word	0x0800242d
 80023b0:	08002445 	.word	0x08002445
 80023b4:	08002453 	.word	0x08002453
	{
		case CONTROL_ENABLED:
			data = enabled;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8a1b      	ldrh	r3, [r3, #16]
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
			return 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e04e      	b.n	8002464 <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_TARGET:
			data = targetPressure * UINT16_MAX / 4095; // convert back to 16bit full scale
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8a5b      	ldrh	r3, [r3, #18]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4613      	mov	r3, r2
 80023ce:	041b      	lsls	r3, r3, #16
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	4a26      	ldr	r2, [pc, #152]	; (800246c <_ZNK22PressureControlChannel11getVariableEhRl+0xec>)
 80023d4:	fb82 1203 	smull	r1, r2, r2, r3
 80023d8:	441a      	add	r2, r3
 80023da:	12d2      	asrs	r2, r2, #11
 80023dc:	17db      	asrs	r3, r3, #31
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	601a      	str	r2, [r3, #0]
			return 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e03d      	b.n	8002464 <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_THRESHOLD:
			data = threshold * UINT16_MAX / 4095;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8a9b      	ldrh	r3, [r3, #20]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4613      	mov	r3, r2
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <_ZNK22PressureControlChannel11getVariableEhRl+0xec>)
 80023f6:	fb82 1203 	smull	r1, r2, r2, r3
 80023fa:	441a      	add	r2, r3
 80023fc:	12d2      	asrs	r2, r2, #11
 80023fe:	17db      	asrs	r3, r3, #31
 8002400:	1ad2      	subs	r2, r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	601a      	str	r2, [r3, #0]
			return 0;
 8002406:	2300      	movs	r3, #0
 8002408:	e02c      	b.n	8002464 <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_HYSTERESIS:
			data = hysteresis * UINT16_MAX / 4095;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8adb      	ldrh	r3, [r3, #22]
 800240e:	461a      	mov	r2, r3
 8002410:	4613      	mov	r3, r2
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <_ZNK22PressureControlChannel11getVariableEhRl+0xec>)
 8002418:	fb82 1203 	smull	r1, r2, r2, r3
 800241c:	441a      	add	r2, r3
 800241e:	12d2      	asrs	r2, r2, #11
 8002420:	17db      	asrs	r3, r3, #31
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
			return 0;
 8002428:	2300      	movs	r3, #0
 800242a:	e01b      	b.n	8002464 <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_ACTUATOR_CHANNEL_ID:
			data = solenoidChannel.getChannelId();
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe ff01 	bl	8001238 <_ZNK15AbstractChannel12getChannelIdEv>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
			return -1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002442:	e00f      	b.n	8002464 <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_SENSOR_CHANNEL_ID:
			data = (int32_t) inputChannelId;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	7f1b      	ldrb	r3, [r3, #28]
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
			return 0;
 800244e:	2300      	movs	r3, #0
 8002450:	e008      	b.n	8002464 <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		case CONTROL_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	601a      	str	r2, [r3, #0]
			return 0;
 800245c:	2300      	movs	r3, #0
 800245e:	e001      	b.n	8002464 <_ZNK22PressureControlChannel11getVariableEhRl+0xe4>
		default:
			return -1;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	80080081 	.word	0x80080081

08002470 <_ZN14AbstractModuleC1Ev>:
#ifndef ABSTRACTMODULE_H
#define ABSTRACTMODULE_H

class AbstractModule
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <_ZN14AbstractModuleC1Ev+0x1c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	0800920c 	.word	0x0800920c

08002490 <_ZN12W25Qxx_FlashC1Ev>:
#include <STRHAL.h>
#include <channels/generic_channel_def.h>

#include <cstring>

W25Qxx_Flash::W25Qxx_Flash() :
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
		state(FlashState::IDLE), pageCount(0), sectorCount(0), can(Can::instance())
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ffe8 	bl	8002470 <_ZN14AbstractModuleC1Ev>
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <_ZN12W25Qxx_FlashC1Ev+0x7c>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	711a      	strb	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fd feb8 	bl	8000268 <_ZN3Can8instanceEm>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
{
}
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	08009220 	.word	0x08009220

08002510 <_ZN12W25Qxx_Flash8instanceEv>:

W25Qxx_Flash& W25Qxx_Flash::instance()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	static W25Qxx_Flash instance;
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f3bf 8f5b 	dmb	ish
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d010      	beq.n	8002552 <_ZN12W25Qxx_Flash8instanceEv+0x42>
 8002530:	4809      	ldr	r0, [pc, #36]	; (8002558 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8002532:	f006 fc0f 	bl	8008d54 <__cxa_guard_acquire>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <_ZN12W25Qxx_Flash8instanceEv+0x42>
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
 8002548:	f7ff ffa2 	bl	8002490 <_ZN12W25Qxx_FlashC1Ev>
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 800254e:	f006 fc0d 	bl	8008d6c <__cxa_guard_release>

	return instance;
 8002552:	4b02      	ldr	r3, [pc, #8]	; (800255c <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000a58 	.word	0x20000a58
 800255c:	20000820 	.word	0x20000820

08002560 <_ZN12W25Qxx_Flash4initEv>:

int W25Qxx_Flash::init()
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	memset(loggingBuffer, 0, 256);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800256e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f006 fc59 	bl	8008e2c <memset>

	STRHAL_QSPI_Config_t qspi_conf;
	qspi_conf.clk_level = 0x0;
 800257a:	7bbb      	ldrb	r3, [r7, #14]
 800257c:	f36f 0300 	bfc	r3, #0, #1
 8002580:	73bb      	strb	r3, [r7, #14]
	qspi_conf.flash_size = SIZE_2N;
 8002582:	7b7b      	ldrb	r3, [r7, #13]
 8002584:	f043 031f 	orr.w	r3, r3, #31
 8002588:	737b      	strb	r3, [r7, #13]
	qspi_conf.ncs_high_time = 0x7;
 800258a:	7b7b      	ldrb	r3, [r7, #13]
 800258c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002590:	737b      	strb	r3, [r7, #13]
	qspi_conf.psc = 19;
 8002592:	7b3b      	ldrb	r3, [r7, #12]
 8002594:	2213      	movs	r2, #19
 8002596:	f362 0304 	bfi	r3, r2, #0, #5
 800259a:	733b      	strb	r3, [r7, #12]

	if (STRHAL_QSPI_Flash_Init(&qspi_conf) < 0)
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 fd47 	bl	8007034 <STRHAL_QSPI_Flash_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	0fdb      	lsrs	r3, r3, #31
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <_ZN12W25Qxx_Flash4initEv+0x56>
		return -1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b4:	e029      	b.n	800260a <_ZN12W25Qxx_Flash4initEv+0xaa>

	STRHAL_QSPI_Run();
 80025b6:	f004 fdaf 	bl	8007118 <STRHAL_QSPI_Run>

	if (!enter4ByteAddrMode())
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fad8 	bl	8002b70 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <_ZN12W25Qxx_Flash4initEv+0x72>
	{
		return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d0:	e01b      	b.n	800260a <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!writeEnable())
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa5f 	bl	8002a96 <_ZN12W25Qxx_Flash11writeEnableEv>
 80025d8:	4603      	mov	r3, r0
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <_ZN12W25Qxx_Flash4initEv+0x8a>
	{
		return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e8:	e00f      	b.n	800260a <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!disableWPS())
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa7f 	bl	8002aee <_ZN12W25Qxx_Flash10disableWPSEv>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <_ZN12W25Qxx_Flash4initEv+0xa2>
	{
		return -1;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002600:	e003      	b.n	800260a <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	LL_mDelay(10);
 8002602:	200a      	movs	r0, #10
 8002604:	f002 fa1a 	bl	8004a3c <LL_mDelay>

	return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_ZN12W25Qxx_Flash4execEv>:

int W25Qxx_Flash::exec()
{
 8002612:	b5b0      	push	{r4, r5, r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 800261a:	f005 f837 	bl	800768c <STRHAL_Systick_GetTick>
 800261e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002628:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800262c:	1a84      	subs	r4, r0, r2
 800262e:	eb61 0503 	sbc.w	r5, r1, r3
 8002632:	2c0a      	cmp	r4, #10
 8002634:	f175 0300 	sbcs.w	r3, r5, #0
 8002638:	d201      	bcs.n	800263e <_ZN12W25Qxx_Flash4execEv+0x2c>
		return 0;
 800263a:	2300      	movs	r3, #0
 800263c:	e039      	b.n	80026b2 <_ZN12W25Qxx_Flash4execEv+0xa0>

	timeLastSample = time;
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002644:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

	// Current State Logic - executes state logic, also returns new state if transition conditions are met
	internalNextState = currentStateLogic(time);
 8002648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f849 	bl	80026e4 <_ZN12W25Qxx_Flash17currentStateLogicEy>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	FlashState nextState = state;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	617b      	str	r3, [r7, #20]

	if (externalNextState != state)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d004      	beq.n	8002678 <_ZN12W25Qxx_Flash4execEv+0x66>
	{ // Prioritize external event - there has to be some kind of priority, because internal could be different to external -> external means CAN -> either Sequence or Abort
		nextState = externalNextState;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e010      	b.n	800269a <_ZN12W25Qxx_Flash4execEv+0x88>
	}
	else if (internalNextState != state)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d009      	beq.n	800269a <_ZN12W25Qxx_Flash4execEv+0x88>
	{
		externalNextState = internalNextState; // Incase an internal state change happens, the external state, which is from some previous change would block it, so it is updated here
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		nextState = internalNextState;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002698:	617b      	str	r3, [r7, #20]
	}

	// Next State Logic
	if (nextState != state)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d005      	beq.n	80026b0 <_ZN12W25Qxx_Flash4execEv+0x9e>
	{
		nextStateLogic(nextState, time);
 80026a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a8:	6979      	ldr	r1, [r7, #20]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f86c 	bl	8002788 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>
	}

	return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}

080026ba <_ZN12W25Qxx_Flash5resetEv>:

int W25Qxx_Flash::reset()
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
	state = FlashState::IDLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
	pageCount = 0;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
	sectorCount = 0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <_ZN12W25Qxx_Flash17currentStateLogicEy>:

FlashState W25Qxx_Flash::currentStateLogic(uint64_t time)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	e9c7 2300 	strd	r2, r3, [r7]
	switch (state)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d839      	bhi.n	800276c <_ZN12W25Qxx_Flash17currentStateLogicEy+0x88>
 80026f8:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x1c>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	0800276d 	.word	0x0800276d
 8002704:	08002715 	.word	0x08002715
 8002708:	0800276d 	.word	0x0800276d
 800270c:	0800273b 	.word	0x0800273b
 8002710:	0800276d 	.word	0x0800276d
		case FlashState::IDLE:
			break;
		case FlashState::CLEARING:
		{
			uint8_t sreg1;
			if (!readSREG1(sreg1))
 8002714:	f107 0317 	add.w	r3, r7, #23
 8002718:	4619      	mov	r1, r3
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f996 	bl	8002a4c <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8002720:	4603      	mov	r3, r0
 8002722:	f083 0301 	eor.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d121      	bne.n	8002770 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x8c>
				break;
			if (!(sreg1 & 0x01))
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11e      	bne.n	8002774 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x90>
				return FlashState::READY;
 8002736:	2302      	movs	r3, #2
 8002738:	e021      	b.n	800277e <_ZN12W25Qxx_Flash17currentStateLogicEy+0x9a>
			break;
		}
		case FlashState::READY:
			break;
		case FlashState::LOGGING:
			if (loggingIndex + 64 >= 256)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002740:	2bbf      	cmp	r3, #191	; 0xbf
 8002742:	d919      	bls.n	8002778 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
			{
				lock = true;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	711a      	strb	r2, [r3, #4]
				writeNextPage(loggingBuffer, 256);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002754:	4619      	mov	r1, r3
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa30 	bl	8002bbc <_ZN12W25Qxx_Flash13writeNextPageEPKhm>
				loggingIndex = 0;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
				lock = false;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	711a      	strb	r2, [r3, #4]
			}
			break;
 800276a:	e005      	b.n	8002778 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
		case FlashState::FULL:
			break;
		default:
			break;
 800276c:	bf00      	nop
 800276e:	e004      	b.n	800277a <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
				break;
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 8002778:	bf00      	nop
	}
	return state;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop

08002788 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>:

void W25Qxx_Flash::nextStateLogic(FlashState nextState, uint64_t time)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	e9c7 2300 	strd	r2, r3, [r7]
	timeLastTransition = time;
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800279c:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
	switch (nextState)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d86f      	bhi.n	8002886 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0xfe>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x24>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027c1 	.word	0x080027c1
 80027b0:	080027d7 	.word	0x080027d7
 80027b4:	08002823 	.word	0x08002823
 80027b8:	0800285d 	.word	0x0800285d
 80027bc:	08002873 	.word	0x08002873
	{
		case FlashState::IDLE:
			if (state != FlashState::LOGGING)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d167      	bne.n	8002898 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x110>
			{
				return;
			}
			pageCount = 0;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
			sectorCount = 0;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
			break;
 80027d4:	e05c      	b.n	8002890 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::CLEARING:
			if (state != FlashState::IDLE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d15e      	bne.n	800289c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x114>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "CLEARING!\n", 10, 100);
 80027de:	2364      	movs	r3, #100	; 0x64
 80027e0:	220a      	movs	r2, #10
 80027e2:	4936      	ldr	r1, [pc, #216]	; (80028bc <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x134>)
 80027e4:	2002      	movs	r0, #2
 80027e6:	f006 f90f 	bl	8008a08 <STRHAL_UART_Write_Blocking>
			if (!sendClearInitiated())
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f887 	bl	80028fe <_ZN12W25Qxx_Flash18sendClearInitiatedEv>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d151      	bne.n	80028a0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x118>
				return;
			if (!readConfig())
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fac5 	bl	8002d8c <_ZN12W25Qxx_Flash10readConfigEv>
 8002802:	4603      	mov	r3, r0
 8002804:	f083 0301 	eor.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d14a      	bne.n	80028a4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x11c>
				return;

			if (!chipErase())
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fb50 	bl	8002eb4 <_ZN12W25Qxx_Flash9chipEraseEv>
 8002814:	4603      	mov	r3, r0
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d034      	beq.n	800288a <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x102>
				return;
 8002820:	e049      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
			break;
		case FlashState::READY:
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "READY!\n", 7, 100);
 8002822:	2364      	movs	r3, #100	; 0x64
 8002824:	2207      	movs	r2, #7
 8002826:	4926      	ldr	r1, [pc, #152]	; (80028c0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x138>)
 8002828:	2002      	movs	r0, #2
 800282a:	f006 f8ed 	bl	8008a08 <STRHAL_UART_Write_Blocking>
			if (state != FlashState::CLEARING)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d138      	bne.n	80028a8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x120>
			{
				return;
			}
			if (!writeTempConfig())
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fa90 	bl	8002d5c <_ZN12W25Qxx_Flash15writeTempConfigEv>
 800283c:	4603      	mov	r3, r0
 800283e:	f083 0301 	eor.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d131      	bne.n	80028ac <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x124>
				return;
			if (!sendClearDone())
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f880 	bl	800294e <_ZN12W25Qxx_Flash13sendClearDoneEv>
 800284e:	4603      	mov	r3, r0
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x106>
				return;
 800285a:	e02c      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>

			break;
		case FlashState::LOGGING:
			if (state != FlashState::READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d125      	bne.n	80028b0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x128>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "LOGGING!\n", 9, 100);
 8002864:	2364      	movs	r3, #100	; 0x64
 8002866:	2209      	movs	r2, #9
 8002868:	4916      	ldr	r1, [pc, #88]	; (80028c4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x13c>)
 800286a:	2002      	movs	r0, #2
 800286c:	f006 f8cc 	bl	8008a08 <STRHAL_UART_Write_Blocking>
			break;
 8002870:	e00e      	b.n	8002890 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::FULL:
			if (!sendFull())
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f893 	bl	800299e <_ZN12W25Qxx_Flash8sendFullEv>
 8002878:	4603      	mov	r3, r0
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d117      	bne.n	80028b4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12c>
				return;
			break;
 8002884:	e004      	b.n	8002890 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		default:
			break;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 800288e:	bf00      	nop
	}
	state = nextState;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
	return;
 8002896:	e00e      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8002898:	bf00      	nop
 800289a:	e00c      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 800289c:	bf00      	nop
 800289e:	e00a      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80028a0:	bf00      	nop
 80028a2:	e008      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80028a4:	bf00      	nop
 80028a6:	e006      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80028a8:	bf00      	nop
 80028aa:	e004      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80028ac:	bf00      	nop
 80028ae:	e002      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80028b4:	bf00      	nop
}
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	080090a4 	.word	0x080090a4
 80028c0:	080090b0 	.word	0x080090b0
 80028c4:	080090b8 	.word	0x080090b8

080028c8 <_ZN12W25Qxx_Flash8setStateE10FlashState>:

void W25Qxx_Flash::setState(FlashState nextState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	externalNextState = nextState;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <_ZN12W25Qxx_Flash8getStateEv>:

FlashState W25Qxx_Flash::getState()
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	return state;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_ZN12W25Qxx_Flash18sendClearInitiatedEv>:

bool W25Qxx_Flash::sendClearInitiated()
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b094      	sub	sp, #80	; 0x50
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	2242      	movs	r2, #66	; 0x42
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f006 fa8c 	bl	8008e2c <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 8002914:	2313      	movs	r3, #19
 8002916:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8002918:	7b3b      	ldrb	r3, [r7, #12]
 800291a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800291e:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8002920:	7b3b      	ldrb	r3, [r7, #12]
 8002922:	f36f 1387 	bfc	r3, #6, #2
 8002926:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = INITIATED;
 8002928:	2300      	movs	r3, #0
 800292a:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2205      	movs	r2, #5
 8002932:	4619      	mov	r1, r3
 8002934:	2000      	movs	r0, #0
 8002936:	f7fd fe8d 	bl	8000654 <_ZN3Can4sendEmPhh>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
}
 8002946:	4618      	mov	r0, r3
 8002948:	3750      	adds	r7, #80	; 0x50
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_ZN12W25Qxx_Flash13sendClearDoneEv>:

bool W25Qxx_Flash::sendClearDone()
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b094      	sub	sp, #80	; 0x50
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	2242      	movs	r2, #66	; 0x42
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f006 fa64 	bl	8008e2c <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 8002964:	2313      	movs	r3, #19
 8002966:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8002968:	7b3b      	ldrb	r3, [r7, #12]
 800296a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800296e:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8002970:	7b3b      	ldrb	r3, [r7, #12]
 8002972:	f36f 1387 	bfc	r3, #6, #2
 8002976:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = COMPLETED;
 8002978:	2301      	movs	r3, #1
 800297a:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	2205      	movs	r2, #5
 8002982:	4619      	mov	r1, r3
 8002984:	2000      	movs	r0, #0
 8002986:	f7fd fe65 	bl	8000654 <_ZN3Can4sendEmPhh>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
}
 8002996:	4618      	mov	r0, r3
 8002998:	3750      	adds	r7, #80	; 0x50
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_ZN12W25Qxx_Flash8sendFullEv>:

bool W25Qxx_Flash::sendFull()
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b094      	sub	sp, #80	; 0x50
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	2242      	movs	r2, #66	; 0x42
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f006 fa3c 	bl	8008e2c <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 80029b4:	2313      	movs	r3, #19
 80029b6:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 80029b8:	7b3b      	ldrb	r3, [r7, #12]
 80029ba:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80029be:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 80029c0:	7b3b      	ldrb	r3, [r7, #12]
 80029c2:	f36f 1387 	bfc	r3, #6, #2
 80029c6:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = FULL;
 80029c8:	2302      	movs	r3, #2
 80029ca:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2205      	movs	r2, #5
 80029d2:	4619      	mov	r1, r3
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fd fe3d 	bl	8000654 <_ZN3Can4sendEmPhh>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3750      	adds	r7, #80	; 0x50
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_ZN12W25Qxx_Flash6addLogEPhh>:

void W25Qxx_Flash::addLog(uint8_t *data, uint8_t n)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
	if (state != FlashState::LOGGING)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d11d      	bne.n	8002a40 <_ZN12W25Qxx_Flash6addLogEPhh+0x52>
		return;
	if (loggingIndex + n >= 256)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	4413      	add	r3, r2
 8002a10:	2bff      	cmp	r3, #255	; 0xff
 8002a12:	dc17      	bgt.n	8002a44 <_ZN12W25Qxx_Flash6addLogEPhh+0x56>
		return;
	memcpy(&loggingBuffer[loggingIndex], data, n);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002a1a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	79fa      	ldrb	r2, [r7, #7]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f006 f9f2 	bl	8008e10 <memcpy>
	loggingIndex += n;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 2230 	ldrb.w	r2, [r3, #560]	; 0x230
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	4413      	add	r3, r2
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8002a3e:	e002      	b.n	8002a46 <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8002a40:	bf00      	nop
 8002a42:	e000      	b.n	8002a46 <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8002a44:	bf00      	nop
}
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZNK12W25Qxx_Flash9readSREG1ERh>:

bool W25Qxx_Flash::readSREG1(uint8_t &sreg1) const
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction_size = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	773b      	strb	r3, [r7, #28]

	cmd.instruction = 0x05;
 8002a66:	2305      	movs	r3, #5
 8002a68:	733b      	strb	r3, [r7, #12]
	if (STRHAL_QSPI_Indirect_Read(&cmd, &sreg1, 1, 100) != 1)
 8002a6a:	f107 000c 	add.w	r0, r7, #12
 8002a6e:	2364      	movs	r3, #100	; 0x64
 8002a70:	2201      	movs	r2, #1
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	f004 fc1a 	bl	80072ac <STRHAL_QSPI_Indirect_Read>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <_ZNK12W25Qxx_Flash9readSREG1ERh+0x40>
		return false;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <_ZNK12W25Qxx_Flash9readSREG1ERh+0x42>

	return true;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZN12W25Qxx_Flash11writeEnableEv>:
{
	return readSREG1(sreg1) && readSREG2(sreg2) && readSREG3(sreg3);
}

bool W25Qxx_Flash::writeEnable()
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b088      	sub	sp, #32
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x06;
 8002a9e:	2306      	movs	r3, #6
 8002aa0:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa39 	bl	8002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	0fdb      	lsrs	r3, r3, #31
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <_ZN12W25Qxx_Flash11writeEnableEv+0x36>
		return false;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e00c      	b.n	8002ae6 <_ZN12W25Qxx_Flash11writeEnableEv+0x50>

	return STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) == 0;
 8002acc:	f107 000c 	add.w	r0, r7, #12
 8002ad0:	2364      	movs	r3, #100	; 0x64
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	f004 fb2f 	bl	8007138 <STRHAL_QSPI_Indirect_Write>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_ZN12W25Qxx_Flash10disableWPSEv>:

	return true;
}

bool W25Qxx_Flash::disableWPS()
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b088      	sub	sp, #32
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x11;
 8002af6:	2311      	movs	r3, #17
 8002af8:	733b      	strb	r3, [r7, #12]
	//cmd.instruction = 0x98;
	cmd.instruction_size = 1;
 8002afa:	2301      	movs	r3, #1
 8002afc:	737b      	strb	r3, [r7, #13]
	cmd.addr = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
	cmd.addr_size = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	773b      	strb	r3, [r7, #28]

	uint8_t value = 0xFB;
 8002b0e:	23fb      	movs	r3, #251	; 0xfb
 8002b10:	72fb      	strb	r3, [r7, #11]

	if (waitForSREGFlag(0x01, false, 10) < 0)
 8002b12:	230a      	movs	r3, #10
 8002b14:	2200      	movs	r2, #0
 8002b16:	2101      	movs	r1, #1
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa09 	bl	8002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	0fdb      	lsrs	r3, r3, #31
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <_ZN12W25Qxx_Flash10disableWPSEv+0x3e>
		return false;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e01d      	b.n	8002b68 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (!writeEnable())
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ffb2 	bl	8002a96 <_ZN12W25Qxx_Flash11writeEnableEv>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f083 0301 	eor.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <_ZN12W25Qxx_Flash10disableWPSEv+0x54>
		return false;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e012      	b.n	8002b68 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (STRHAL_QSPI_Indirect_Write(&cmd, &value, 1, 100) != 1)
 8002b42:	f107 010b 	add.w	r1, r7, #11
 8002b46:	f107 000c 	add.w	r0, r7, #12
 8002b4a:	2364      	movs	r3, #100	; 0x64
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f004 faf3 	bl	8007138 <STRHAL_QSPI_Indirect_Write>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <_ZN12W25Qxx_Flash10disableWPSEv+0x78>
		return false;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	return true;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>:

bool W25Qxx_Flash::enter4ByteAddrMode()
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xB7;
 8002b78:	23b7      	movs	r3, #183	; 0xb7
 8002b7a:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0x000000;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	773b      	strb	r3, [r7, #28]

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8002b90:	f107 000c 	add.w	r0, r7, #12
 8002b94:	2364      	movs	r3, #100	; 0x64
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f004 facd 	bl	8007138 <STRHAL_QSPI_Indirect_Write>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x42>
		return false;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x44>

	return true;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_ZN12W25Qxx_Flash13writeNextPageEPKhm>:

	return true;
}

uint32_t W25Qxx_Flash::writeNextPage(const uint8_t *data, uint32_t n)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
	if (sectorCount == 8192 - 1)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x1c>
	{
		return 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e020      	b.n	8002c1a <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5e>
	 return 0;
	 if(!sectorErase(sectorCount))
	 return 0;
	 }*/

	uint32_t numWritten = write((pageCount << 8) | (sectorCount << 12), data, n);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	031b      	lsls	r3, r3, #12
 8002be4:	ea42 0103 	orr.w	r1, r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f818 	bl	8002c22 <_ZN12W25Qxx_Flash5writeEmPKhm>
 8002bf2:	6178      	str	r0, [r7, #20]
	(void) numWritten;
	/*if(numWritten == n)
	 return 0;*/

	if (pageCount == 15)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d108      	bne.n	8002c0e <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x52>
	{
		pageCount = 0;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
		sectorCount++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	e004      	b.n	8002c18 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5c>
	}
	else
	{
		pageCount++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	60da      	str	r2, [r3, #12]
	}

	return n;
 8002c18:	687b      	ldr	r3, [r7, #4]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_ZN12W25Qxx_Flash5writeEmPKhm>:

uint32_t W25Qxx_Flash::write(uint32_t address, const uint8_t *data, uint32_t n)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b08a      	sub	sp, #40	; 0x28
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x12;
 8002c30:	2312      	movs	r3, #18
 8002c32:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002c4a:	2364      	movs	r3, #100	; 0x64
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f96d 	bl	8002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	0fdb      	lsrs	r3, r3, #31
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <_ZN12W25Qxx_Flash5writeEmPKhm+0x42>
		return 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e024      	b.n	8002cae <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (!writeEnable())
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff ff16 	bl	8002a96 <_ZN12W25Qxx_Flash11writeEnableEv>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <_ZN12W25Qxx_Flash5writeEmPKhm+0x58>
		return 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e019      	b.n	8002cae <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (n > PAGE_SIZE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c80:	d902      	bls.n	8002c88 <_ZN12W25Qxx_Flash5writeEmPKhm+0x66>
		n = PAGE_SIZE;
 8002c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c86:	603b      	str	r3, [r7, #0]

	if (STRHAL_QSPI_Indirect_Write(&cmd, data, n, 100) != n)
 8002c88:	f107 0014 	add.w	r0, r7, #20
 8002c8c:	2364      	movs	r3, #100	; 0x64
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	f004 fa51 	bl	8007138 <STRHAL_QSPI_Indirect_Write>
 8002c96:	4602      	mov	r2, r0
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <_ZN12W25Qxx_Flash5writeEmPKhm+0x8a>
		return 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	return n;
 8002cac:	683b      	ldr	r3, [r7, #0]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <_ZN12W25Qxx_Flash4readEmPhm>:

uint32_t W25Qxx_Flash::read(uint32_t address, uint8_t *data, uint32_t n)
{
 8002cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cbc:	b08a      	sub	sp, #40	; 0x28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x13;
 8002cc8:	2313      	movs	r3, #19
 8002cca:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if ((uint64_t) address + n > (uint64_t) (1 << SIZE_2N))
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	469a      	mov	sl, r3
 8002ce8:	4693      	mov	fp, r2
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	4698      	mov	r8, r3
 8002cf0:	4691      	mov	r9, r2
 8002cf2:	eb1a 0408 	adds.w	r4, sl, r8
 8002cf6:	eb4b 0509 	adc.w	r5, fp, r9
 8002cfa:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <_ZN12W25Qxx_Flash4readEmPhm+0xa0>)
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 8002d02:	d302      	bcc.n	8002d0a <_ZN12W25Qxx_Flash4readEmPhm+0x52>
		n = 0xFFFFFFFF - address;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	603b      	str	r3, [r7, #0]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002d0a:	2364      	movs	r3, #100	; 0x64
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2101      	movs	r1, #1
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f90d 	bl	8002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002d16:	4603      	mov	r3, r0
 8002d18:	0fdb      	lsrs	r3, r3, #31
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <_ZN12W25Qxx_Flash4readEmPhm+0x6c>
		return 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e013      	b.n	8002d4c <_ZN12W25Qxx_Flash4readEmPhm+0x94>

	if (STRHAL_QSPI_Indirect_Read(&cmd, data, n, 1000) != n)
 8002d24:	f107 0014 	add.w	r0, r7, #20
 8002d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f004 fabc 	bl	80072ac <STRHAL_QSPI_Indirect_Read>
 8002d34:	4602      	mov	r2, r0
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <_ZN12W25Qxx_Flash4readEmPhm+0x92>
		return 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <_ZN12W25Qxx_Flash4readEmPhm+0x94>

	return n;
 8002d4a:	683b      	ldr	r3, [r7, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	80000001 	.word	0x80000001

08002d5c <_ZN12W25Qxx_Flash15writeTempConfigEv>:

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
}

bool W25Qxx_Flash::writeTempConfig()
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f103 0214 	add.w	r2, r3, #20
 8002d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6e:	2100      	movs	r1, #0
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff56 	bl	8002c22 <_ZN12W25Qxx_Flash5writeEmPKhm>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZN12W25Qxx_Flash10readConfigEv>:

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
}

bool W25Qxx_Flash::readConfig()
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	return read(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f103 0214 	add.w	r2, r3, #20
 8002d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d9e:	2100      	movs	r1, #0
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff89 	bl	8002cb8 <_ZN12W25Qxx_Flash4readEmPhm>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_ZN12W25Qxx_Flash11configResetEv>:
	return sectorErase(CONFIG_BASE >> 12);
}

// Resets config, i.e. sets all config registers to 0x0000
bool W25Qxx_Flash::configReset()
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b3f      	cmp	r3, #63	; 0x3f
 8002dcc:	dc0a      	bgt.n	8002de4 <_ZN12W25Qxx_Flash11configResetEv+0x28>
	{
		config.reg[i] = 0;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	2200      	movs	r2, #0
 8002dda:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e7f1      	b.n	8002dc8 <_ZN12W25Qxx_Flash11configResetEv+0xc>
	}
	return sectorErase(CONFIG_BASE >> 12) && write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8002de4:	2100      	movs	r1, #0
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f817 	bl	8002e1a <_ZN12W25Qxx_Flash11sectorEraseEm>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f103 0214 	add.w	r2, r3, #20
 8002df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ff0f 	bl	8002c22 <_ZN12W25Qxx_Flash5writeEmPKhm>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0a:	d101      	bne.n	8002e10 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <_ZN12W25Qxx_Flash11configResetEv+0x56>
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_ZN12W25Qxx_Flash11sectorEraseEm>:

bool W25Qxx_Flash::sectorErase(uint32_t sector)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b088      	sub	sp, #32
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x21;
 8002e24:	2321      	movs	r3, #33	; 0x21
 8002e26:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 4;
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	753b      	strb	r3, [r7, #20]
	cmd.addr = sector << 12;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	031b      	lsls	r3, r3, #12
 8002e34:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002e3e:	2364      	movs	r3, #100	; 0x64
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f873 	bl	8002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	0fdb      	lsrs	r3, r3, #31
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <_ZN12W25Qxx_Flash11sectorEraseEm+0x3e>
		return false;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e029      	b.n	8002eac <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (!writeEnable())
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fe1c 	bl	8002a96 <_ZN12W25Qxx_Flash11writeEnableEv>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <_ZN12W25Qxx_Flash11sectorEraseEm+0x54>
		return false;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e01e      	b.n	8002eac <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8002e6e:	f107 000c 	add.w	r0, r7, #12
 8002e72:	2364      	movs	r3, #100	; 0x64
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	f004 f95e 	bl	8007138 <STRHAL_QSPI_Indirect_Write>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <_ZN12W25Qxx_Flash11sectorEraseEm+0x76>
		return false;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e00d      	b.n	8002eac <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002e90:	2364      	movs	r3, #100	; 0x64
 8002e92:	2200      	movs	r2, #0
 8002e94:	2101      	movs	r1, #1
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f84a 	bl	8002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	0fdb      	lsrs	r3, r3, #31
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <_ZN12W25Qxx_Flash11sectorEraseEm+0x90>
		return false;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	return true;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_ZN12W25Qxx_Flash9chipEraseEv>:

bool W25Qxx_Flash::chipErase()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xC7;
 8002ebc:	23c7      	movs	r3, #199	; 0xc7
 8002ebe:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002ed4:	2364      	movs	r3, #100	; 0x64
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2101      	movs	r1, #1
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f828 	bl	8002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	0fdb      	lsrs	r3, r3, #31
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <_ZN12W25Qxx_Flash9chipEraseEv+0x3a>
		return false;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e01c      	b.n	8002f28 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (!writeEnable())
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fdd1 	bl	8002a96 <_ZN12W25Qxx_Flash11writeEnableEv>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f083 0301 	eor.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <_ZN12W25Qxx_Flash9chipEraseEv+0x50>
		return false;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e011      	b.n	8002f28 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8002f04:	f107 000c 	add.w	r0, r7, #12
 8002f08:	2364      	movs	r3, #100	; 0x64
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f004 f913 	bl	8007138 <STRHAL_QSPI_Indirect_Write>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <_ZN12W25Qxx_Flash9chipEraseEv+0x72>
		return false;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	//if(waitForSREGFlag(0x01, false, 100) < 0)
	//return false;

	return true;
 8002f26:	2301      	movs	r3, #1
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>:

int W25Qxx_Flash::waitForSREGFlag(uint8_t flag, bool state, uint16_t tot)
{
 8002f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	4608      	mov	r0, r1
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	70fb      	strb	r3, [r7, #3]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70bb      	strb	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	803b      	strh	r3, [r7, #0]
	uint64_t start = STRHAL_Systick_GetTick();
 8002f4c:	f004 fb9e 	bl	800768c <STRHAL_Systick_GetTick>
 8002f50:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint8_t sreg1;

	if (state)
 8002f54:	78bb      	ldrb	r3, [r7, #2]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02a      	beq.n	8002fb0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x80>
	{
		do
		{
			if (!readSREG1(sreg1))
 8002f5a:	f107 030f 	add.w	r3, r7, #15
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff fd73 	bl	8002a4c <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x48>
				return -1;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f76:	e045      	b.n	8003004 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>

			if (STRHAL_Systick_GetTick() - start > 100)
 8002f78:	f004 fb88 	bl	800768c <STRHAL_Systick_GetTick>
 8002f7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f80:	ebb0 0802 	subs.w	r8, r0, r2
 8002f84:	eb61 0903 	sbc.w	r9, r1, r3
 8002f88:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002f8c:	f179 0300 	sbcs.w	r3, r9, #0
 8002f90:	bf2c      	ite	cs
 8002f92:	2301      	movcs	r3, #1
 8002f94:	2300      	movcc	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x72>
				return -1;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fa0:	e030      	b.n	8003004 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		} while (!(sreg1 & flag));
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d129      	bne.n	8003002 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd2>
		do
 8002fae:	e7d4      	b.n	8002f5a <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x2a>
	}
	else
	{
		do
		{
			if (!readSREG1(sreg1))
 8002fb0:	f107 030f 	add.w	r3, r7, #15
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fd48 	bl	8002a4c <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f083 0301 	eor.w	r3, r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x9e>
				return -1;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fcc:	e01a      	b.n	8003004 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>

			if (STRHAL_Systick_GetTick() - start > 100)
 8002fce:	f004 fb5d 	bl	800768c <STRHAL_Systick_GetTick>
 8002fd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fd6:	1a84      	subs	r4, r0, r2
 8002fd8:	eb61 0503 	sbc.w	r5, r1, r3
 8002fdc:	2c65      	cmp	r4, #101	; 0x65
 8002fde:	f175 0300 	sbcs.w	r3, r5, #0
 8002fe2:	bf2c      	ite	cs
 8002fe4:	2301      	movcs	r3, #1
 8002fe6:	2300      	movcc	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xc4>
				return -1;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ff2:	e007      	b.n	8003004 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		} while (sreg1 & flag);
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d000      	beq.n	8003002 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd2>
		do
 8003000:	e7d6      	b.n	8002fb0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x80>
	}

	return 0;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003012:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <LoopForever+0x6>)
  ldr r1, =_edata
 8003016:	490e      	ldr	r1, [pc, #56]	; (8003050 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <LoopForever+0xe>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <LoopForever+0x12>)
  ldr r4, =_ebss
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <LoopForever+0x16>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800303a:	f7fe f8ab 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800303e:	f005 febb 	bl	8008db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003042:	f7fe f809 	bl	8001058 <main>

08003046 <LoopForever>:

LoopForever:
    b LoopForever
 8003046:	e7fe      	b.n	8003046 <LoopForever>
  ldr   r0, =_estack
 8003048:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	20000784 	.word	0x20000784
  ldr r2, =_sidata
 8003054:	0800a2a0 	.word	0x0800a2a0
  ldr r2, =_sbss
 8003058:	20000788 	.word	0x20000788
  ldr r4, =_ebss
 800305c:	20000b6c 	.word	0x20000b6c

08003060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC1_2_IRQHandler>

08003062 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <LL_ADC_CommonInit+0xb0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10f      	bne.n	80030e6 <LL_ADC_CommonInit+0x36>
 80030c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030ca:	f7ff ffdd 	bl	8003088 <LL_ADC_IsEnabled>
 80030ce:	4604      	mov	r4, r0
 80030d0:	4824      	ldr	r0, [pc, #144]	; (8003164 <LL_ADC_CommonInit+0xb4>)
 80030d2:	f7ff ffd9 	bl	8003088 <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4323      	orrs	r3, r4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e012      	b.n	800310c <LL_ADC_CommonInit+0x5c>
 80030e6:	4820      	ldr	r0, [pc, #128]	; (8003168 <LL_ADC_CommonInit+0xb8>)
 80030e8:	f7ff ffce 	bl	8003088 <LL_ADC_IsEnabled>
 80030ec:	4604      	mov	r4, r0
 80030ee:	481f      	ldr	r0, [pc, #124]	; (800316c <LL_ADC_CommonInit+0xbc>)
 80030f0:	f7ff ffca 	bl	8003088 <LL_ADC_IsEnabled>
 80030f4:	4603      	mov	r3, r0
 80030f6:	431c      	orrs	r4, r3
 80030f8:	481d      	ldr	r0, [pc, #116]	; (8003170 <LL_ADC_CommonInit+0xc0>)
 80030fa:	f7ff ffc5 	bl	8003088 <LL_ADC_IsEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	4323      	orrs	r3, r4
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <LL_ADC_CommonInit+0xc4>)
 800311e:	4013      	ands	r3, r2
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	6811      	ldr	r1, [r2, #0]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	6852      	ldr	r2, [r2, #4]
 8003128:	4311      	orrs	r1, r2
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	6892      	ldr	r2, [r2, #8]
 800312e:	4311      	orrs	r1, r2
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	68d2      	ldr	r2, [r2, #12]
 8003134:	430a      	orrs	r2, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	e00b      	b.n	8003156 <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <LL_ADC_CommonInit+0xc4>)
 8003144:	4013      	ands	r3, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	e001      	b.n	8003156 <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bd90      	pop	{r4, r7, pc}
 8003160:	50000300 	.word	0x50000300
 8003164:	50000100 	.word	0x50000100
 8003168:	50000400 	.word	0x50000400
 800316c:	50000500 	.word	0x50000500
 8003170:	50000600 	.word	0x50000600
 8003174:	ffc030e0 	.word	0xffc030e0

08003178 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ff7e 	bl	8003088 <LL_ADC_IsEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d111      	bne.n	80031b6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800319a:	f023 0318 	bic.w	r3, r3, #24
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	6811      	ldr	r1, [r2, #0]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	6852      	ldr	r2, [r2, #4]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	6892      	ldr	r2, [r2, #8]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
 80031b4:	e001      	b.n	80031ba <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff58 	bl	8003088 <LL_ADC_IsEnabled>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d132      	bne.n	8003244 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <LL_ADC_REG_Init+0x90>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	6811      	ldr	r1, [r2, #0]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	6892      	ldr	r2, [r2, #8]
 80031f6:	4311      	orrs	r1, r2
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	68d2      	ldr	r2, [r2, #12]
 80031fc:	4311      	orrs	r1, r2
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	6912      	ldr	r2, [r2, #16]
 8003202:	4311      	orrs	r1, r2
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	6952      	ldr	r2, [r2, #20]
 8003208:	430a      	orrs	r2, r1
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	e011      	b.n	8003236 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <LL_ADC_REG_Init+0x90>)
 8003218:	4013      	ands	r3, r2
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6811      	ldr	r1, [r2, #0]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	4311      	orrs	r1, r2
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	6912      	ldr	r2, [r2, #16]
 8003228:	4311      	orrs	r1, r2
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	6952      	ldr	r2, [r2, #20]
 800322e:	430a      	orrs	r2, r1
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff10 	bl	8003062 <LL_ADC_REG_SetSequencerLength>
 8003242:	e001      	b.n	8003248 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	fff0c01c 	.word	0xfff0c01c

08003258 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <LL_DMA_ConfigTransfer+0x4c>)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4413      	add	r3, r2
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003280:	4908      	ldr	r1, [pc, #32]	; (80032a4 <LL_DMA_ConfigTransfer+0x4c>)
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	440a      	add	r2, r1
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	4611      	mov	r1, r2
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	440a      	add	r2, r1
 800328e:	4611      	mov	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	0800922c 	.word	0x0800922c

080032a8 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <LL_DMA_SetDataLength+0x48>)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4413      	add	r3, r2
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	4908      	ldr	r1, [pc, #32]	; (80032f0 <LL_DMA_SetDataLength+0x48>)
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	440a      	add	r2, r1
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	4611      	mov	r1, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	440a      	add	r2, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	0800922c 	.word	0x0800922c

080032f4 <LL_DMA_SetMemoryAddress>:
  *         (*) Not on all G4 devices
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003304:	4a07      	ldr	r2, [pc, #28]	; (8003324 <LL_DMA_SetMemoryAddress+0x30>)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4413      	add	r3, r2
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4413      	add	r3, r2
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60d3      	str	r3, [r2, #12]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	0800922c 	.word	0x0800922c

08003328 <LL_DMA_SetPeriphAddress>:
  *         (*) Not on all G4 devices
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003338:	4a07      	ldr	r2, [pc, #28]	; (8003358 <LL_DMA_SetPeriphAddress+0x30>)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	4413      	add	r3, r2
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6093      	str	r3, [r2, #8]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	0800922c 	.word	0x0800922c

0800335c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003370:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003384:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800339a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80033c4:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 80033ca:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80033d0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80033d6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80033dc:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80033e2:	4313      	orrs	r3, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff ff35 	bl	8003258 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff ff7c 	bl	80032f4 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff ff8f 	bl	8003328 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	461a      	mov	r2, r3
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff ff48 	bl	80032a8 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	461a      	mov	r2, r3
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff ff9b 	bl	800335c <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <LL_GPIO_SetPinMode>:
{
 8003430:	b480      	push	{r7}
 8003432:	b08b      	sub	sp, #44	; 0x2c
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e003      	b.n	8003462 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2103      	movs	r1, #3
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	401a      	ands	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	61fb      	str	r3, [r7, #28]
  return result;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003484:	2320      	movs	r3, #32
 8003486:	e003      	b.n	8003490 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	372c      	adds	r7, #44	; 0x2c
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_GPIO_SetPinOutputType>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_GPIO_SetPinSpeed>:
{
 80034da:	b480      	push	{r7}
 80034dc:	b08b      	sub	sp, #44	; 0x2c
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	613b      	str	r3, [r7, #16]
  return result;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003500:	2320      	movs	r3, #32
 8003502:	e003      	b.n	800350c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2103      	movs	r1, #3
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	61fb      	str	r3, [r7, #28]
  return result;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e003      	b.n	800353a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	372c      	adds	r7, #44	; 0x2c
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_GPIO_SetPinPull>:
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	613b      	str	r3, [r7, #16]
  return result;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800357a:	2320      	movs	r3, #32
 800357c:	e003      	b.n	8003586 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2103      	movs	r1, #3
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	61fb      	str	r3, [r7, #28]
  return result;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e003      	b.n	80035b4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	60da      	str	r2, [r3, #12]
}
 80035c2:	bf00      	nop
 80035c4:	372c      	adds	r7, #44	; 0x2c
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_GPIO_SetAFPin_0_7>:
{
 80035ce:	b480      	push	{r7}
 80035d0:	b08b      	sub	sp, #44	; 0x2c
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	613b      	str	r3, [r7, #16]
  return result;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e003      	b.n	8003600 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	210f      	movs	r1, #15
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	61fb      	str	r3, [r7, #28]
  return result;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	431a      	orrs	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	372c      	adds	r7, #44	; 0x2c
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_GPIO_SetAFPin_8_15>:
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	613b      	str	r3, [r7, #16]
  return result;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	e003      	b.n	800367c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	210f      	movs	r1, #15
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	401a      	ands	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	61fb      	str	r3, [r7, #28]
  return result;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e003      	b.n	80036ac <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036ba:	bf00      	nop
 80036bc:	372c      	adds	r7, #44	; 0x2c
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b088      	sub	sp, #32
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	60fb      	str	r3, [r7, #12]
  return result;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <LL_GPIO_Init+0x26>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80036f6:	e048      	b.n	800378a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03a      	beq.n	8003784 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d003      	beq.n	800371e <LL_GPIO_Init+0x58>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d10e      	bne.n	800373c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	461a      	mov	r2, r3
 8003724:	69b9      	ldr	r1, [r7, #24]
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fed7 	bl	80034da <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	461a      	mov	r2, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff feb7 	bl	80034aa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	461a      	mov	r2, r3
 8003742:	69b9      	ldr	r1, [r7, #24]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff05 	bl	8003554 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d111      	bne.n	8003776 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2bff      	cmp	r3, #255	; 0xff
 8003756:	d807      	bhi.n	8003768 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	461a      	mov	r2, r3
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff34 	bl	80035ce <LL_GPIO_SetAFPin_0_7>
 8003766:	e006      	b.n	8003776 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	461a      	mov	r2, r3
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff69 	bl	8003648 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	461a      	mov	r2, r3
 800377c:	69b9      	ldr	r1, [r7, #24]
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fe56 	bl	8003430 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3301      	adds	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1af      	bne.n	80036f8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <LL_RCC_HSI_IsReady+0x24>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d101      	bne.n	80037ba <LL_RCC_HSI_IsReady+0x16>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <LL_RCC_HSI_IsReady+0x18>
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000

080037cc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <LL_RCC_LSE_IsReady+0x24>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d101      	bne.n	80037e2 <LL_RCC_LSE_IsReady+0x16>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <LL_RCC_LSE_IsReady+0x18>
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000

080037f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <LL_RCC_GetSysClkSource+0x18>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <LL_RCC_GetAHBPrescaler+0x18>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000

08003848 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <LL_RCC_GetAPB2Prescaler+0x18>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000

08003864 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <LL_RCC_GetUSARTClockSource+0x24>)
 800386e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	401a      	ands	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	4313      	orrs	r3, r2
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40021000 	.word	0x40021000

0800388c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <LL_RCC_GetUARTClockSource+0x24>)
 8003896:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	401a      	ands	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	4313      	orrs	r3, r2
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40021000 	.word	0x40021000

080038b4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <LL_RCC_PLL_GetMainSource+0x18>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0303 	and.w	r3, r3, #3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000

080038d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <LL_RCC_PLL_GetN+0x18>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40021000 	.word	0x40021000

080038ec <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <LL_RCC_PLL_GetR+0x18>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <LL_RCC_PLL_GetDivider+0x18>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000

08003924 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d132      	bne.n	800399c <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ff94 	bl	8003864 <LL_RCC_GetUSARTClockSource>
 800393c:	4603      	mov	r3, r0
 800393e:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003942:	d016      	beq.n	8003972 <LL_RCC_GetUSARTClockFreq+0x4e>
 8003944:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003948:	d81c      	bhi.n	8003984 <LL_RCC_GetUSARTClockFreq+0x60>
 800394a:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <LL_RCC_GetUSARTClockFreq+0x170>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <LL_RCC_GetUSARTClockFreq+0x34>
 8003950:	4a51      	ldr	r2, [pc, #324]	; (8003a98 <LL_RCC_GetUSARTClockFreq+0x174>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <LL_RCC_GetUSARTClockFreq+0x3c>
 8003956:	e015      	b.n	8003984 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003958:	f000 f934 	bl	8003bc4 <RCC_GetSystemClockFreq>
 800395c:	60f8      	str	r0, [r7, #12]
        break;
 800395e:	e094      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003960:	f7ff ff20 	bl	80037a4 <LL_RCC_HSI_IsReady>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8082 	beq.w	8003a70 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <LL_RCC_GetUSARTClockFreq+0x178>)
 800396e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003970:	e07e      	b.n	8003a70 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003972:	f7ff ff2b 	bl	80037cc <LL_RCC_LSE_IsReady>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d07b      	beq.n	8003a74 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 800397c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003980:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003982:	e077      	b.n	8003a74 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003984:	f000 f91e 	bl	8003bc4 <RCC_GetSystemClockFreq>
 8003988:	4603      	mov	r3, r0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f940 	bl	8003c10 <RCC_GetHCLKClockFreq>
 8003990:	4603      	mov	r3, r0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f96a 	bl	8003c6c <RCC_GetPCLK2ClockFreq>
 8003998:	60f8      	str	r0, [r7, #12]
        break;
 800399a:	e076      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d131      	bne.n	8003a06 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff5e 	bl	8003864 <LL_RCC_GetUSARTClockSource>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80039ae:	d015      	beq.n	80039dc <LL_RCC_GetUSARTClockFreq+0xb8>
 80039b0:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80039b4:	d81b      	bhi.n	80039ee <LL_RCC_GetUSARTClockFreq+0xca>
 80039b6:	4a3a      	ldr	r2, [pc, #232]	; (8003aa0 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <LL_RCC_GetUSARTClockFreq+0xa0>
 80039bc:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <LL_RCC_GetUSARTClockFreq+0x180>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <LL_RCC_GetUSARTClockFreq+0xa8>
 80039c2:	e014      	b.n	80039ee <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80039c4:	f000 f8fe 	bl	8003bc4 <RCC_GetSystemClockFreq>
 80039c8:	60f8      	str	r0, [r7, #12]
        break;
 80039ca:	e05e      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80039cc:	f7ff feea 	bl	80037a4 <LL_RCC_HSI_IsReady>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d050      	beq.n	8003a78 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 80039d6:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <LL_RCC_GetUSARTClockFreq+0x178>)
 80039d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80039da:	e04d      	b.n	8003a78 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80039dc:	f7ff fef6 	bl	80037cc <LL_RCC_LSE_IsReady>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d04a      	beq.n	8003a7c <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80039ec:	e046      	b.n	8003a7c <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80039ee:	f000 f8e9 	bl	8003bc4 <RCC_GetSystemClockFreq>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f90b 	bl	8003c10 <RCC_GetHCLKClockFreq>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f91f 	bl	8003c40 <RCC_GetPCLK1ClockFreq>
 8003a02:	60f8      	str	r0, [r7, #12]
        break;
 8003a04:	e041      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	d139      	bne.n	8003a80 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ff29 	bl	8003864 <LL_RCC_GetUSARTClockSource>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003a18:	d015      	beq.n	8003a46 <LL_RCC_GetUSARTClockFreq+0x122>
 8003a1a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003a1e:	d81b      	bhi.n	8003a58 <LL_RCC_GetUSARTClockFreq+0x134>
 8003a20:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <LL_RCC_GetUSARTClockFreq+0x184>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <LL_RCC_GetUSARTClockFreq+0x10a>
 8003a26:	4a21      	ldr	r2, [pc, #132]	; (8003aac <LL_RCC_GetUSARTClockFreq+0x188>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <LL_RCC_GetUSARTClockFreq+0x112>
 8003a2c:	e014      	b.n	8003a58 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8003a2e:	f000 f8c9 	bl	8003bc4 <RCC_GetSystemClockFreq>
 8003a32:	60f8      	str	r0, [r7, #12]
          break;
 8003a34:	e029      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8003a36:	f7ff feb5 	bl	80037a4 <LL_RCC_HSI_IsReady>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d021      	beq.n	8003a84 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <LL_RCC_GetUSARTClockFreq+0x178>)
 8003a42:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003a44:	e01e      	b.n	8003a84 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8003a46:	f7ff fec1 	bl	80037cc <LL_RCC_LSE_IsReady>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 8003a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a54:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003a56:	e017      	b.n	8003a88 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003a58:	f000 f8b4 	bl	8003bc4 <RCC_GetSystemClockFreq>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f8d6 	bl	8003c10 <RCC_GetHCLKClockFreq>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f8ea 	bl	8003c40 <RCC_GetPCLK1ClockFreq>
 8003a6c:	60f8      	str	r0, [r7, #12]
          break;
 8003a6e:	e00c      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8003a70:	bf00      	nop
 8003a72:	e00a      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8003a74:	bf00      	nop
 8003a76:	e008      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8003a78:	bf00      	nop
 8003a7a:	e006      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8003a7c:	bf00      	nop
 8003a7e:	e004      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8003a80:	bf00      	nop
 8003a82:	e002      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8003a88:	bf00      	nop
  }
  return usart_frequency;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	00030001 	.word	0x00030001
 8003a98:	00030002 	.word	0x00030002
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	000c0004 	.word	0x000c0004
 8003aa4:	000c0008 	.word	0x000c0008
 8003aa8:	00300010 	.word	0x00300010
 8003aac:	00300020 	.word	0x00300020

08003ab0 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2bc0      	cmp	r3, #192	; 0xc0
 8003ac0:	d131      	bne.n	8003b26 <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fee2 	bl	800388c <LL_RCC_GetUARTClockSource>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003ace:	d015      	beq.n	8003afc <LL_RCC_GetUARTClockFreq+0x4c>
 8003ad0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003ad4:	d81b      	bhi.n	8003b0e <LL_RCC_GetUARTClockFreq+0x5e>
 8003ad6:	4a36      	ldr	r2, [pc, #216]	; (8003bb0 <LL_RCC_GetUARTClockFreq+0x100>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <LL_RCC_GetUARTClockFreq+0x34>
 8003adc:	4a35      	ldr	r2, [pc, #212]	; (8003bb4 <LL_RCC_GetUARTClockFreq+0x104>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <LL_RCC_GetUARTClockFreq+0x3c>
 8003ae2:	e014      	b.n	8003b0e <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003ae4:	f000 f86e 	bl	8003bc4 <RCC_GetSystemClockFreq>
 8003ae8:	60f8      	str	r0, [r7, #12]
        break;
 8003aea:	e021      	b.n	8003b30 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003aec:	f7ff fe5a 	bl	80037a4 <LL_RCC_HSI_IsReady>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d019      	beq.n	8003b2a <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <LL_RCC_GetUARTClockFreq+0x108>)
 8003af8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003afa:	e016      	b.n	8003b2a <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003afc:	f7ff fe66 	bl	80037cc <LL_RCC_LSE_IsReady>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d013      	beq.n	8003b2e <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 8003b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003b0c:	e00f      	b.n	8003b2e <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003b0e:	f000 f859 	bl	8003bc4 <RCC_GetSystemClockFreq>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f87b 	bl	8003c10 <RCC_GetHCLKClockFreq>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f88f 	bl	8003c40 <RCC_GetPCLK1ClockFreq>
 8003b22:	60f8      	str	r0, [r7, #12]
        break;
 8003b24:	e004      	b.n	8003b30 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 8003b26:	bf00      	nop
 8003b28:	e002      	b.n	8003b30 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8003b2e:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b36:	d131      	bne.n	8003b9c <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fea7 	bl	800388c <LL_RCC_GetUARTClockSource>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003b44:	d015      	beq.n	8003b72 <LL_RCC_GetUARTClockFreq+0xc2>
 8003b46:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003b4a:	d81b      	bhi.n	8003b84 <LL_RCC_GetUARTClockFreq+0xd4>
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <LL_RCC_GetUARTClockFreq+0x10c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <LL_RCC_GetUARTClockFreq+0xaa>
 8003b52:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <LL_RCC_GetUARTClockFreq+0x110>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <LL_RCC_GetUARTClockFreq+0xb2>
 8003b58:	e014      	b.n	8003b84 <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003b5a:	f000 f833 	bl	8003bc4 <RCC_GetSystemClockFreq>
 8003b5e:	60f8      	str	r0, [r7, #12]
        break;
 8003b60:	e021      	b.n	8003ba6 <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003b62:	f7ff fe1f 	bl	80037a4 <LL_RCC_HSI_IsReady>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d019      	beq.n	8003ba0 <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <LL_RCC_GetUARTClockFreq+0x108>)
 8003b6e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003b70:	e016      	b.n	8003ba0 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003b72:	f7ff fe2b 	bl	80037cc <LL_RCC_LSE_IsReady>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 8003b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b80:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003b82:	e00f      	b.n	8003ba4 <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003b84:	f000 f81e 	bl	8003bc4 <RCC_GetSystemClockFreq>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f840 	bl	8003c10 <RCC_GetHCLKClockFreq>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f854 	bl	8003c40 <RCC_GetPCLK1ClockFreq>
 8003b98:	60f8      	str	r0, [r7, #12]
        break;
 8003b9a:	e004      	b.n	8003ba6 <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 8003b9c:	bf00      	nop
 8003b9e:	e002      	b.n	8003ba6 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8003ba4:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	00c00040 	.word	0x00c00040
 8003bb4:	00c00080 	.word	0x00c00080
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	03000100 	.word	0x03000100
 8003bc0:	03000200 	.word	0x03000200

08003bc4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003bca:	f7ff fe13 	bl	80037f4 <LL_RCC_GetSysClkSource>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d00c      	beq.n	8003bee <RCC_GetSystemClockFreq+0x2a>
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	d80e      	bhi.n	8003bf6 <RCC_GetSystemClockFreq+0x32>
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d002      	beq.n	8003be2 <RCC_GetSystemClockFreq+0x1e>
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d003      	beq.n	8003be8 <RCC_GetSystemClockFreq+0x24>
 8003be0:	e009      	b.n	8003bf6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <RCC_GetSystemClockFreq+0x44>)
 8003be4:	607b      	str	r3, [r7, #4]
      break;
 8003be6:	e009      	b.n	8003bfc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <RCC_GetSystemClockFreq+0x48>)
 8003bea:	607b      	str	r3, [r7, #4]
      break;
 8003bec:	e006      	b.n	8003bfc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003bee:	f000 f853 	bl	8003c98 <RCC_PLL_GetFreqDomain_SYS>
 8003bf2:	6078      	str	r0, [r7, #4]
      break;
 8003bf4:	e002      	b.n	8003bfc <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8003bf6:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <RCC_GetSystemClockFreq+0x44>)
 8003bf8:	607b      	str	r3, [r7, #4]
      break;
 8003bfa:	bf00      	nop
  }

  return frequency;
 8003bfc:	687b      	ldr	r3, [r7, #4]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200

08003c10 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003c18:	f7ff fdfa 	bl	8003810 <LL_RCC_GetAHBPrescaler>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <RCC_GetHCLKClockFreq+0x2c>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	0800912c 	.word	0x0800912c

08003c40 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003c48:	f7ff fdf0 	bl	800382c <LL_RCC_GetAPB1Prescaler>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <RCC_GetPCLK1ClockFreq+0x28>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	0800913c 	.word	0x0800913c

08003c6c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003c74:	f7ff fde8 	bl	8003848 <LL_RCC_GetAPB2Prescaler>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <RCC_GetPCLK2ClockFreq+0x28>)
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0800913c 	.word	0x0800913c

08003c98 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003c9e:	f7ff fe09 	bl	80038b4 <LL_RCC_PLL_GetMainSource>
 8003ca2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d003      	beq.n	8003cb8 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8003cb0:	e005      	b.n	8003cbe <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003cb4:	607b      	str	r3, [r7, #4]
      break;
 8003cb6:	e005      	b.n	8003cc4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003cb8:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003cba:	607b      	str	r3, [r7, #4]
      break;
 8003cbc:	e002      	b.n	8003cc4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003cc0:	607b      	str	r3, [r7, #4]
      break;
 8003cc2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cc4:	f7ff fe04 	bl	80038d0 <LL_RCC_PLL_GetN>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	fb03 f402 	mul.w	r4, r3, r2
 8003cd0:	f7ff fe1a 	bl	8003908 <LL_RCC_PLL_GetDivider>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	3301      	adds	r3, #1
 8003cda:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cde:	f7ff fe05 	bl	80038ec <LL_RCC_PLL_GetR>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	0e5b      	lsrs	r3, r3, #25
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd90      	pop	{r4, r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200

08003d00 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <LL_APB1_GRP1_ForceReset+0x20>)
 8003d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0c:	4904      	ldr	r1, [pc, #16]	; (8003d20 <LL_APB1_GRP1_ForceReset+0x20>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40021000 	.word	0x40021000

08003d24 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8003d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	4904      	ldr	r1, [pc, #16]	; (8003d48 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000

08003d4c <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <LL_APB2_GRP1_ForceReset+0x20>)
 8003d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d58:	4904      	ldr	r1, [pc, #16]	; (8003d6c <LL_APB2_GRP1_ForceReset+0x20>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40021000 	.word	0x40021000

08003d70 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8003d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	4904      	ldr	r1, [pc, #16]	; (8003d94 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000

08003d98 <LL_SPI_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: SPI registers are de-initialized
  *          - ERROR: SPI registers are not de-initialized
  */
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));

#if defined(SPI1)
  if (SPIx == SPI1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <LL_SPI_DeInit+0x88>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d109      	bne.n	8003dc0 <LL_SPI_DeInit+0x28>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI1);
 8003dac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003db0:	f7ff ffcc 	bl	8003d4c <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI1);
 8003db4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003db8:	f7ff ffda 	bl	8003d70 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI1 */
#if defined(SPI2)
  if (SPIx == SPI2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <LL_SPI_DeInit+0x8c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <LL_SPI_DeInit+0x44>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI2);
 8003dc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003dcc:	f7ff ff98 	bl	8003d00 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI2);
 8003dd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003dd4:	f7ff ffa6 	bl	8003d24 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI2 */
#if defined(SPI3)
  if (SPIx == SPI3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <LL_SPI_DeInit+0x90>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d109      	bne.n	8003df8 <LL_SPI_DeInit+0x60>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI3);
 8003de4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003de8:	f7ff ff8a 	bl	8003d00 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI3);
 8003dec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003df0:	f7ff ff98 	bl	8003d24 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI3 */
#if defined(SPI4)
  if (SPIx == SPI4)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <LL_SPI_DeInit+0x94>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d109      	bne.n	8003e14 <LL_SPI_DeInit+0x7c>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI4);
 8003e00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e04:	f7ff ffa2 	bl	8003d4c <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI4);
 8003e08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e0c:	f7ff ffb0 	bl	8003d70 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI4 */

  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40013000 	.word	0x40013000
 8003e24:	40003800 	.word	0x40003800
 8003e28:	40003c00 	.word	0x40003c00
 8003e2c:	40013c00 	.word	0x40013c00

08003e30 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f043 0201 	orr.w	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	615a      	str	r2, [r3, #20]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a43      	ldr	r2, [pc, #268]	; (8004070 <LL_TIM_Init+0x120>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d017      	beq.n	8003f98 <LL_TIM_Init+0x48>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6e:	d013      	beq.n	8003f98 <LL_TIM_Init+0x48>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a40      	ldr	r2, [pc, #256]	; (8004074 <LL_TIM_Init+0x124>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00f      	beq.n	8003f98 <LL_TIM_Init+0x48>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3f      	ldr	r2, [pc, #252]	; (8004078 <LL_TIM_Init+0x128>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <LL_TIM_Init+0x48>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3e      	ldr	r2, [pc, #248]	; (800407c <LL_TIM_Init+0x12c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <LL_TIM_Init+0x48>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <LL_TIM_Init+0x130>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <LL_TIM_Init+0x48>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <LL_TIM_Init+0x134>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d106      	bne.n	8003fa6 <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a31      	ldr	r2, [pc, #196]	; (8004070 <LL_TIM_Init+0x120>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d023      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d01f      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <LL_TIM_Init+0x124>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01b      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <LL_TIM_Init+0x128>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d017      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <LL_TIM_Init+0x12c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <LL_TIM_Init+0x130>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00f      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <LL_TIM_Init+0x138>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <LL_TIM_Init+0x13c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <LL_TIM_Init+0x140>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <LL_TIM_Init+0xa6>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <LL_TIM_Init+0x134>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d106      	bne.n	8004004 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff1b 	bl	8003e4c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff07 	bl	8003e30 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a12      	ldr	r2, [pc, #72]	; (8004070 <LL_TIM_Init+0x120>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <LL_TIM_Init+0x102>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <LL_TIM_Init+0x130>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <LL_TIM_Init+0x102>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a14      	ldr	r2, [pc, #80]	; (8004088 <LL_TIM_Init+0x138>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <LL_TIM_Init+0x102>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <LL_TIM_Init+0x13c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <LL_TIM_Init+0x102>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <LL_TIM_Init+0x140>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <LL_TIM_Init+0x102>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <LL_TIM_Init+0x134>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d105      	bne.n	800405e <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff05 	bl	8003e68 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff66 	bl	8003f30 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40015000 	.word	0x40015000
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800

08004094 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040aa:	d045      	beq.n	8004138 <LL_TIM_OC_Init+0xa4>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b2:	d848      	bhi.n	8004146 <LL_TIM_OC_Init+0xb2>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d036      	beq.n	800412a <LL_TIM_OC_Init+0x96>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d840      	bhi.n	8004146 <LL_TIM_OC_Init+0xb2>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d027      	beq.n	800411c <LL_TIM_OC_Init+0x88>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d838      	bhi.n	8004146 <LL_TIM_OC_Init+0xb2>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040da:	d018      	beq.n	800410e <LL_TIM_OC_Init+0x7a>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	d830      	bhi.n	8004146 <LL_TIM_OC_Init+0xb2>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d003      	beq.n	80040f2 <LL_TIM_OC_Init+0x5e>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d007      	beq.n	8004100 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80040f0:	e029      	b.n	8004146 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f82d 	bl	8004154 <OC1Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]
      break;
 80040fe:	e023      	b.n	8004148 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f8ac 	bl	8004260 <OC2Config>
 8004108:	4603      	mov	r3, r0
 800410a:	75fb      	strb	r3, [r7, #23]
      break;
 800410c:	e01c      	b.n	8004148 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f92f 	bl	8004374 <OC3Config>
 8004116:	4603      	mov	r3, r0
 8004118:	75fb      	strb	r3, [r7, #23]
      break;
 800411a:	e015      	b.n	8004148 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f9b2 	bl	8004488 <OC4Config>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	e00e      	b.n	8004148 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa35 	bl	800459c <OC5Config>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]
      break;
 8004136:	e007      	b.n	8004148 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fa98 	bl	8004670 <OC6Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]
      break;
 8004144:	e000      	b.n	8004148 <LL_TIM_OC_Init+0xb4>
      break;
 8004146:	bf00      	nop
  }

  return result;
 8004148:	7dfb      	ldrb	r3, [r7, #23]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 0202 	bic.w	r2, r3, #2
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a24      	ldr	r2, [pc, #144]	; (8004248 <OC1Config+0xf4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <OC1Config+0x8e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a23      	ldr	r2, [pc, #140]	; (800424c <OC1Config+0xf8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <OC1Config+0x8e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <OC1Config+0xfc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <OC1Config+0x8e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a21      	ldr	r2, [pc, #132]	; (8004254 <OC1Config+0x100>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <OC1Config+0x8e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a20      	ldr	r2, [pc, #128]	; (8004258 <OC1Config+0x104>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <OC1Config+0x8e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	; (800425c <OC1Config+0x108>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d11e      	bne.n	8004220 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 0208 	bic.w	r2, r3, #8
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f023 0204 	bic.w	r2, r3, #4
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff fe26 	bl	8003e84 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800
 800425c:	40015000 	.word	0x40015000

08004260 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f023 0210 	bic.w	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	0212      	lsls	r2, r2, #8
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0220 	bic.w	r2, r3, #32
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0210 	bic.w	r2, r3, #16
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a25      	ldr	r2, [pc, #148]	; (800435c <OC2Config+0xfc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <OC2Config+0x94>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a24      	ldr	r2, [pc, #144]	; (8004360 <OC2Config+0x100>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00f      	beq.n	80042f4 <OC2Config+0x94>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a23      	ldr	r2, [pc, #140]	; (8004364 <OC2Config+0x104>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00b      	beq.n	80042f4 <OC2Config+0x94>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a22      	ldr	r2, [pc, #136]	; (8004368 <OC2Config+0x108>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d007      	beq.n	80042f4 <OC2Config+0x94>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a21      	ldr	r2, [pc, #132]	; (800436c <OC2Config+0x10c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <OC2Config+0x94>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a20      	ldr	r2, [pc, #128]	; (8004370 <OC2Config+0x110>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d11f      	bne.n	8004334 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	019b      	lsls	r3, r3, #6
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	019b      	lsls	r3, r3, #6
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4619      	mov	r1, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fdaa 	bl	8003ea0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40013400 	.word	0x40013400
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800
 8004370:	40015000 	.word	0x40015000

08004374 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a25      	ldr	r2, [pc, #148]	; (8004470 <OC3Config+0xfc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <OC3Config+0x92>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a24      	ldr	r2, [pc, #144]	; (8004474 <OC3Config+0x100>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <OC3Config+0x92>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <OC3Config+0x104>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <OC3Config+0x92>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a22      	ldr	r2, [pc, #136]	; (800447c <OC3Config+0x108>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <OC3Config+0x92>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a21      	ldr	r2, [pc, #132]	; (8004480 <OC3Config+0x10c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <OC3Config+0x92>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a20      	ldr	r2, [pc, #128]	; (8004484 <OC3Config+0x110>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d11f      	bne.n	8004446 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	029b      	lsls	r3, r3, #10
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	015b      	lsls	r3, r3, #5
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fd2f 	bl	8003ebc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40013400 	.word	0x40013400
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800
 8004484:	40015000 	.word	0x40015000

08004488 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	0212      	lsls	r2, r2, #8
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	031b      	lsls	r3, r3, #12
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	031b      	lsls	r3, r3, #12
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a25      	ldr	r2, [pc, #148]	; (8004584 <OC4Config+0xfc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <OC4Config+0x94>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a24      	ldr	r2, [pc, #144]	; (8004588 <OC4Config+0x100>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00f      	beq.n	800451c <OC4Config+0x94>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a23      	ldr	r2, [pc, #140]	; (800458c <OC4Config+0x104>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <OC4Config+0x94>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a22      	ldr	r2, [pc, #136]	; (8004590 <OC4Config+0x108>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <OC4Config+0x94>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a21      	ldr	r2, [pc, #132]	; (8004594 <OC4Config+0x10c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <OC4Config+0x94>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a20      	ldr	r2, [pc, #128]	; (8004598 <OC4Config+0x110>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d11f      	bne.n	800455c <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	039b      	lsls	r3, r3, #14
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	039b      	lsls	r3, r3, #14
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	019b      	lsls	r3, r3, #6
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	01db      	lsls	r3, r3, #7
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fcb2 	bl	8003ed8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40013400 	.word	0x40013400
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800
 8004598:	40015000 	.word	0x40015000

0800459c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	041b      	lsls	r3, r3, #16
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a19      	ldr	r2, [pc, #100]	; (8004658 <OC5Config+0xbc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d013      	beq.n	8004620 <OC5Config+0x84>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <OC5Config+0xc0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00f      	beq.n	8004620 <OC5Config+0x84>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a17      	ldr	r2, [pc, #92]	; (8004660 <OC5Config+0xc4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <OC5Config+0x84>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a16      	ldr	r2, [pc, #88]	; (8004664 <OC5Config+0xc8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <OC5Config+0x84>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a15      	ldr	r2, [pc, #84]	; (8004668 <OC5Config+0xcc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <OC5Config+0x84>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <OC5Config+0xd0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d109      	bne.n	8004634 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fc57 	bl	8003ef4 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40013400 	.word	0x40013400
 8004660:	40014000 	.word	0x40014000
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800
 800466c:	40015000 	.word	0x40015000

08004670 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	0212      	lsls	r2, r2, #8
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	051b      	lsls	r3, r3, #20
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	051b      	lsls	r3, r3, #20
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a18      	ldr	r2, [pc, #96]	; (800472c <OC6Config+0xbc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <OC6Config+0x86>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a17      	ldr	r2, [pc, #92]	; (8004730 <OC6Config+0xc0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00f      	beq.n	80046f6 <OC6Config+0x86>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a16      	ldr	r2, [pc, #88]	; (8004734 <OC6Config+0xc4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <OC6Config+0x86>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <OC6Config+0xc8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <OC6Config+0x86>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <OC6Config+0xcc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <OC6Config+0x86>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <OC6Config+0xd0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d109      	bne.n	800470a <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	029b      	lsls	r3, r3, #10
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fbfc 	bl	8003f14 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800
 8004740:	40015000 	.word	0x40015000

08004744 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <LL_USART_IsEnabled+0x18>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <LL_USART_IsEnabled+0x1a>
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_USART_SetPrescaler>:
  *         @arg @ref LL_USART_PRESCALER_DIV128
  *         @arg @ref LL_USART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	f023 030f 	bic.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b292      	uxth	r2, r2
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	605a      	str	r2, [r3, #4]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b0b      	cmp	r3, #11
 80047f2:	d83c      	bhi.n	800486e <LL_USART_SetBaudRate+0x8e>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d039      	beq.n	800486e <LL_USART_SetBaudRate+0x8e>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	d122      	bne.n	8004848 <LL_USART_SetBaudRate+0x68>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <LL_USART_SetBaudRate+0x9c>)
 800480a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	005a      	lsls	r2, r3, #1
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	441a      	add	r2, r3
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	b29b      	uxth	r3, r3
 8004824:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800482c:	4013      	ands	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 8004846:	e012      	b.n	800486e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <LL_USART_SetBaudRate+0x9c>)
 8004850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	fbb2 f2f3 	udiv	r2, r2, r3
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	441a      	add	r2, r3
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	b29b      	uxth	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	60da      	str	r2, [r3, #12]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	08009234 	.word	0x08009234

08004880 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ff56 	bl	8004744 <LL_USART_IsEnabled>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d165      	bne.n	800496a <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <LL_USART_Init+0xf4>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	6891      	ldr	r1, [r2, #8]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	6912      	ldr	r2, [r2, #16]
 80048ae:	4311      	orrs	r1, r2
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	6952      	ldr	r2, [r2, #20]
 80048b4:	4311      	orrs	r1, r2
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	69d2      	ldr	r2, [r2, #28]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff62 	bl	8004792 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ff6f 	bl	80047b8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a26      	ldr	r2, [pc, #152]	; (8004978 <LL_USART_Init+0xf8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d104      	bne.n	80048ec <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80048e2:	2003      	movs	r0, #3
 80048e4:	f7ff f81e 	bl	8003924 <LL_RCC_GetUSARTClockFreq>
 80048e8:	60b8      	str	r0, [r7, #8]
 80048ea:	e023      	b.n	8004934 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a23      	ldr	r2, [pc, #140]	; (800497c <LL_USART_Init+0xfc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d104      	bne.n	80048fe <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80048f4:	200c      	movs	r0, #12
 80048f6:	f7ff f815 	bl	8003924 <LL_RCC_GetUSARTClockFreq>
 80048fa:	60b8      	str	r0, [r7, #8]
 80048fc:	e01a      	b.n	8004934 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <LL_USART_Init+0x100>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d104      	bne.n	8004910 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004906:	2030      	movs	r0, #48	; 0x30
 8004908:	f7ff f80c 	bl	8003924 <LL_RCC_GetUSARTClockFreq>
 800490c:	60b8      	str	r0, [r7, #8]
 800490e:	e011      	b.n	8004934 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <LL_USART_Init+0x104>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d104      	bne.n	8004922 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004918:	20c0      	movs	r0, #192	; 0xc0
 800491a:	f7ff f8c9 	bl	8003ab0 <LL_RCC_GetUARTClockFreq>
 800491e:	60b8      	str	r0, [r7, #8]
 8004920:	e008      	b.n	8004934 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a18      	ldr	r2, [pc, #96]	; (8004988 <LL_USART_Init+0x108>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d104      	bne.n	8004934 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800492a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800492e:	f7ff f8bf 	bl	8003ab0 <LL_RCC_GetUARTClockFreq>
 8004932:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d011      	beq.n	800495e <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	69d9      	ldr	r1, [r3, #28]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	460b      	mov	r3, r1
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff41 	bl	80047e0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff00 	bl	800476a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	efff69f3 	.word	0xefff69f3
 8004978:	40013800 	.word	0x40013800
 800497c:	40004400 	.word	0x40004400
 8004980:	40004800 	.word	0x40004800
 8004984:	40004c00 	.word	0x40004c00
 8004988:	40005000 	.word	0x40005000

0800498c <LL_PWR_GetRegulVoltageScaling>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <LL_PWR_GetRegulVoltageScaling+0x18>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40007000 	.word	0x40007000

080049a8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <LL_FLASH_SetLatency+0x24>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f023 020f 	bic.w	r2, r3, #15
 80049b8:	4904      	ldr	r1, [pc, #16]	; (80049cc <LL_FLASH_SetLatency+0x24>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40022000 	.word	0x40022000

080049d0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <LL_FLASH_GetLatency+0x18>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
}
 80049dc:	4618      	mov	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40022000 	.word	0x40022000

080049ec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <LL_InitTick+0x30>)
 8004a00:	3b01      	subs	r3, #1
 8004a02:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <LL_InitTick+0x30>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a0a:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <LL_InitTick+0x30>)
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000e010 	.word	0xe000e010

08004a20 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ffdd 	bl	80049ec <LL_InitTick>
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <LL_mDelay+0x4c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a56:	d00c      	beq.n	8004a72 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8004a5e:	e008      	b.n	8004a72 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <LL_mDelay+0x4c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f3      	bne.n	8004a60 <LL_mDelay+0x24>
    }
  }
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	e000e010 	.word	0xe000e010

08004a8c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <LL_SetSystemCoreClock+0x1c>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6013      	str	r3, [r2, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000

08004aac <LL_SetFlashLatency>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
ErrorStatus LL_SetFlashLatency(uint32_t HCLKFrequency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t getlatency;
  ErrorStatus status = SUCCESS;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	74fb      	strb	r3, [r7, #19]

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Frequency cannot be equal to 0 or greater than max clock */
  if((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_SCALE1_LATENCY9_FREQ))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <LL_SetFlashLatency+0x1e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <LL_SetFlashLatency+0xfc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d902      	bls.n	8004ad0 <LL_SetFlashLatency+0x24>
  {
    status = ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	74fb      	strb	r3, [r7, #19]
 8004ace:	e065      	b.n	8004b9c <LL_SetFlashLatency+0xf0>
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004ad0:	f7ff ff5c 	bl	800498c <LL_PWR_GetRegulVoltageScaling>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ada:	d137      	bne.n	8004b4c <LL_SetFlashLatency+0xa0>
    {
      if(HCLKFrequency > UTILS_SCALE1_LATENCY8_FREQ)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a33      	ldr	r2, [pc, #204]	; (8004bac <LL_SetFlashLatency+0x100>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d902      	bls.n	8004aea <LL_SetFlashLatency+0x3e>
      {
        /* 160 < HCLK <= 170 => 8WS (9 CPU cycles) */
        latency = LL_FLASH_LATENCY_8;
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e03d      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY7_FREQ)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a30      	ldr	r2, [pc, #192]	; (8004bb0 <LL_SetFlashLatency+0x104>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d902      	bls.n	8004af8 <LL_SetFlashLatency+0x4c>
      {
        /* 140 < HCLK <= 160 => 7WS (8 CPU cycles) */
        latency = LL_FLASH_LATENCY_7;
 8004af2:	2307      	movs	r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e036      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY6_FREQ)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2e      	ldr	r2, [pc, #184]	; (8004bb4 <LL_SetFlashLatency+0x108>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d902      	bls.n	8004b06 <LL_SetFlashLatency+0x5a>
      {
        /* 120 < HCLK <= 140 => 6WS (7 CPU cycles) */
        latency = LL_FLASH_LATENCY_6;
 8004b00:	2306      	movs	r3, #6
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e02f      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY5_FREQ)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2b      	ldr	r2, [pc, #172]	; (8004bb8 <LL_SetFlashLatency+0x10c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d902      	bls.n	8004b14 <LL_SetFlashLatency+0x68>
      {
        /* 100 < HCLK <= 120 => 5WS (6 CPU cycles) */
        latency = LL_FLASH_LATENCY_5;
 8004b0e:	2305      	movs	r3, #5
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e028      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <LL_SetFlashLatency+0x110>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d902      	bls.n	8004b22 <LL_SetFlashLatency+0x76>
      {
        /* 80 < HCLK <= 100 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e021      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a26      	ldr	r2, [pc, #152]	; (8004bc0 <LL_SetFlashLatency+0x114>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d902      	bls.n	8004b30 <LL_SetFlashLatency+0x84>
      {
        /* 60 < HCLK <= 80 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e01a      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <LL_SetFlashLatency+0x118>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d902      	bls.n	8004b3e <LL_SetFlashLatency+0x92>
      {
        /* 40 < HCLK <= 60 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e013      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <LL_SetFlashLatency+0x11c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d90f      	bls.n	8004b66 <LL_SetFlashLatency+0xba>
        {
          /* 20 < HCLK <= 40 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e00c      	b.n	8004b66 <LL_SetFlashLatency+0xba>
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }
    else /* SCALE2 */
    {
      if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <LL_SetFlashLatency+0x120>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d902      	bls.n	8004b5a <LL_SetFlashLatency+0xae>
      {
        /* 16 < HCLK <= 26 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 8004b54:	2302      	movs	r3, #2
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e005      	b.n	8004b66 <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <LL_SetFlashLatency+0x124>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <LL_SetFlashLatency+0xba>
        {
          /* 8 < HCLK <= 16 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }

    if (status != ERROR)
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d017      	beq.n	8004b9c <LL_SetFlashLatency+0xf0>
    {
      LL_FLASH_SetLatency(latency);
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7ff ff1b 	bl	80049a8 <LL_FLASH_SetLatency>

      /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
      timeout = 2U;
 8004b72:	2302      	movs	r3, #2
 8004b74:	617b      	str	r3, [r7, #20]
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
 8004b76:	f7ff ff2b 	bl	80049d0 <LL_FLASH_GetLatency>
 8004b7a:	60b8      	str	r0, [r7, #8]
        timeout--;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
      } while ((getlatency != latency) && (timeout > 0U));
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d002      	beq.n	8004b90 <LL_SetFlashLatency+0xe4>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f2      	bne.n	8004b76 <LL_SetFlashLatency+0xca>

      if(getlatency != latency)
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <LL_SetFlashLatency+0xf0>
      {
        status = ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	74fb      	strb	r3, [r7, #19]
      }
    }
  }

  return status;
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	0a21fe80 	.word	0x0a21fe80
 8004bac:	09896800 	.word	0x09896800
 8004bb0:	08583b00 	.word	0x08583b00
 8004bb4:	07270e00 	.word	0x07270e00
 8004bb8:	05f5e100 	.word	0x05f5e100
 8004bbc:	04c4b400 	.word	0x04c4b400
 8004bc0:	03938700 	.word	0x03938700
 8004bc4:	02625a00 	.word	0x02625a00
 8004bc8:	01312d00 	.word	0x01312d00
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	007a1200 	.word	0x007a1200

08004bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <__NVIC_SetPriorityGrouping+0x44>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <__NVIC_SetPriorityGrouping+0x44>)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	60d3      	str	r3, [r2, #12]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <LL_RCC_HSE_EnableBypass>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <LL_RCC_HSE_EnableBypass+0x1c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <LL_RCC_HSE_EnableBypass+0x1c>)
 8004c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000

08004c3c <LL_RCC_HSE_Enable>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <LL_RCC_HSE_Enable+0x1c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <LL_RCC_HSE_Enable+0x1c>)
 8004c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4a:	6013      	str	r3, [r2, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000

08004c5c <LL_RCC_HSE_Disable>:
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <LL_RCC_HSE_Disable+0x1c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <LL_RCC_HSE_Disable+0x1c>)
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6a:	6013      	str	r3, [r2, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <LL_RCC_HSE_IsReady>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <LL_RCC_HSE_IsReady+0x24>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c8c:	d101      	bne.n	8004c92 <LL_RCC_HSE_IsReady+0x16>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <LL_RCC_HSE_IsReady+0x18>
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <LL_RCC_HSI_Enable>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <LL_RCC_HSI_Enable+0x1c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <LL_RCC_HSI_Enable+0x1c>)
 8004cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb2:	6013      	str	r3, [r2, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000

08004cc4 <LL_RCC_HSI_IsReady>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <LL_RCC_HSI_IsReady+0x24>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd4:	d101      	bne.n	8004cda <LL_RCC_HSI_IsReady+0x16>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <LL_RCC_HSI_IsReady+0x18>
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000

08004cec <LL_RCC_HSI_SetCalibTrimming>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	061b      	lsls	r3, r3, #24
 8004d00:	4904      	ldr	r1, [pc, #16]	; (8004d14 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	604b      	str	r3, [r1, #4]
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000

08004d18 <LL_RCC_SetSysClkSource>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <LL_RCC_SetSysClkSource+0x24>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 0203 	bic.w	r2, r3, #3
 8004d28:	4904      	ldr	r1, [pc, #16]	; (8004d3c <LL_RCC_SetSysClkSource+0x24>)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40021000 	.word	0x40021000

08004d40 <LL_RCC_GetSysClkSource>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <LL_RCC_GetSysClkSource+0x18>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000

08004d5c <LL_RCC_SetAHBPrescaler>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <LL_RCC_SetAHBPrescaler+0x24>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d6c:	4904      	ldr	r1, [pc, #16]	; (8004d80 <LL_RCC_SetAHBPrescaler+0x24>)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40021000 	.word	0x40021000

08004d84 <LL_RCC_SetAPB1Prescaler>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d94:	4904      	ldr	r1, [pc, #16]	; (8004da8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	608b      	str	r3, [r1, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40021000 	.word	0x40021000

08004dac <LL_RCC_SetAPB2Prescaler>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dbc:	4904      	ldr	r1, [pc, #16]	; (8004dd0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40021000 	.word	0x40021000

08004dd4 <LL_RCC_PLL_Enable>:
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <LL_RCC_PLL_Enable+0x1c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <LL_RCC_PLL_Enable+0x1c>)
 8004dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000

08004df4 <LL_RCC_PLL_Disable>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <LL_RCC_PLL_Disable+0x1c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <LL_RCC_PLL_Disable+0x1c>)
 8004dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e02:	6013      	str	r3, [r2, #0]
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40021000 	.word	0x40021000

08004e14 <LL_RCC_PLL_IsReady>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <LL_RCC_PLL_IsReady+0x24>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e24:	d101      	bne.n	8004e2a <LL_RCC_PLL_IsReady+0x16>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <LL_RCC_PLL_IsReady+0x18>
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000

08004e3c <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	0212      	lsls	r2, r2, #8
 8004e5c:	4311      	orrs	r1, r2
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	4904      	ldr	r1, [pc, #16]	; (8004e74 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60cb      	str	r3, [r1, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40021000 	.word	0x40021000
 8004e78:	f9ff800c 	.word	0xf9ff800c

08004e7c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8004e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	60d3      	str	r3, [r2, #12]
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000

08004e9c <LL_APB1_GRP1_EnableClock>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004ea6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ea8:	4907      	ldr	r1, [pc, #28]	; (8004ec8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004eb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004eba:	68fb      	ldr	r3, [r7, #12]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40021000 	.word	0x40021000

08004ecc <LL_APB2_GRP1_EnableClock>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004ed4:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ed6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ed8:	4907      	ldr	r1, [pc, #28]	; (8004ef8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ee2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40021000 	.word	0x40021000

08004efc <LL_PWR_SetRegulVoltageScaling>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004f0c:	4904      	ldr	r1, [pc, #16]	; (8004f20 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40007000 	.word	0x40007000

08004f24 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <LL_PWR_EnableRange1BoostMode+0x20>)
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2e:	4a05      	ldr	r2, [pc, #20]	; (8004f44 <LL_PWR_EnableRange1BoostMode+0x20>)
 8004f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40007000 	.word	0x40007000

08004f48 <LL_PWR_DisableRange1BoostMode>:
  * @brief  Disable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_DisableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableRange1BoostMode(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <LL_PWR_DisableRange1BoostMode+0x20>)
 8004f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f52:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <LL_PWR_DisableRange1BoostMode+0x20>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004f5c:	bf00      	nop
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40007000 	.word	0x40007000

08004f6c <LL_FLASH_SetLatency>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <LL_FLASH_SetLatency+0x24>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 020f 	bic.w	r2, r3, #15
 8004f7c:	4904      	ldr	r1, [pc, #16]	; (8004f90 <LL_FLASH_SetLatency+0x24>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40022000 	.word	0x40022000

08004f94 <LL_FLASH_GetLatency>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <LL_FLASH_GetLatency+0x18>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40022000 	.word	0x40022000

08004fb0 <STRHAL_Init>:

static inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq);
static inline STRHAL_SysClk_Src_t _SysClk_Backup();

STRHAL_Oof_t STRHAL_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	71fb      	strb	r3, [r7, #7]
	if (_INITIALIZED)
 8004fbc:	4b21      	ldr	r3, [pc, #132]	; (8005044 <STRHAL_Init+0x94>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <STRHAL_Init+0x1a>
		return _status;
 8004fc4:	4b20      	ldr	r3, [pc, #128]	; (8005048 <STRHAL_Init+0x98>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	e037      	b.n	800503a <STRHAL_Init+0x8a>

	_status = STRHAL_NOICE;
 8004fca:	4b1f      	ldr	r3, [pc, #124]	; (8005048 <STRHAL_Init+0x98>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]

	NVIC_SetPriorityGrouping(0x03);
 8004fd0:	2003      	movs	r0, #3
 8004fd2:	f7ff fdff 	bl	8004bd4 <__NVIC_SetPriorityGrouping>
	if (_SysClk_Init(src, freq) != src)
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f836 	bl	800504c <_SysClk_Init>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d006      	beq.n	8004ff8 <STRHAL_Init+0x48>
		_status |= STRHAL_OOF_SYSCLK;
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <STRHAL_Init+0x98>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	4b14      	ldr	r3, [pc, #80]	; (8005048 <STRHAL_Init+0x98>)
 8004ff6:	701a      	strb	r2, [r3, #0]

	STRHAL_Clock_Init();
 8004ff8:	f001 fd52 	bl	8006aa0 <STRHAL_Clock_Init>
	STRHAL_SysTick_Init();
 8004ffc:	f002 fb36 	bl	800766c <STRHAL_SysTick_Init>
	STRHAL_GPIO_Init();
 8005000:	f001 fd96 	bl	8006b30 <STRHAL_GPIO_Init>
	STRHAL_OPAMP_Init();
 8005004:	f001 ff44 	bl	8006e90 <STRHAL_OPAMP_Init>
	STRHAL_UART_Init();
 8005008:	f003 fb82 	bl	8008710 <STRHAL_UART_Init>
	STRHAL_ADC_Init();
 800500c:	f000 fc84 	bl	8005918 <STRHAL_ADC_Init>
	STRHAL_TIM_Init();
 8005010:	f002 fd83 	bl	8007b1a <STRHAL_TIM_Init>
	STRHAL_SPI_Init();
 8005014:	f002 fad4 	bl	80075c0 <STRHAL_SPI_Init>
	_status |= STRHAL_CAN_Init();
 8005018:	f001 fa78 	bl	800650c <STRHAL_CAN_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	4b09      	ldr	r3, [pc, #36]	; (8005048 <STRHAL_Init+0x98>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4313      	orrs	r3, r2
 8005026:	b2da      	uxtb	r2, r3
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <STRHAL_Init+0x98>)
 800502a:	701a      	strb	r2, [r3, #0]
	STRHAL_QSPI_Init();
 800502c:	f001 fffa 	bl	8007024 <STRHAL_QSPI_Init>

	_INITIALIZED = 1;
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <STRHAL_Init+0x94>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]

	return _status;
 8005036:	4b04      	ldr	r3, [pc, #16]	; (8005048 <STRHAL_Init+0x98>)
 8005038:	781b      	ldrb	r3, [r3, #0]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000a60 	.word	0x20000a60
 8005048:	20000a64 	.word	0x20000a64

0800504c <_SysClk_Init>:

inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	6039      	str	r1, [r7, #0]
 8005056:	71fb      	strb	r3, [r7, #7]
	uint32_t tot;
	if (src == STRHAL_SYSCLK_SRC_INT)
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d164      	bne.n	8005128 <_SysClk_Init+0xdc>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 800505e:	487c      	ldr	r0, [pc, #496]	; (8005250 <_SysClk_Init+0x204>)
 8005060:	f7ff fd24 	bl	8004aac <LL_SetFlashLatency>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <_SysClk_Init+0x26>
			return _SysClk_Backup();
 800506a:	f000 f8f9 	bl	8005260 <_SysClk_Backup>
 800506e:	4603      	mov	r3, r0
 8005070:	e0ea      	b.n	8005248 <_SysClk_Init+0x1fc>

		LL_PWR_EnableRange1BoostMode();
 8005072:	f7ff ff57 	bl	8004f24 <LL_PWR_EnableRange1BoostMode>

		LL_RCC_PLL_Disable();
 8005076:	f7ff febd 	bl	8004df4 <LL_RCC_PLL_Disable>
		LL_RCC_HSI_Enable();
 800507a:	f7ff fe13 	bl	8004ca4 <LL_RCC_HSI_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e00a      	b.n	800509a <_SysClk_Init+0x4e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a73      	ldr	r2, [pc, #460]	; (8005254 <_SysClk_Init+0x208>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d903      	bls.n	8005094 <_SysClk_Init+0x48>
				return _SysClk_Backup();
 800508c:	f000 f8e8 	bl	8005260 <_SysClk_Backup>
 8005090:	4603      	mov	r3, r0
 8005092:	e0d9      	b.n	8005248 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	f7ff febb 	bl	8004e14 <LL_RCC_PLL_IsReady>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <_SysClk_Init+0x62>
 80050a4:	f7ff fe0e 	bl	8004cc4 <LL_RCC_HSI_IsReady>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0ea      	beq.n	8005084 <_SysClk_Init+0x38>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI,
 80050ae:	2300      	movs	r3, #0
 80050b0:	2228      	movs	r2, #40	; 0x28
 80050b2:	2110      	movs	r1, #16
 80050b4:	2002      	movs	r0, #2
 80050b6:	f7ff fec1 	bl	8004e3c <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_INT_PLL_M, 4 * STRHAL_SYSCLK_FREQ / HSI_VALUE,
		STRHAL_SYSCLK_INT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 80050ba:	f7ff fedf 	bl	8004e7c <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 80050be:	f7ff fe89 	bl	8004dd4 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e00a      	b.n	80050de <_SysClk_Init+0x92>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4a62      	ldr	r2, [pc, #392]	; (8005254 <_SysClk_Init+0x208>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d903      	bls.n	80050d8 <_SysClk_Init+0x8c>
				return _SysClk_Backup();
 80050d0:	f000 f8c6 	bl	8005260 <_SysClk_Backup>
 80050d4:	4603      	mov	r3, r0
 80050d6:	e0b7      	b.n	8005248 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3301      	adds	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	f7ff fe99 	bl	8004e14 <LL_RCC_PLL_IsReady>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ef      	beq.n	80050c8 <_SysClk_Init+0x7c>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80050e8:	2003      	movs	r0, #3
 80050ea:	f7ff fe15 	bl	8004d18 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e00a      	b.n	800510a <_SysClk_Init+0xbe>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a57      	ldr	r2, [pc, #348]	; (8005254 <_SysClk_Init+0x208>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d903      	bls.n	8005104 <_SysClk_Init+0xb8>
				return _SysClk_Backup();
 80050fc:	f000 f8b0 	bl	8005260 <_SysClk_Backup>
 8005100:	4603      	mov	r3, r0
 8005102:	e0a1      	b.n	8005248 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3301      	adds	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	f7ff fe19 	bl	8004d40 <LL_RCC_GetSysClkSource>
 800510e:	4603      	mov	r3, r0
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d1ef      	bne.n	80050f4 <_SysClk_Init+0xa8>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 8005114:	484e      	ldr	r0, [pc, #312]	; (8005250 <_SysClk_Init+0x204>)
 8005116:	f7ff fc83 	bl	8004a20 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 800511a:	484d      	ldr	r0, [pc, #308]	; (8005250 <_SysClk_Init+0x204>)
 800511c:	f7ff fcb6 	bl	8004a8c <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_INT;
 8005120:	4b4d      	ldr	r3, [pc, #308]	; (8005258 <_SysClk_Init+0x20c>)
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e084      	b.n	8005232 <_SysClk_Init+0x1e6>
	}
	else if (src == STRHAL_SYSCLK_SRC_EXT)
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b02      	cmp	r3, #2
 800512c:	f040 8081 	bne.w	8005232 <_SysClk_Init+0x1e6>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 8005130:	4847      	ldr	r0, [pc, #284]	; (8005250 <_SysClk_Init+0x204>)
 8005132:	f7ff fcbb 	bl	8004aac <LL_SetFlashLatency>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <_SysClk_Init+0xf8>
			return _SysClk_Backup();
 800513c:	f000 f890 	bl	8005260 <_SysClk_Backup>
 8005140:	4603      	mov	r3, r0
 8005142:	e081      	b.n	8005248 <_SysClk_Init+0x1fc>

		LL_RCC_PLL_Disable();
 8005144:	f7ff fe56 	bl	8004df4 <LL_RCC_PLL_Disable>
		if (LL_RCC_HSE_IsReady())
 8005148:	f7ff fd98 	bl	8004c7c <LL_RCC_HSE_IsReady>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d014      	beq.n	800517c <_SysClk_Init+0x130>
		{
			LL_RCC_HSE_Disable();
 8005152:	f7ff fd83 	bl	8004c5c <LL_RCC_HSE_Disable>

			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e00a      	b.n	8005172 <_SysClk_Init+0x126>
			{
				if (tot > STRHAL_SYSCLK_START_TOT)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <_SysClk_Init+0x208>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d903      	bls.n	800516c <_SysClk_Init+0x120>
					return _SysClk_Backup();
 8005164:	f000 f87c 	bl	8005260 <_SysClk_Backup>
 8005168:	4603      	mov	r3, r0
 800516a:	e06d      	b.n	8005248 <_SysClk_Init+0x1fc>
			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	f7ff fd83 	bl	8004c7c <LL_RCC_HSE_IsReady>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1ef      	bne.n	800515c <_SysClk_Init+0x110>
			}
		}

		LL_RCC_HSE_EnableBypass();
 800517c:	f7ff fd4e 	bl	8004c1c <LL_RCC_HSE_EnableBypass>
		LL_RCC_HSE_Enable();
 8005180:	f7ff fd5c 	bl	8004c3c <LL_RCC_HSE_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e00a      	b.n	80051a0 <_SysClk_Init+0x154>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a31      	ldr	r2, [pc, #196]	; (8005254 <_SysClk_Init+0x208>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d903      	bls.n	800519a <_SysClk_Init+0x14e>
				return _SysClk_Backup();
 8005192:	f000 f865 	bl	8005260 <_SysClk_Backup>
 8005196:	4603      	mov	r3, r0
 8005198:	e056      	b.n	8005248 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	f7ff fe38 	bl	8004e14 <LL_RCC_PLL_IsReady>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <_SysClk_Init+0x168>
 80051aa:	f7ff fd67 	bl	8004c7c <LL_RCC_HSE_IsReady>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0ea      	beq.n	800518a <_SysClk_Init+0x13e>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE,
 80051b4:	4a29      	ldr	r2, [pc, #164]	; (800525c <_SysClk_Init+0x210>)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	2100      	movs	r1, #0
 80051c0:	2003      	movs	r0, #3
 80051c2:	f7ff fe3b 	bl	8004e3c <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_EXT_PLL_M, 2 * STRHAL_SYSCLK_FREQ / freq,
		STRHAL_SYSCLK_EXT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 80051c6:	f7ff fe59 	bl	8004e7c <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 80051ca:	f7ff fe03 	bl	8004dd4 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e00a      	b.n	80051ea <_SysClk_Init+0x19e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <_SysClk_Init+0x208>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d903      	bls.n	80051e4 <_SysClk_Init+0x198>
				return _SysClk_Backup();
 80051dc:	f000 f840 	bl	8005260 <_SysClk_Backup>
 80051e0:	4603      	mov	r3, r0
 80051e2:	e031      	b.n	8005248 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	f7ff fe13 	bl	8004e14 <LL_RCC_PLL_IsReady>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ef      	beq.n	80051d4 <_SysClk_Init+0x188>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80051f4:	2003      	movs	r0, #3
 80051f6:	f7ff fd8f 	bl	8004d18 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e00a      	b.n	8005216 <_SysClk_Init+0x1ca>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a14      	ldr	r2, [pc, #80]	; (8005254 <_SysClk_Init+0x208>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d903      	bls.n	8005210 <_SysClk_Init+0x1c4>
				return _SysClk_Backup();
 8005208:	f000 f82a 	bl	8005260 <_SysClk_Backup>
 800520c:	4603      	mov	r3, r0
 800520e:	e01b      	b.n	8005248 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	f7ff fd93 	bl	8004d40 <LL_RCC_GetSysClkSource>
 800521a:	4603      	mov	r3, r0
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d1ef      	bne.n	8005200 <_SysClk_Init+0x1b4>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 8005220:	480b      	ldr	r0, [pc, #44]	; (8005250 <_SysClk_Init+0x204>)
 8005222:	f7ff fbfd 	bl	8004a20 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 8005226:	480a      	ldr	r0, [pc, #40]	; (8005250 <_SysClk_Init+0x204>)
 8005228:	f7ff fc30 	bl	8004a8c <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_EXT;
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <_SysClk_Init+0x20c>)
 800522e:	2202      	movs	r2, #2
 8005230:	701a      	strb	r2, [r3, #0]
	}

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005232:	2000      	movs	r0, #0
 8005234:	f7ff fd92 	bl	8004d5c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8005238:	2000      	movs	r0, #0
 800523a:	f7ff fda3 	bl	8004d84 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800523e:	2000      	movs	r0, #0
 8005240:	f7ff fdb4 	bl	8004dac <LL_RCC_SetAPB2Prescaler>
	return _SysClk_Src;
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <_SysClk_Init+0x20c>)
 8005246:	781b      	ldrb	r3, [r3, #0]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	09896800 	.word	0x09896800
 8005254:	00f42400 	.word	0x00f42400
 8005258:	20000a5c 	.word	0x20000a5c
 800525c:	1312d000 	.word	0x1312d000

08005260 <_SysClk_Backup>:

inline STRHAL_SysClk_Src_t _SysClk_Backup()
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8005264:	2001      	movs	r0, #1
 8005266:	f7ff fe31 	bl	8004ecc <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800526a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800526e:	f7ff fe15 	bl	8004e9c <LL_APB1_GRP1_EnableClock>

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8005272:	2000      	movs	r0, #0
 8005274:	f7ff fe7a 	bl	8004f6c <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0);
 8005278:	bf00      	nop
 800527a:	f7ff fe8b 	bl	8004f94 <LL_FLASH_GetLatency>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1fa      	bne.n	800527a <_SysClk_Backup+0x1a>

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8005284:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005288:	f7ff fe38 	bl	8004efc <LL_PWR_SetRegulVoltageScaling>
	LL_PWR_DisableRange1BoostMode();
 800528c:	f7ff fe5c 	bl	8004f48 <LL_PWR_DisableRange1BoostMode>

	LL_RCC_HSI_Enable();
 8005290:	f7ff fd08 	bl	8004ca4 <LL_RCC_HSI_Enable>
	while (!LL_RCC_HSI_IsReady());
 8005294:	bf00      	nop
 8005296:	f7ff fd15 	bl	8004cc4 <LL_RCC_HSI_IsReady>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0fa      	beq.n	8005296 <_SysClk_Backup+0x36>

	LL_RCC_HSI_SetCalibTrimming(64);
 80052a0:	2040      	movs	r0, #64	; 0x40
 80052a2:	f7ff fd23 	bl	8004cec <LL_RCC_HSI_SetCalibTrimming>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7ff fd36 	bl	8004d18 <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 80052ac:	bf00      	nop
 80052ae:	f7ff fd47 	bl	8004d40 <LL_RCC_GetSysClkSource>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d1fa      	bne.n	80052ae <_SysClk_Backup+0x4e>

	/* Set AHB prescaler*/
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7ff fd4f 	bl	8004d5c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80052be:	2000      	movs	r0, #0
 80052c0:	f7ff fd60 	bl	8004d84 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff fd71 	bl	8004dac <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(HSI_VALUE);
 80052ca:	4806      	ldr	r0, [pc, #24]	; (80052e4 <_SysClk_Backup+0x84>)
 80052cc:	f7ff fba8 	bl	8004a20 <LL_Init1msTick>
	LL_SetSystemCoreClock(HSI_VALUE);
 80052d0:	4804      	ldr	r0, [pc, #16]	; (80052e4 <_SysClk_Backup+0x84>)
 80052d2:	f7ff fbdb 	bl	8004a8c <LL_SetSystemCoreClock>

	_SysClk_Src = STRHAL_SYSCLK_SRC_BKP;
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <_SysClk_Backup+0x88>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]

	return _SysClk_Src;
 80052dc:	4b02      	ldr	r3, [pc, #8]	; (80052e8 <_SysClk_Backup+0x88>)
 80052de:	781b      	ldrb	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	20000a5c 	.word	0x20000a5c

080052ec <LL_ADC_DMA_GetRegAddr>:
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <LL_ADC_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(ADCx->DR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3340      	adds	r3, #64	; 0x40
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e00c      	b.n	800531e <LL_ADC_DMA_GetRegAddr+0x32>
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800530a:	d003      	beq.n	8005314 <LL_ADC_DMA_GetRegAddr+0x28>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <LL_ADC_DMA_GetRegAddr+0x40>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d101      	bne.n	8005318 <LL_ADC_DMA_GetRegAddr+0x2c>
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <LL_ADC_DMA_GetRegAddr+0x44>)
 8005316:	e000      	b.n	800531a <LL_ADC_DMA_GetRegAddr+0x2e>
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <LL_ADC_DMA_GetRegAddr+0x48>)
 800531a:	330c      	adds	r3, #12
 800531c:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	50000100 	.word	0x50000100
 8005330:	50000300 	.word	0x50000300
 8005334:	50000700 	.word	0x50000700

08005338 <LL_ADC_SetGainCompensation>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005348:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800534c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	2a00      	cmp	r2, #0
 8005366:	d002      	beq.n	800536e <LL_ADC_SetGainCompensation+0x36>
 8005368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800536c:	e000      	b.n	8005370 <LL_ADC_SetGainCompensation+0x38>
 800536e:	2200      	movs	r2, #0
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	611a      	str	r2, [r3, #16]
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <LL_ADC_REG_SetSequencerLength>:
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	f023 020f 	bic.w	r2, r3, #15
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <LL_ADC_REG_SetSequencerRanks>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3330      	adds	r3, #48	; 0x30
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	0a1b      	lsrs	r3, r3, #8
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	f003 030c 	and.w	r3, r3, #12
 80053c4:	4413      	add	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	211f      	movs	r1, #31
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	0e9b      	lsrs	r3, r3, #26
 80053e0:	f003 011f 	and.w	r1, r3, #31
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	431a      	orrs	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_ADC_SetChannelSamplingTime>:
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3314      	adds	r3, #20
 8005410:	461a      	mov	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	0e5b      	lsrs	r3, r3, #25
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	4413      	add	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	0d1b      	lsrs	r3, r3, #20
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	2107      	movs	r1, #7
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	401a      	ands	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	0d1b      	lsrs	r3, r3, #20
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	431a      	orrs	r2, r3
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	601a      	str	r2, [r3, #0]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <LL_ADC_SetChannelSingleDiff>:
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10a      	bne.n	8005482 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005478:	431a      	orrs	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005480:	e00a      	b.n	8005498 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548e:	43db      	mvns	r3, r3
 8005490:	401a      	ands	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	407f0000 	.word	0x407f0000

080054a8 <LL_ADC_SetOverSamplingScope>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_ADC_DisableDeepPowerDown>:
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80054e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6093      	str	r3, [r2, #8]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <LL_ADC_EnableInternalRegulator>:
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005506:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800550a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <LL_ADC_Enable>:
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800552e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	609a      	str	r2, [r3, #8]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005562:	4313      	orrs	r3, r2
 8005564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558c:	d101      	bne.n	8005592 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055b4:	f043 0204 	orr.w	r2, r3, #4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <LL_AHB1_GRP1_EnableClock>:
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055fc:	4907      	ldr	r1, [pc, #28]	; (800561c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4313      	orrs	r3, r2
 8005602:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4013      	ands	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40021000 	.word	0x40021000

08005620 <LL_AHB2_GRP1_EnableClock>:
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005628:	4b08      	ldr	r3, [pc, #32]	; (800564c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800562a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800562c:	4907      	ldr	r1, [pc, #28]	; (800564c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4313      	orrs	r3, r2
 8005632:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4013      	ands	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800563e:	68fb      	ldr	r3, [r7, #12]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40021000 	.word	0x40021000

08005650 <LL_DMA_EnableChannel>:
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800565e:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <LL_DMA_EnableChannel+0x40>)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	4413      	add	r3, r2
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4908      	ldr	r1, [pc, #32]	; (8005690 <LL_DMA_EnableChannel+0x40>)
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	440a      	add	r2, r1
 8005674:	7812      	ldrb	r2, [r2, #0]
 8005676:	4611      	mov	r1, r2
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	440a      	add	r2, r1
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	6013      	str	r3, [r2, #0]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	08009264 	.word	0x08009264

08005694 <LL_DMA_IsEnabledChannel>:
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <LL_DMA_IsEnabledChannel+0x38>)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <LL_DMA_IsEnabledChannel+0x2a>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <LL_DMA_IsEnabledChannel+0x2c>
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	08009264 	.word	0x08009264

080056d0 <LL_DMA_SetDataLength>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <LL_DMA_SetDataLength+0x48>)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4413      	add	r3, r2
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	4908      	ldr	r1, [pc, #32]	; (8005718 <LL_DMA_SetDataLength+0x48>)
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	440a      	add	r2, r1
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	4611      	mov	r1, r2
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	4611      	mov	r1, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	08009264 	.word	0x08009264

0800571c <LL_RCC_SetADCClockSource>:
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8005724:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <LL_RCC_SetADCClockSource+0x44>)
 8005726:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2103      	movs	r1, #3
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	401a      	ands	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	b2d9      	uxtb	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	4904      	ldr	r1, [pc, #16]	; (8005760 <LL_RCC_SetADCClockSource+0x44>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40021000 	.word	0x40021000

08005764 <STRHAL_ADC_RegInit>:
} adc1_buf, adc2_buf, adc3_buf, adc4_buf, adc5_buf;

static volatile uint64_t STRHAL_ADC_ChannelState[2] = { 0, 0 };

static void STRHAL_ADC_RegInit(ADC_TypeDef *ADCx)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	LL_ADC_InitTypeDef ADC_InitStruct =
 800576c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	609a      	str	r2, [r3, #8]
	{ 0 };
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct =
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_InitStruct.Resolution = STRHAL_ADC_RESOLUTION;
 800578a:	2300      	movs	r3, #0
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800578e:	2300      	movs	r3, #0
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_Init(ADCx, &ADC_InitStruct);
 8005796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fd fceb 	bl	8003178 <LL_ADC_Init>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80057ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057b2:	61bb      	str	r3, [r7, #24]
	//ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80057b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057b8:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80057ba:	2303      	movs	r3, #3
 80057bc:	61fb      	str	r3, [r7, #28]
	LL_ADC_REG_Init(ADCx, &ADC_REG_InitStruct);
 80057be:	f107 030c 	add.w	r3, r7, #12
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fd fcfd 	bl	80031c4 <LL_ADC_REG_Init>
	LL_ADC_SetGainCompensation(ADCx, 0);
 80057ca:	2100      	movs	r1, #0
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fdb3 	bl	8005338 <LL_ADC_SetGainCompensation>
	LL_ADC_SetOverSamplingScope(ADCx, LL_ADC_OVS_DISABLE);
 80057d2:	2100      	movs	r1, #0
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fe67 	bl	80054a8 <LL_ADC_SetOverSamplingScope>
	LL_ADC_DisableDeepPowerDown(ADCx);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fe79 	bl	80054d2 <LL_ADC_DisableDeepPowerDown>
}
 80057e0:	bf00      	nop
 80057e2:	3730      	adds	r7, #48	; 0x30
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <STRHAL_ADC_DmaInit>:

static void STRHAL_ADC_DmaInit(DMA_TypeDef *DMAx, uint32_t dmaChannel, uint32_t dest, uint32_t src, uint32_t periph)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b090      	sub	sp, #64	; 0x40
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
	LL_DMA_InitTypeDef DMA_InitStruct =
 80057f6:	f107 0314 	add.w	r3, r7, #20
 80057fa:	222c      	movs	r2, #44	; 0x2c
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f003 fb14 	bl	8008e2c <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.MemoryOrM2MDstAddress = dest;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_HALFWORD;
 800580c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005810:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8005812:	2380      	movs	r3, #128	; 0x80
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 8005816:	2320      	movs	r3, #32
 8005818:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.NbData = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStruct.PeriphOrM2MSrcAddress = src;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_HALFWORD;
 8005822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8005828:	2300      	movs	r3, #0
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.PeriphRequest = periph;
 800582c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582e:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStruct.Priority = STRHAL_ADC_DMA_PRIORITY;
 8005830:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c

	LL_DMA_Init(DMAx, dmaChannel, &DMA_InitStruct);
 8005836:	f107 0314 	add.w	r3, r7, #20
 800583a:	461a      	mov	r2, r3
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7fd fdb6 	bl	80033b0 <LL_DMA_Init>
}
 8005844:	bf00      	nop
 8005846:	3740      	adds	r7, #64	; 0x40
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <STRHAL_ADC_Calibrate>:

static void STRHAL_ADC_Calibrate()
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
	LL_ADC_EnableInternalRegulator(ADC1);
 8005850:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005854:	f7ff fe4f 	bl	80054f6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8005858:	2064      	movs	r0, #100	; 0x64
 800585a:	f7ff f8ef 	bl	8004a3c <LL_mDelay>
	LL_ADC_StartCalibration(ADC1, STRHAL_ADC_SINGLEDIFF);
 800585e:	217f      	movs	r1, #127	; 0x7f
 8005860:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005864:	f7ff fe6f 	bl	8005546 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8005868:	bf00      	nop
 800586a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800586e:	f7ff fe83 	bl	8005578 <LL_ADC_IsCalibrationOnGoing>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f8      	bne.n	800586a <STRHAL_ADC_Calibrate+0x1e>

	LL_ADC_EnableInternalRegulator(ADC2);
 8005878:	4823      	ldr	r0, [pc, #140]	; (8005908 <STRHAL_ADC_Calibrate+0xbc>)
 800587a:	f7ff fe3c 	bl	80054f6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 800587e:	2064      	movs	r0, #100	; 0x64
 8005880:	f7ff f8dc 	bl	8004a3c <LL_mDelay>
	LL_ADC_StartCalibration(ADC2, STRHAL_ADC_SINGLEDIFF);
 8005884:	217f      	movs	r1, #127	; 0x7f
 8005886:	4820      	ldr	r0, [pc, #128]	; (8005908 <STRHAL_ADC_Calibrate+0xbc>)
 8005888:	f7ff fe5d 	bl	8005546 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC2));
 800588c:	bf00      	nop
 800588e:	481e      	ldr	r0, [pc, #120]	; (8005908 <STRHAL_ADC_Calibrate+0xbc>)
 8005890:	f7ff fe72 	bl	8005578 <LL_ADC_IsCalibrationOnGoing>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f9      	bne.n	800588e <STRHAL_ADC_Calibrate+0x42>

	LL_ADC_EnableInternalRegulator(ADC3);
 800589a:	481c      	ldr	r0, [pc, #112]	; (800590c <STRHAL_ADC_Calibrate+0xc0>)
 800589c:	f7ff fe2b 	bl	80054f6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 80058a0:	2064      	movs	r0, #100	; 0x64
 80058a2:	f7ff f8cb 	bl	8004a3c <LL_mDelay>
	LL_ADC_StartCalibration(ADC3, STRHAL_ADC_SINGLEDIFF);
 80058a6:	217f      	movs	r1, #127	; 0x7f
 80058a8:	4818      	ldr	r0, [pc, #96]	; (800590c <STRHAL_ADC_Calibrate+0xc0>)
 80058aa:	f7ff fe4c 	bl	8005546 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC3));
 80058ae:	bf00      	nop
 80058b0:	4816      	ldr	r0, [pc, #88]	; (800590c <STRHAL_ADC_Calibrate+0xc0>)
 80058b2:	f7ff fe61 	bl	8005578 <LL_ADC_IsCalibrationOnGoing>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f9      	bne.n	80058b0 <STRHAL_ADC_Calibrate+0x64>

	LL_ADC_EnableInternalRegulator(ADC4);
 80058bc:	4814      	ldr	r0, [pc, #80]	; (8005910 <STRHAL_ADC_Calibrate+0xc4>)
 80058be:	f7ff fe1a 	bl	80054f6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 80058c2:	2064      	movs	r0, #100	; 0x64
 80058c4:	f7ff f8ba 	bl	8004a3c <LL_mDelay>
	LL_ADC_StartCalibration(ADC4, STRHAL_ADC_SINGLEDIFF);
 80058c8:	217f      	movs	r1, #127	; 0x7f
 80058ca:	4811      	ldr	r0, [pc, #68]	; (8005910 <STRHAL_ADC_Calibrate+0xc4>)
 80058cc:	f7ff fe3b 	bl	8005546 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC4));
 80058d0:	bf00      	nop
 80058d2:	480f      	ldr	r0, [pc, #60]	; (8005910 <STRHAL_ADC_Calibrate+0xc4>)
 80058d4:	f7ff fe50 	bl	8005578 <LL_ADC_IsCalibrationOnGoing>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f9      	bne.n	80058d2 <STRHAL_ADC_Calibrate+0x86>

	LL_ADC_EnableInternalRegulator(ADC5);
 80058de:	480d      	ldr	r0, [pc, #52]	; (8005914 <STRHAL_ADC_Calibrate+0xc8>)
 80058e0:	f7ff fe09 	bl	80054f6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 80058e4:	2064      	movs	r0, #100	; 0x64
 80058e6:	f7ff f8a9 	bl	8004a3c <LL_mDelay>
	LL_ADC_StartCalibration(ADC5, STRHAL_ADC_SINGLEDIFF);
 80058ea:	217f      	movs	r1, #127	; 0x7f
 80058ec:	4809      	ldr	r0, [pc, #36]	; (8005914 <STRHAL_ADC_Calibrate+0xc8>)
 80058ee:	f7ff fe2a 	bl	8005546 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC5));
 80058f2:	bf00      	nop
 80058f4:	4807      	ldr	r0, [pc, #28]	; (8005914 <STRHAL_ADC_Calibrate+0xc8>)
 80058f6:	f7ff fe3f 	bl	8005578 <LL_ADC_IsCalibrationOnGoing>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f9      	bne.n	80058f4 <STRHAL_ADC_Calibrate+0xa8>
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	50000100 	.word	0x50000100
 800590c:	50000400 	.word	0x50000400
 8005910:	50000500 	.word	0x50000500
 8005914:	50000600 	.word	0x50000600

08005918 <STRHAL_ADC_Init>:

void STRHAL_ADC_Init()
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af02      	add	r7, sp, #8
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
	}
	else if (STRHAL_ADC_DMA == DMA2)
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800591e:	2002      	movs	r0, #2
 8005920:	f7ff fe66 	bl	80055f0 <LL_AHB1_GRP1_EnableClock>
	}

	LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8005924:	4846      	ldr	r0, [pc, #280]	; (8005a40 <STRHAL_ADC_Init+0x128>)
 8005926:	f7ff fef9 	bl	800571c <LL_RCC_SetADCClockSource>
	LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 800592a:	4846      	ldr	r0, [pc, #280]	; (8005a44 <STRHAL_ADC_Init+0x12c>)
 800592c:	f7ff fef6 	bl	800571c <LL_RCC_SetADCClockSource>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8005930:	2004      	movs	r0, #4
 8005932:	f7ff fe5d 	bl	80055f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8005936:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800593a:	f7ff fe71 	bl	8005620 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 800593e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005942:	f7ff fe6d 	bl	8005620 <LL_AHB2_GRP1_EnableClock>

	//Init DMA for ADC123
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL, (uint32_t) adc1_buf.data, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC1);
 8005946:	4c40      	ldr	r4, [pc, #256]	; (8005a48 <STRHAL_ADC_Init+0x130>)
 8005948:	2100      	movs	r1, #0
 800594a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800594e:	f7ff fccd 	bl	80052ec <LL_ADC_DMA_GetRegAddr>
 8005952:	4603      	mov	r3, r0
 8005954:	2205      	movs	r2, #5
 8005956:	9200      	str	r2, [sp, #0]
 8005958:	4622      	mov	r2, r4
 800595a:	2100      	movs	r1, #0
 800595c:	483b      	ldr	r0, [pc, #236]	; (8005a4c <STRHAL_ADC_Init+0x134>)
 800595e:	f7ff ff43 	bl	80057e8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1, (uint32_t) adc2_buf.data, LL_ADC_DMA_GetRegAddr(ADC2, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC2);
 8005962:	4c3b      	ldr	r4, [pc, #236]	; (8005a50 <STRHAL_ADC_Init+0x138>)
 8005964:	2100      	movs	r1, #0
 8005966:	483b      	ldr	r0, [pc, #236]	; (8005a54 <STRHAL_ADC_Init+0x13c>)
 8005968:	f7ff fcc0 	bl	80052ec <LL_ADC_DMA_GetRegAddr>
 800596c:	4603      	mov	r3, r0
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	9200      	str	r2, [sp, #0]
 8005972:	4622      	mov	r2, r4
 8005974:	2101      	movs	r1, #1
 8005976:	4835      	ldr	r0, [pc, #212]	; (8005a4c <STRHAL_ADC_Init+0x134>)
 8005978:	f7ff ff36 	bl	80057e8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2, (uint32_t) adc3_buf.data, LL_ADC_DMA_GetRegAddr(ADC3, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC3);
 800597c:	4c36      	ldr	r4, [pc, #216]	; (8005a58 <STRHAL_ADC_Init+0x140>)
 800597e:	2100      	movs	r1, #0
 8005980:	4836      	ldr	r0, [pc, #216]	; (8005a5c <STRHAL_ADC_Init+0x144>)
 8005982:	f7ff fcb3 	bl	80052ec <LL_ADC_DMA_GetRegAddr>
 8005986:	4603      	mov	r3, r0
 8005988:	2225      	movs	r2, #37	; 0x25
 800598a:	9200      	str	r2, [sp, #0]
 800598c:	4622      	mov	r2, r4
 800598e:	2102      	movs	r1, #2
 8005990:	482e      	ldr	r0, [pc, #184]	; (8005a4c <STRHAL_ADC_Init+0x134>)
 8005992:	f7ff ff29 	bl	80057e8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3, (uint32_t) adc4_buf.data, LL_ADC_DMA_GetRegAddr(ADC4, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC4);
 8005996:	4c32      	ldr	r4, [pc, #200]	; (8005a60 <STRHAL_ADC_Init+0x148>)
 8005998:	2100      	movs	r1, #0
 800599a:	4832      	ldr	r0, [pc, #200]	; (8005a64 <STRHAL_ADC_Init+0x14c>)
 800599c:	f7ff fca6 	bl	80052ec <LL_ADC_DMA_GetRegAddr>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2226      	movs	r2, #38	; 0x26
 80059a4:	9200      	str	r2, [sp, #0]
 80059a6:	4622      	mov	r2, r4
 80059a8:	2103      	movs	r1, #3
 80059aa:	4828      	ldr	r0, [pc, #160]	; (8005a4c <STRHAL_ADC_Init+0x134>)
 80059ac:	f7ff ff1c 	bl	80057e8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4, (uint32_t) adc5_buf.data, LL_ADC_DMA_GetRegAddr(ADC5, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC5);
 80059b0:	4c2d      	ldr	r4, [pc, #180]	; (8005a68 <STRHAL_ADC_Init+0x150>)
 80059b2:	2100      	movs	r1, #0
 80059b4:	482d      	ldr	r0, [pc, #180]	; (8005a6c <STRHAL_ADC_Init+0x154>)
 80059b6:	f7ff fc99 	bl	80052ec <LL_ADC_DMA_GetRegAddr>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2227      	movs	r2, #39	; 0x27
 80059be:	9200      	str	r2, [sp, #0]
 80059c0:	4622      	mov	r2, r4
 80059c2:	2104      	movs	r1, #4
 80059c4:	4821      	ldr	r0, [pc, #132]	; (8005a4c <STRHAL_ADC_Init+0x134>)
 80059c6:	f7ff ff0f 	bl	80057e8 <STRHAL_ADC_DmaInit>

	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct =
 80059ca:	463b      	mov	r3, r7
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	60da      	str	r2, [r3, #12]
	{ 0 };

	ADC_CommonInitStruct.CommonClock = STRHAL_ADC_COMMONCLOCK;
 80059d6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80059da:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80059dc:	2300      	movs	r3, #0
 80059de:	607b      	str	r3, [r7, #4]
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80059e0:	463b      	mov	r3, r7
 80059e2:	4619      	mov	r1, r3
 80059e4:	4822      	ldr	r0, [pc, #136]	; (8005a70 <STRHAL_ADC_Init+0x158>)
 80059e6:	f7fd fb63 	bl	80030b0 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 80059ea:	463b      	mov	r3, r7
 80059ec:	4619      	mov	r1, r3
 80059ee:	4820      	ldr	r0, [pc, #128]	; (8005a70 <STRHAL_ADC_Init+0x158>)
 80059f0:	f7fd fb5e 	bl	80030b0 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80059f4:	463b      	mov	r3, r7
 80059f6:	4619      	mov	r1, r3
 80059f8:	481e      	ldr	r0, [pc, #120]	; (8005a74 <STRHAL_ADC_Init+0x15c>)
 80059fa:	f7fd fb59 	bl	80030b0 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC4), &ADC_CommonInitStruct);
 80059fe:	463b      	mov	r3, r7
 8005a00:	4619      	mov	r1, r3
 8005a02:	481c      	ldr	r0, [pc, #112]	; (8005a74 <STRHAL_ADC_Init+0x15c>)
 8005a04:	f7fd fb54 	bl	80030b0 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 8005a08:	463b      	mov	r3, r7
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4819      	ldr	r0, [pc, #100]	; (8005a74 <STRHAL_ADC_Init+0x15c>)
 8005a0e:	f7fd fb4f 	bl	80030b0 <LL_ADC_CommonInit>

	STRHAL_ADC_RegInit(ADC1);
 8005a12:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005a16:	f7ff fea5 	bl	8005764 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC2);
 8005a1a:	480e      	ldr	r0, [pc, #56]	; (8005a54 <STRHAL_ADC_Init+0x13c>)
 8005a1c:	f7ff fea2 	bl	8005764 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC3);
 8005a20:	480e      	ldr	r0, [pc, #56]	; (8005a5c <STRHAL_ADC_Init+0x144>)
 8005a22:	f7ff fe9f 	bl	8005764 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC4);
 8005a26:	480f      	ldr	r0, [pc, #60]	; (8005a64 <STRHAL_ADC_Init+0x14c>)
 8005a28:	f7ff fe9c 	bl	8005764 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC5);
 8005a2c:	480f      	ldr	r0, [pc, #60]	; (8005a6c <STRHAL_ADC_Init+0x154>)
 8005a2e:	f7ff fe99 	bl	8005764 <STRHAL_ADC_RegInit>

	STRHAL_ADC_Calibrate();
 8005a32:	f7ff ff0b 	bl	800584c <STRHAL_ADC_Calibrate>
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd90      	pop	{r4, r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	001c0002 	.word	0x001c0002
 8005a44:	001e0002 	.word	0x001e0002
 8005a48:	20000a68 	.word	0x20000a68
 8005a4c:	40020400 	.word	0x40020400
 8005a50:	20000a94 	.word	0x20000a94
 8005a54:	50000100 	.word	0x50000100
 8005a58:	20000ac0 	.word	0x20000ac0
 8005a5c:	50000400 	.word	0x50000400
 8005a60:	20000aec 	.word	0x20000aec
 8005a64:	50000500 	.word	0x50000500
 8005a68:	20000b18 	.word	0x20000b18
 8005a6c:	50000600 	.word	0x50000600
 8005a70:	50000300 	.word	0x50000300
 8005a74:	50000700 	.word	0x50000700

08005a78 <STRHAL_ADC_SubscribeChannel>:

STRHAL_ADC_Data_t* STRHAL_ADC_SubscribeChannel(STRHAL_ADC_Channel_t *channel, STRHAL_ADC_InType_t type)
{
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	b0a1      	sub	sp, #132	; 0x84
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6378      	str	r0, [r7, #52]	; 0x34
 8005a82:	460b      	mov	r3, r1
 8005a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	STRHAL_ADC_AnalogPin_t analogPin;
	STRHAL_ADC_Data_t *data_ptr = NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t *length_ptr = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t dmaChannel = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	677b      	str	r3, [r7, #116]	; 0x74
	uint64_t adcChannelMsk[2] = { 0, 0 };
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	if (channel->ADCx == ADC1)
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ab4:	d11c      	bne.n	8005af0 <STRHAL_ADC_SubscribeChannel+0x78>
	{
		analogPin = gpioMapping[0][channel->channelId];
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab8:	791b      	ldrb	r3, [r3, #4]
 8005aba:	4aa3      	ldr	r2, [pc, #652]	; (8005d48 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	4413      	add	r3, r2
 8005ac0:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8005ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc1_buf.data;
 8005aca:	4ba0      	ldr	r3, [pc, #640]	; (8005d4c <STRHAL_ADC_SubscribeChannel+0x2d4>)
 8005acc:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc1_buf.length;
 8005ace:	4ba0      	ldr	r3, [pc, #640]	; (8005d50 <STRHAL_ADC_SubscribeChannel+0x2d8>)
 8005ad0:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[0] = (1U) << (channel->channelId);
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad8:	791b      	ldrb	r3, [r3, #4]
 8005ada:	461a      	mov	r2, r3
 8005adc:	2301      	movs	r3, #1
 8005ade:	4093      	lsls	r3, r2
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ae6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005aea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8005aee:	e091      	b.n	8005c14 <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC2)
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4b97      	ldr	r3, [pc, #604]	; (8005d54 <STRHAL_ADC_SubscribeChannel+0x2dc>)
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d11e      	bne.n	8005b38 <STRHAL_ADC_SubscribeChannel+0xc0>
	{
		analogPin = gpioMapping[1][channel->channelId];
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	791b      	ldrb	r3, [r3, #4]
 8005afe:	4a92      	ldr	r2, [pc, #584]	; (8005d48 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8005b00:	3313      	adds	r3, #19
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	4413      	add	r3, r2
 8005b06:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8005b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc2_buf.data;
 8005b10:	4b91      	ldr	r3, [pc, #580]	; (8005d58 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 8005b12:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc2_buf.length;
 8005b14:	4b91      	ldr	r3, [pc, #580]	; (8005d5c <STRHAL_ADC_SubscribeChannel+0x2e4>)
 8005b16:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 1;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[0] = (1U) << (STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	791b      	ldrb	r3, [r3, #4]
 8005b20:	3313      	adds	r3, #19
 8005b22:	2201      	movs	r2, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	2200      	movs	r2, #0
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b2e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005b32:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8005b36:	e06d      	b.n	8005c14 <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC3)
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4b88      	ldr	r3, [pc, #544]	; (8005d60 <STRHAL_ADC_SubscribeChannel+0x2e8>)
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d11e      	bne.n	8005b80 <STRHAL_ADC_SubscribeChannel+0x108>
	{
		analogPin = gpioMapping[2][channel->channelId];
 8005b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b44:	791b      	ldrb	r3, [r3, #4]
 8005b46:	4a80      	ldr	r2, [pc, #512]	; (8005d48 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8005b48:	3326      	adds	r3, #38	; 0x26
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8005b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc3_buf.data;
 8005b58:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <STRHAL_ADC_SubscribeChannel+0x2ec>)
 8005b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc3_buf.length;
 8005b5c:	4b82      	ldr	r3, [pc, #520]	; (8005d68 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 8005b5e:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 2;
 8005b60:	2302      	movs	r3, #2
 8005b62:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[0] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	791b      	ldrb	r3, [r3, #4]
 8005b68:	3326      	adds	r3, #38	; 0x26
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	2200      	movs	r2, #0
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	61fa      	str	r2, [r7, #28]
 8005b76:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005b7a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8005b7e:	e049      	b.n	8005c14 <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC4)
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a79      	ldr	r2, [pc, #484]	; (8005d6c <STRHAL_ADC_SubscribeChannel+0x2f4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d11e      	bne.n	8005bc8 <STRHAL_ADC_SubscribeChannel+0x150>
	{
		analogPin = gpioMapping[3][channel->channelId];
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	791b      	ldrb	r3, [r3, #4]
 8005b8e:	4a6e      	ldr	r2, [pc, #440]	; (8005d48 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8005b90:	3339      	adds	r3, #57	; 0x39
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	4413      	add	r3, r2
 8005b96:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8005b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc4_buf.data;
 8005ba0:	4b73      	ldr	r3, [pc, #460]	; (8005d70 <STRHAL_ADC_SubscribeChannel+0x2f8>)
 8005ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc4_buf.length;
 8005ba4:	4b73      	ldr	r3, [pc, #460]	; (8005d74 <STRHAL_ADC_SubscribeChannel+0x2fc>)
 8005ba6:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 3;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 8005bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bae:	791b      	ldrb	r3, [r3, #4]
 8005bb0:	3326      	adds	r3, #38	; 0x26
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	2200      	movs	r2, #0
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	617a      	str	r2, [r7, #20]
 8005bbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005bc2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8005bc6:	e025      	b.n	8005c14 <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC5)
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6a      	ldr	r2, [pc, #424]	; (8005d78 <STRHAL_ADC_SubscribeChannel+0x300>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d11e      	bne.n	8005c10 <STRHAL_ADC_SubscribeChannel+0x198>
	{
		analogPin = gpioMapping[4][channel->channelId];
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	4a5c      	ldr	r2, [pc, #368]	; (8005d48 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8005bd8:	334c      	adds	r3, #76	; 0x4c
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	4413      	add	r3, r2
 8005bde:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8005be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc5_buf.data;
 8005be8:	4b64      	ldr	r3, [pc, #400]	; (8005d7c <STRHAL_ADC_SubscribeChannel+0x304>)
 8005bea:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc5_buf.length;
 8005bec:	4b64      	ldr	r3, [pc, #400]	; (8005d80 <STRHAL_ADC_SubscribeChannel+0x308>)
 8005bee:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 4;
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	791b      	ldrb	r3, [r3, #4]
 8005bf8:	3326      	adds	r3, #38	; 0x26
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	2200      	movs	r2, #0
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	60fa      	str	r2, [r7, #12]
 8005c06:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005c0a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8005c0e:	e001      	b.n	8005c14 <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else
	{
		return NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e094      	b.n	8005d3e <STRHAL_ADC_SubscribeChannel+0x2c6>
	}

	// wrong input type passed
	if (analogPin.type != type)
 8005c14:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8005c18:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <STRHAL_ADC_SubscribeChannel+0x1ac>
	{
		return NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e08c      	b.n	8005d3e <STRHAL_ADC_SubscribeChannel+0x2c6>
	}

	// channel already initialized
	if ((STRHAL_ADC_ChannelState[0] & adcChannelMsk[0]) && (STRHAL_ADC_ChannelState[1] & adcChannelMsk[1]))
 8005c24:	4b57      	ldr	r3, [pc, #348]	; (8005d84 <STRHAL_ADC_SubscribeChannel+0x30c>)
 8005c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c2e:	ea00 0a02 	and.w	sl, r0, r2
 8005c32:	ea01 0b03 	and.w	fp, r1, r3
 8005c36:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c3a:	d00d      	beq.n	8005c58 <STRHAL_ADC_SubscribeChannel+0x1e0>
 8005c3c:	4b51      	ldr	r3, [pc, #324]	; (8005d84 <STRHAL_ADC_SubscribeChannel+0x30c>)
 8005c3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c46:	ea00 0802 	and.w	r8, r0, r2
 8005c4a:	ea01 0903 	and.w	r9, r1, r3
 8005c4e:	ea58 0309 	orrs.w	r3, r8, r9
 8005c52:	d001      	beq.n	8005c58 <STRHAL_ADC_SubscribeChannel+0x1e0>
	{
		return NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e072      	b.n	8005d3e <STRHAL_ADC_SubscribeChannel+0x2c6>
	}

	STRHAL_ADC_ChannelState[0] |= adcChannelMsk[0];
 8005c58:	4b4a      	ldr	r3, [pc, #296]	; (8005d84 <STRHAL_ADC_SubscribeChannel+0x30c>)
 8005c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c62:	ea40 0402 	orr.w	r4, r0, r2
 8005c66:	603c      	str	r4, [r7, #0]
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	4b45      	ldr	r3, [pc, #276]	; (8005d84 <STRHAL_ADC_SubscribeChannel+0x30c>)
 8005c6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c72:	e9c3 1200 	strd	r1, r2, [r3]
	STRHAL_ADC_ChannelState[1] |= adcChannelMsk[1];
 8005c76:	4b43      	ldr	r3, [pc, #268]	; (8005d84 <STRHAL_ADC_SubscribeChannel+0x30c>)
 8005c78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005c7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c80:	ea40 0502 	orr.w	r5, r0, r2
 8005c84:	ea41 0603 	orr.w	r6, r1, r3
 8005c88:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <STRHAL_ADC_SubscribeChannel+0x30c>)
 8005c8a:	e9c3 5602 	strd	r5, r6, [r3, #8]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8005c8e:	2004      	movs	r0, #4
 8005c90:	f7ff fcc6 	bl	8005620 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8005c94:	2020      	movs	r0, #32
 8005c96:	f7ff fcc3 	bl	8005620 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f7ff fcc0 	bl	8005620 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005ca0:	2002      	movs	r0, #2
 8005ca2:	f7ff fcbd 	bl	8005620 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8005ca6:	2010      	movs	r0, #16
 8005ca8:	f7ff fcba 	bl	8005620 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8005cac:	2008      	movs	r0, #8
 8005cae:	f7ff fcb7 	bl	8005620 <LL_AHB2_GRP1_EnableClock>

	if (type == STRHAL_ADC_INTYPE_REGULAR)
 8005cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d115      	bne.n	8005ce6 <STRHAL_ADC_SubscribeChannel+0x26e>
	{
		LL_GPIO_InitTypeDef GPIO_InitStruct =
 8005cba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	609a      	str	r2, [r3, #8]
 8005cc6:	60da      	str	r2, [r3, #12]
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	615a      	str	r2, [r3, #20]
		{ 0 };

		GPIO_InitStruct.Pin = analogPin.pin;
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	64bb      	str	r3, [r7, #72]	; 0x48
		LL_GPIO_Init(analogPin.port, &GPIO_InitStruct);
 8005cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fd fcf0 	bl	80036c6 <LL_GPIO_Init>
	}

	LL_ADC_SetChannelSamplingTime(channel->ADCx, analogPin.channel, STRHAL_ADC_CHANNEL_SAMPLINGTIME);
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005cec:	2206      	movs	r2, #6
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fb86 	bl	8005400 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(channel->ADCx, analogPin.channel, STRHAL_ADC_SINGLEDIFF);
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005cfa:	227f      	movs	r2, #127	; 0x7f
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fbab 	bl	8005458 <LL_ADC_SetChannelSingleDiff>

	LL_ADC_REG_SetSequencerRanks(channel->ADCx, adcRanks[*length_ptr], analogPin.channel);
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <STRHAL_ADC_SubscribeChannel+0x310>)
 8005d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d12:	4619      	mov	r1, r3
 8005d14:	f7ff fb48 	bl	80053a8 <LL_ADC_REG_SetSequencerRanks>
	uint32_t length = *length_ptr;
 8005d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	673b      	str	r3, [r7, #112]	; 0x70
	LL_DMA_SetDataLength(STRHAL_ADC_DMA, dmaChannel, length + 1);
 8005d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d20:	3301      	adds	r3, #1
 8005d22:	461a      	mov	r2, r3
 8005d24:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005d26:	4819      	ldr	r0, [pc, #100]	; (8005d8c <STRHAL_ADC_SubscribeChannel+0x314>)
 8005d28:	f7ff fcd2 	bl	80056d0 <LL_DMA_SetDataLength>
	(*length_ptr)++;
 8005d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d34:	601a      	str	r2, [r3, #0]
	return &data_ptr[length];
 8005d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d3c:	4413      	add	r3, r2
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3784      	adds	r7, #132	; 0x84
 8005d42:	46bd      	mov	sp, r7
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	080092ec 	.word	0x080092ec
 8005d4c:	20000a68 	.word	0x20000a68
 8005d50:	20000a90 	.word	0x20000a90
 8005d54:	50000100 	.word	0x50000100
 8005d58:	20000a94 	.word	0x20000a94
 8005d5c:	20000abc 	.word	0x20000abc
 8005d60:	50000400 	.word	0x50000400
 8005d64:	20000ac0 	.word	0x20000ac0
 8005d68:	20000ae8 	.word	0x20000ae8
 8005d6c:	50000500 	.word	0x50000500
 8005d70:	20000aec 	.word	0x20000aec
 8005d74:	20000b14 	.word	0x20000b14
 8005d78:	50000600 	.word	0x50000600
 8005d7c:	20000b18 	.word	0x20000b18
 8005d80:	20000b40 	.word	0x20000b40
 8005d84:	20000b48 	.word	0x20000b48
 8005d88:	0800926c 	.word	0x0800926c
 8005d8c:	40020400 	.word	0x40020400

08005d90 <STRHAL_ADC_Run>:

void STRHAL_ADC_Run()
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerLength(ADC1, adcSeqRanks[adc1_buf.length - 1]);
 8005d94:	4b5a      	ldr	r3, [pc, #360]	; (8005f00 <STRHAL_ADC_Run+0x170>)
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4a5a      	ldr	r2, [pc, #360]	; (8005f04 <STRHAL_ADC_Run+0x174>)
 8005d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da0:	4619      	mov	r1, r3
 8005da2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005da6:	f7ff faec 	bl	8005382 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC2, adcSeqRanks[adc2_buf.length - 1]);
 8005daa:	4b57      	ldr	r3, [pc, #348]	; (8005f08 <STRHAL_ADC_Run+0x178>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	3b01      	subs	r3, #1
 8005db0:	4a54      	ldr	r2, [pc, #336]	; (8005f04 <STRHAL_ADC_Run+0x174>)
 8005db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db6:	4619      	mov	r1, r3
 8005db8:	4854      	ldr	r0, [pc, #336]	; (8005f0c <STRHAL_ADC_Run+0x17c>)
 8005dba:	f7ff fae2 	bl	8005382 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC3, adcSeqRanks[adc3_buf.length - 1]);
 8005dbe:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <STRHAL_ADC_Run+0x180>)
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	4a4f      	ldr	r2, [pc, #316]	; (8005f04 <STRHAL_ADC_Run+0x174>)
 8005dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4851      	ldr	r0, [pc, #324]	; (8005f14 <STRHAL_ADC_Run+0x184>)
 8005dce:	f7ff fad8 	bl	8005382 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC4, adcSeqRanks[adc4_buf.length - 1]);
 8005dd2:	4b51      	ldr	r3, [pc, #324]	; (8005f18 <STRHAL_ADC_Run+0x188>)
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	4a4a      	ldr	r2, [pc, #296]	; (8005f04 <STRHAL_ADC_Run+0x174>)
 8005dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dde:	4619      	mov	r1, r3
 8005de0:	484e      	ldr	r0, [pc, #312]	; (8005f1c <STRHAL_ADC_Run+0x18c>)
 8005de2:	f7ff face 	bl	8005382 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC5, adcSeqRanks[adc5_buf.length - 1]);
 8005de6:	4b4e      	ldr	r3, [pc, #312]	; (8005f20 <STRHAL_ADC_Run+0x190>)
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	3b01      	subs	r3, #1
 8005dec:	4a45      	ldr	r2, [pc, #276]	; (8005f04 <STRHAL_ADC_Run+0x174>)
 8005dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df2:	4619      	mov	r1, r3
 8005df4:	484b      	ldr	r0, [pc, #300]	; (8005f24 <STRHAL_ADC_Run+0x194>)
 8005df6:	f7ff fac4 	bl	8005382 <LL_ADC_REG_SetSequencerLength>

	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL);
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	484a      	ldr	r0, [pc, #296]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005dfe:	f7ff fc27 	bl	8005650 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL));
 8005e02:	bf00      	nop
 8005e04:	2100      	movs	r1, #0
 8005e06:	4848      	ldr	r0, [pc, #288]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e08:	f7ff fc44 	bl	8005694 <LL_DMA_IsEnabledChannel>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0f8      	beq.n	8005e04 <STRHAL_ADC_Run+0x74>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1);
 8005e12:	2101      	movs	r1, #1
 8005e14:	4844      	ldr	r0, [pc, #272]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e16:	f7ff fc1b 	bl	8005650 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1));
 8005e1a:	bf00      	nop
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4842      	ldr	r0, [pc, #264]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e20:	f7ff fc38 	bl	8005694 <LL_DMA_IsEnabledChannel>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f8      	beq.n	8005e1c <STRHAL_ADC_Run+0x8c>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2);
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	483e      	ldr	r0, [pc, #248]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e2e:	f7ff fc0f 	bl	8005650 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2));
 8005e32:	bf00      	nop
 8005e34:	2102      	movs	r1, #2
 8005e36:	483c      	ldr	r0, [pc, #240]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e38:	f7ff fc2c 	bl	8005694 <LL_DMA_IsEnabledChannel>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f8      	beq.n	8005e34 <STRHAL_ADC_Run+0xa4>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3);
 8005e42:	2103      	movs	r1, #3
 8005e44:	4838      	ldr	r0, [pc, #224]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e46:	f7ff fc03 	bl	8005650 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3));
 8005e4a:	bf00      	nop
 8005e4c:	2103      	movs	r1, #3
 8005e4e:	4836      	ldr	r0, [pc, #216]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e50:	f7ff fc20 	bl	8005694 <LL_DMA_IsEnabledChannel>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f8      	beq.n	8005e4c <STRHAL_ADC_Run+0xbc>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4);
 8005e5a:	2104      	movs	r1, #4
 8005e5c:	4832      	ldr	r0, [pc, #200]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e5e:	f7ff fbf7 	bl	8005650 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4));
 8005e62:	bf00      	nop
 8005e64:	2104      	movs	r1, #4
 8005e66:	4830      	ldr	r0, [pc, #192]	; (8005f28 <STRHAL_ADC_Run+0x198>)
 8005e68:	f7ff fc14 	bl	8005694 <LL_DMA_IsEnabledChannel>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f8      	beq.n	8005e64 <STRHAL_ADC_Run+0xd4>

	LL_ADC_Enable(ADC1);
 8005e72:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005e76:	f7ff fb52 	bl	800551e <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0);
 8005e7a:	bf00      	nop
 8005e7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005e80:	f7ff fba2 	bl	80055c8 <LL_ADC_IsActiveFlag_ADRDY>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f8      	beq.n	8005e7c <STRHAL_ADC_Run+0xec>
	LL_ADC_Enable(ADC2);
 8005e8a:	4820      	ldr	r0, [pc, #128]	; (8005f0c <STRHAL_ADC_Run+0x17c>)
 8005e8c:	f7ff fb47 	bl	800551e <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0);
 8005e90:	bf00      	nop
 8005e92:	481e      	ldr	r0, [pc, #120]	; (8005f0c <STRHAL_ADC_Run+0x17c>)
 8005e94:	f7ff fb98 	bl	80055c8 <LL_ADC_IsActiveFlag_ADRDY>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f9      	beq.n	8005e92 <STRHAL_ADC_Run+0x102>
	LL_ADC_Enable(ADC3);
 8005e9e:	481d      	ldr	r0, [pc, #116]	; (8005f14 <STRHAL_ADC_Run+0x184>)
 8005ea0:	f7ff fb3d 	bl	800551e <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0);
 8005ea4:	bf00      	nop
 8005ea6:	481b      	ldr	r0, [pc, #108]	; (8005f14 <STRHAL_ADC_Run+0x184>)
 8005ea8:	f7ff fb8e 	bl	80055c8 <LL_ADC_IsActiveFlag_ADRDY>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f9      	beq.n	8005ea6 <STRHAL_ADC_Run+0x116>
	LL_ADC_Enable(ADC4);
 8005eb2:	481a      	ldr	r0, [pc, #104]	; (8005f1c <STRHAL_ADC_Run+0x18c>)
 8005eb4:	f7ff fb33 	bl	800551e <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC4) == 0);
 8005eb8:	bf00      	nop
 8005eba:	4818      	ldr	r0, [pc, #96]	; (8005f1c <STRHAL_ADC_Run+0x18c>)
 8005ebc:	f7ff fb84 	bl	80055c8 <LL_ADC_IsActiveFlag_ADRDY>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f9      	beq.n	8005eba <STRHAL_ADC_Run+0x12a>
	LL_ADC_Enable(ADC5);
 8005ec6:	4817      	ldr	r0, [pc, #92]	; (8005f24 <STRHAL_ADC_Run+0x194>)
 8005ec8:	f7ff fb29 	bl	800551e <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC5) == 0);
 8005ecc:	bf00      	nop
 8005ece:	4815      	ldr	r0, [pc, #84]	; (8005f24 <STRHAL_ADC_Run+0x194>)
 8005ed0:	f7ff fb7a 	bl	80055c8 <LL_ADC_IsActiveFlag_ADRDY>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f9      	beq.n	8005ece <STRHAL_ADC_Run+0x13e>

	LL_ADC_REG_StartConversion(ADC1);
 8005eda:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005ede:	f7ff fb5f 	bl	80055a0 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC2);
 8005ee2:	480a      	ldr	r0, [pc, #40]	; (8005f0c <STRHAL_ADC_Run+0x17c>)
 8005ee4:	f7ff fb5c 	bl	80055a0 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC3);
 8005ee8:	480a      	ldr	r0, [pc, #40]	; (8005f14 <STRHAL_ADC_Run+0x184>)
 8005eea:	f7ff fb59 	bl	80055a0 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC4);
 8005eee:	480b      	ldr	r0, [pc, #44]	; (8005f1c <STRHAL_ADC_Run+0x18c>)
 8005ef0:	f7ff fb56 	bl	80055a0 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC5);
 8005ef4:	480b      	ldr	r0, [pc, #44]	; (8005f24 <STRHAL_ADC_Run+0x194>)
 8005ef6:	f7ff fb53 	bl	80055a0 <LL_ADC_REG_StartConversion>
}
 8005efa:	bf00      	nop
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000a68 	.word	0x20000a68
 8005f04:	080092ac 	.word	0x080092ac
 8005f08:	20000a94 	.word	0x20000a94
 8005f0c:	50000100 	.word	0x50000100
 8005f10:	20000ac0 	.word	0x20000ac0
 8005f14:	50000400 	.word	0x50000400
 8005f18:	20000aec 	.word	0x20000aec
 8005f1c:	50000500 	.word	0x50000500
 8005f20:	20000b18 	.word	0x20000b18
 8005f24:	50000600 	.word	0x50000600
 8005f28:	40020400 	.word	0x40020400

08005f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <__NVIC_GetPriorityGrouping+0x18>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	f003 0307 	and.w	r3, r3, #7
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db0b      	blt.n	8005f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	f003 021f 	and.w	r2, r3, #31
 8005f60:	4907      	ldr	r1, [pc, #28]	; (8005f80 <__NVIC_EnableIRQ+0x38>)
 8005f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2001      	movs	r0, #1
 8005f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e100 	.word	0xe000e100

08005f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	db0a      	blt.n	8005fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	490c      	ldr	r1, [pc, #48]	; (8005fd0 <__NVIC_SetPriority+0x4c>)
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	0112      	lsls	r2, r2, #4
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fac:	e00a      	b.n	8005fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4908      	ldr	r1, [pc, #32]	; (8005fd4 <__NVIC_SetPriority+0x50>)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	0112      	lsls	r2, r2, #4
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	761a      	strb	r2, [r3, #24]
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	e000e100 	.word	0xe000e100
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f1c3 0307 	rsb	r3, r3, #7
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	bf28      	it	cs
 8005ff6:	2304      	movcs	r3, #4
 8005ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d902      	bls.n	8006008 <NVIC_EncodePriority+0x30>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3b03      	subs	r3, #3
 8006006:	e000      	b.n	800600a <NVIC_EncodePriority+0x32>
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800600c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43da      	mvns	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	401a      	ands	r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	fa01 f303 	lsl.w	r3, r1, r3
 800602a:	43d9      	mvns	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006030:	4313      	orrs	r3, r2
         );
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	; 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <LL_AHB2_GRP1_EnableClock>:
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800604a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800604c:	4907      	ldr	r1, [pc, #28]	; (800606c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4313      	orrs	r3, r2
 8006052:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4013      	ands	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800605e:	68fb      	ldr	r3, [r7, #12]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	40021000 	.word	0x40021000

08006070 <LL_APB1_GRP1_EnableClock>:
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006078:	4b08      	ldr	r3, [pc, #32]	; (800609c <LL_APB1_GRP1_EnableClock+0x2c>)
 800607a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800607c:	4907      	ldr	r1, [pc, #28]	; (800609c <LL_APB1_GRP1_EnableClock+0x2c>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4313      	orrs	r3, r2
 8006082:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006086:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4013      	ands	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800608e:	68fb      	ldr	r3, [r7, #12]
}
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40021000 	.word	0x40021000

080060a0 <LL_RCC_SetFDCANClockSource>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <LL_RCC_SetFDCANClockSource+0x28>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060b2:	4905      	ldr	r1, [pc, #20]	; (80060c8 <LL_RCC_SetFDCANClockSource+0x28>)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	40021000 	.word	0x40021000

080060cc <STRHAL_CAN_Init_GPIO>:
{ [STRHAL_FDCAN1] =
{ .can = FDCAN1, .can_ram = FDCAN1_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 }, [STRHAL_FDCAN2] =
{ .can = FDCAN2, .can_ram = FDCAN2_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 } };

static void STRHAL_CAN_Init_GPIO(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80060d2:	463b      	mov	r3, r7
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	609a      	str	r2, [r3, #8]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	611a      	str	r2, [r3, #16]
 80060e0:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 80060e2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80060e6:	f7ff ffdb 	bl	80060a0 <LL_RCC_SetFDCANClockSource>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_FDCAN);
 80060ea:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80060ee:	f7ff ffbf 	bl	8006070 <LL_APB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80060f2:	2001      	movs	r0, #1
 80060f4:	f7ff ffa4 	bl	8006040 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80060f8:	2002      	movs	r0, #2
 80060fa:	f7ff ffa1 	bl	8006040 <LL_AHB2_GRP1_EnableClock>

	//FDCAN1 GPIO Configuration
	//PA11     ------> FDCAN1_RX
	//PA12     ------> FDCAN1_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_11 | LL_GPIO_PIN_12;
 80060fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006102:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006104:	2302      	movs	r3, #2
 8006106:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006110:	2303      	movs	r3, #3
 8006112:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8006114:	2309      	movs	r3, #9
 8006116:	617b      	str	r3, [r7, #20]

	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006118:	463b      	mov	r3, r7
 800611a:	4619      	mov	r1, r3
 800611c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006120:	f7fd fad1 	bl	80036c6 <LL_GPIO_Init>

	//FDCAN2 GPIO Configuration
	//PB5     ------> FDCAN2_RX
	//PB6     ------> FDCAN2_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_6;
 8006124:	2360      	movs	r3, #96	; 0x60
 8006126:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006128:	2302      	movs	r3, #2
 800612a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006134:	2303      	movs	r3, #3
 8006136:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8006138:	2309      	movs	r3, #9
 800613a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800613c:	463b      	mov	r3, r7
 800613e:	4619      	mov	r1, r3
 8006140:	4803      	ldr	r0, [pc, #12]	; (8006150 <STRHAL_CAN_Init_GPIO+0x84>)
 8006142:	f7fd fac0 	bl	80036c6 <LL_GPIO_Init>

}
 8006146:	bf00      	nop
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	48000400 	.word	0x48000400

08006154 <STRHAL_CAN_Instance_Init>:

int STRHAL_CAN_Instance_Init(STRHAL_FDCAN_Id_t fdcan_id)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	71fb      	strb	r3, [r7, #7]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d902      	bls.n	800616a <STRHAL_CAN_Instance_Init+0x16>
		return -1;
 8006164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006168:	e0e9      	b.n	800633e <STRHAL_CAN_Instance_Init+0x1ea>

	_fdcans[fdcan_id].state = STRHAL_CAN_STATE_INITIALISING;
 800616a:	79fa      	ldrb	r2, [r7, #7]
 800616c:	4976      	ldr	r1, [pc, #472]	; (8006348 <STRHAL_CAN_Instance_Init+0x1f4>)
 800616e:	4613      	mov	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	440b      	add	r3, r1
 8006178:	3308      	adds	r3, #8
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 800617e:	79fa      	ldrb	r2, [r7, #7]
 8006180:	4971      	ldr	r1, [pc, #452]	; (8006348 <STRHAL_CAN_Instance_Init+0x1f4>)
 8006182:	4613      	mov	r3, r2
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	4413      	add	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	440b      	add	r3, r1
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]
	//Can_Message_RAM *can_ram = handles[can_handle_index].can_ram;
	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8006190:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006194:	f7ff ff84 	bl	80060a0 <LL_RCC_SetFDCANClockSource>

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_CSR);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f023 0210 	bic.w	r2, r3, #16
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	619a      	str	r2, [r3, #24]

	uint32_t tot = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

	// Check Sleep mode acknowledge
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061a8:	e009      	b.n	80061be <STRHAL_CAN_Instance_Init+0x6a>
	{
		tot++;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a66      	ldr	r2, [pc, #408]	; (800634c <STRHAL_CAN_Instance_Init+0x1f8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d902      	bls.n	80061be <STRHAL_CAN_Instance_Init+0x6a>
			return -1;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061bc:	e0bf      	b.n	800633e <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d0ef      	beq.n	80061aa <STRHAL_CAN_Instance_Init+0x56>
	}

	SET_BIT(can->CCCR, FDCAN_CCCR_INIT);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	619a      	str	r2, [r3, #24]

	// Wait until the INIT bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061d6:	e009      	b.n	80061ec <STRHAL_CAN_Instance_Init+0x98>
	{
		tot++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a5a      	ldr	r2, [pc, #360]	; (800634c <STRHAL_CAN_Instance_Init+0x1f8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d902      	bls.n	80061ec <STRHAL_CAN_Instance_Init+0x98>
			return -1;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ea:	e0a8      	b.n	800633e <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ef      	beq.n	80061d8 <STRHAL_CAN_Instance_Init+0x84>
	}

	// Enable configuration change
	SET_BIT(can->CCCR, FDCAN_CCCR_CCE);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f043 0202 	orr.w	r2, r3, #2
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	619a      	str	r2, [r3, #24]
	// Wait until the CCE bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8006204:	e009      	b.n	800621a <STRHAL_CAN_Instance_Init+0xc6>
	{
		tot++;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3301      	adds	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a4f      	ldr	r2, [pc, #316]	; (800634c <STRHAL_CAN_Instance_Init+0x1f8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d902      	bls.n	800621a <STRHAL_CAN_Instance_Init+0xc6>
			return -1;
 8006214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006218:	e091      	b.n	800633e <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0ef      	beq.n	8006206 <STRHAL_CAN_Instance_Init+0xb2>
	}

	//SET_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Disabled
	CLEAR_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Enabled
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_TXP);  //transmit pause Disabled
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_CCCR_PXHD); //Protocol Exception Handling  Disabled
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_FRAME_FD_BRS); //FD mode with BitRate Switching
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f023 02a4 	bic.w	r2, r3, #164	; 0xa4
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(can->TEST, FDCAN_TEST_LBCK);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f023 0210 	bic.w	r2, r3, #16
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	611a      	str	r2, [r3, #16]

	//if(fdcan_id == STRHAL_FDCAN1) { // TODO find out why this is here - it is here because the FDCAN_CONFIG reg needs only to be set once
	MODIFY_REG(FDCAN_CONFIG->CKDIV, FDCAN_CKDIV_PDIV, FDCAN_CLOCK_DIV2);
 800626e:	4b38      	ldr	r3, [pc, #224]	; (8006350 <STRHAL_CAN_Instance_Init+0x1fc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f023 030f 	bic.w	r3, r3, #15
 8006276:	4a36      	ldr	r2, [pc, #216]	; (8006350 <STRHAL_CAN_Instance_Init+0x1fc>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	6013      	str	r3, [r2, #0]
	//}

	// Set the nominal bit timing register
	can->NBTP = ((((uint32_t) FDCAN_NOMINAL_SYNC_JUMP_WIDTH - 1U) << FDCAN_NBTP_NSJW_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_1 - 1U) << FDCAN_NBTP_NTSEG1_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_2 - 1U) << FDCAN_NBTP_NTSEG2_Pos) | (((uint32_t) FDCAN_NOMINAL_PRESCALER - 1U) << FDCAN_NBTP_NBRP_Pos));
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4a34      	ldr	r2, [pc, #208]	; (8006354 <STRHAL_CAN_Instance_Init+0x200>)
 8006282:	61da      	str	r2, [r3, #28]

	// Bit Rate Switching Enable
	can->DBTP = ((((uint32_t) FDCAN_DATA_SYNC_JUMP_WIDTH - 1U) << FDCAN_DBTP_DSJW_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_1 - 1U) << FDCAN_DBTP_DTSEG1_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_2 - 1U) << FDCAN_DBTP_DTSEG2_Pos) | (((uint32_t) FDCAN_DATA_PRESCALER - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a34      	ldr	r2, [pc, #208]	; (8006358 <STRHAL_CAN_Instance_Init+0x204>)
 8006288:	60da      	str	r2, [r3, #12]

	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSS, (STRHAL_CAN_STD_FILTER_NUMBER << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006290:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSE, (STRHAL_CAN_EXT_FILTER_NUMBER << FDCAN_RXGFC_LSE_Pos)); // Extended filter elements number
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a0:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F0OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F0OM_Pos)); // FIFO 0 operation mode
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F1OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F1OM_Pos)); // FIFO 1 operation mode
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFS, (FDCAN_REJECT << FDCAN_RXGFC_ANFS_Pos)); // Accept Non-matching Frames Standard
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80062d4:	f043 0220 	orr.w	r2, r3, #32
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFE, (FDCAN_REJECT << FDCAN_RXGFC_ANFE_Pos)); // Accept Non-matching Frames Extended
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e4:	f023 030c 	bic.w	r3, r3, #12
 80062e8:	f043 0208 	orr.w	r2, r3, #8
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFS, (FDCAN_FILTER_REMOTE << FDCAN_RXGFC_RRFS_Pos)); // Reject Remote Frames Standard
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f8:	f023 0202 	bic.w	r2, r3, #2
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFE, (FDCAN_REJECT_REMOTE << FDCAN_RXGFC_RRFE_Pos)); // Reject Remote Frames Extended
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_BIT(can->TXBC, FDCAN_TXBC_TFQM); // Tx FIFO/Queue Mode
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006318:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//Config TxDelayCompensation
	can->TDCR = ((FDCAN_TDC_FILTER << FDCAN_TDCR_TDCF_Pos) | (FDCAN_TDC_OFFSET << FDCAN_TDCR_TDCO_Pos));
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f240 5206 	movw	r2, #1286	; 0x506
 8006328:	649a      	str	r2, [r3, #72]	; 0x48

	// Enable transmitter delay compensation
	SET_BIT(can->DBTP, FDCAN_DBTP_TDC);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	60da      	str	r2, [r3, #12]

	LL_mDelay(100);
 8006336:	2064      	movs	r0, #100	; 0x64
 8006338:	f7fe fb80 	bl	8004a3c <LL_mDelay>

	return 0;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000004 	.word	0x20000004
 800634c:	00f42400 	.word	0x00f42400
 8006350:	40006500 	.word	0x40006500
 8006354:	0001160f 	.word	0x0001160f
 8006358:	00010611 	.word	0x00010611

0800635c <STRHAL_CAN_Subscribe>:

int STRHAL_CAN_Subscribe(STRHAL_FDCAN_Id_t fdcan_id, STRHAL_FDCAN_Rx_Id_t rx_id, STRHAL_FDCAN_Filter_t *filter, uint8_t n, STRHAL_CAN_Receptor_t receptor)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	603a      	str	r2, [r7, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	71fb      	strb	r3, [r7, #7]
 800636a:	460b      	mov	r3, r1
 800636c:	71bb      	strb	r3, [r7, #6]
 800636e:	4613      	mov	r3, r2
 8006370:	717b      	strb	r3, [r7, #5]
	/* Error handling for user inputs */
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN) // invalid fdcan instance
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d902      	bls.n	800637e <STRHAL_CAN_Subscribe+0x22>
		return -1;
 8006378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637c:	e0bd      	b.n	80064fa <STRHAL_CAN_Subscribe+0x19e>

	STRHAL_CAN_Handle_t *fdcan = &_fdcans[fdcan_id];
 800637e:	79fa      	ldrb	r2, [r7, #7]
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4a5f      	ldr	r2, [pc, #380]	; (8006508 <STRHAL_CAN_Subscribe+0x1ac>)
 800638a:	4413      	add	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
	if (fdcan->state != STRHAL_CAN_STATE_INITIALISING)	// fdcan not in init mode (Subscribe called in wrong order)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	7a1b      	ldrb	r3, [r3, #8]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d002      	beq.n	800639e <STRHAL_CAN_Subscribe+0x42>
		return -1;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800639c:	e0ad      	b.n	80064fa <STRHAL_CAN_Subscribe+0x19e>

	if (filter == NULL || receptor == NULL) // Nullptr check
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <STRHAL_CAN_Subscribe+0x4e>
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <STRHAL_CAN_Subscribe+0x52>
		return 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e0a5      	b.n	80064fa <STRHAL_CAN_Subscribe+0x19e>

	if (n > STRHAL_CAN_RAM_N_FILTER - fdcan->filter_n) // Correct Filter Nbr
 80063ae:	797a      	ldrb	r2, [r7, #5]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	7d1b      	ldrb	r3, [r3, #20]
 80063b4:	f1c3 031c 	rsb	r3, r3, #28
 80063b8:	429a      	cmp	r2, r3
 80063ba:	dd04      	ble.n	80063c6 <STRHAL_CAN_Subscribe+0x6a>
		n = fdcan->filter_n - n;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	7d1a      	ldrb	r2, [r3, #20]
 80063c0:	797b      	ldrb	r3, [r7, #5]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	717b      	strb	r3, [r7, #5]

	if (fdcan->fifo_sub_state & (1U << rx_id)) // Already subscribed to this fifo
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	7d5b      	ldrb	r3, [r3, #21]
 80063ca:	461a      	mov	r2, r3
 80063cc:	79bb      	ldrb	r3, [r7, #6]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <STRHAL_CAN_Subscribe+0x84>
		return -1;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063de:	e08c      	b.n	80064fa <STRHAL_CAN_Subscribe+0x19e>

	Can_Message_RAM *can_ram = fdcan->can_ram;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	60fb      	str	r3, [r7, #12]

	uint32_t sfec;

	switch (rx_id)
 80063e6:	79bb      	ldrb	r3, [r7, #6]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <STRHAL_CAN_Subscribe+0x96>
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d010      	beq.n	8006412 <STRHAL_CAN_Subscribe+0xb6>
 80063f0:	e01b      	b.n	800642a <STRHAL_CAN_Subscribe+0xce>
	{
		case STRHAL_FDCAN_RX0:
			fdcan->rxReceptors[0] = receptor;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	60da      	str	r2, [r3, #12]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX0;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	7d5b      	ldrb	r3, [r3, #21]
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	b2da      	uxtb	r2, r3
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO0;
 8006406:	2301      	movs	r3, #1
 8006408:	60bb      	str	r3, [r7, #8]
			break;
 800640a:	bf00      	nop
		default:
			return -1;
	}

	uint8_t i;
	for (i = 0; i < n; i++, fdcan->filter_n++)
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]
 8006410:	e05f      	b.n	80064d2 <STRHAL_CAN_Subscribe+0x176>
			fdcan->rxReceptors[1] = receptor;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6a3a      	ldr	r2, [r7, #32]
 8006416:	611a      	str	r2, [r3, #16]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX1;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	7d5b      	ldrb	r3, [r3, #21]
 800641c:	f043 0302 	orr.w	r3, r3, #2
 8006420:	b2da      	uxtb	r2, r3
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO1;
 8006426:	2302      	movs	r3, #2
 8006428:	60bb      	str	r3, [r7, #8]
			return -1;
 800642a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800642e:	e064      	b.n	80064fa <STRHAL_CAN_Subscribe+0x19e>
	{
		can_ram->std_filters[i].S0.bit.SFEC = sfec;
 8006430:	7df9      	ldrb	r1, [r7, #23]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	b2d8      	uxtb	r0, r3
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006440:	f360 63dd 	bfi	r3, r0, #27, #3
 8006444:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID1 = filter[i].value_id1;
 8006448:	7dfa      	ldrb	r2, [r7, #23]
 800644a:	4613      	mov	r3, r2
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	461a      	mov	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	4413      	add	r3, r2
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	7df9      	ldrb	r1, [r7, #23]
 800645c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006460:	b298      	uxth	r0, r3
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006468:	f360 431a 	bfi	r3, r0, #16, #11
 800646c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID2 = filter[i].mask_id2;
 8006470:	7dfa      	ldrb	r2, [r7, #23]
 8006472:	4613      	mov	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	461a      	mov	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	4413      	add	r3, r2
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	7df9      	ldrb	r1, [r7, #23]
 8006484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006488:	b298      	uxth	r0, r3
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006490:	f360 030a 	bfi	r3, r0, #0, #11
 8006494:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFT = filter[i].type;
 8006498:	7dfa      	ldrb	r2, [r7, #23]
 800649a:	4613      	mov	r3, r2
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	461a      	mov	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	4413      	add	r3, r2
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	7df9      	ldrb	r1, [r7, #23]
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	b2d8      	uxtb	r0, r3
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064b8:	f360 739f 	bfi	r3, r0, #30, #2
 80064bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < n; i++, fdcan->filter_n++)
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	3301      	adds	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	7d1b      	ldrb	r3, [r3, #20]
 80064ca:	3301      	adds	r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	751a      	strb	r2, [r3, #20]
 80064d2:	7dfa      	ldrb	r2, [r7, #23]
 80064d4:	797b      	ldrb	r3, [r7, #5]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d3aa      	bcc.n	8006430 <STRHAL_CAN_Subscribe+0xd4>
	}
	MODIFY_REG(fdcan->can->RXGFC, FDCAN_RXGFC_LSS, (fdcan->filter_n << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	7d1b      	ldrb	r3, [r3, #20]
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	4619      	mov	r1, r3
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return n;
 80064f8:	797b      	ldrb	r3, [r7, #5]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000004 	.word	0x20000004

0800650c <STRHAL_CAN_Init>:

STRHAL_Oof_t STRHAL_CAN_Init()
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
	STRHAL_Oof_t status = STRHAL_NOICE;
 8006512:	2300      	movs	r3, #0
 8006514:	71fb      	strb	r3, [r7, #7]
	STRHAL_CAN_Init_GPIO();
 8006516:	f7ff fdd9 	bl	80060cc <STRHAL_CAN_Init_GPIO>

	return status;
 800651a:	79fb      	ldrb	r3, [r7, #7]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <STRHAL_CAN_Send>:
	*rxfXA = i & 0x7;
	return n;
}

int32_t STRHAL_CAN_Send(STRHAL_FDCAN_Id_t fdcan_id, uint32_t id, const uint8_t *data, uint32_t n)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d902      	bls.n	8006540 <STRHAL_CAN_Send+0x1c>
		return -1;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800653e:	e0bd      	b.n	80066bc <STRHAL_CAN_Send+0x198>

	if (n == 0)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <STRHAL_CAN_Send+0x26>
		return 0;
 8006546:	2300      	movs	r3, #0
 8006548:	e0b8      	b.n	80066bc <STRHAL_CAN_Send+0x198>

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 800654a:	7bfa      	ldrb	r2, [r7, #15]
 800654c:	495d      	ldr	r1, [pc, #372]	; (80066c4 <STRHAL_CAN_Send+0x1a0>)
 800654e:	4613      	mov	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4413      	add	r3, r2
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	440b      	add	r3, r1
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	61fb      	str	r3, [r7, #28]
	Can_Message_RAM *can_ram = _fdcans[fdcan_id].can_ram;
 800655c:	7bfa      	ldrb	r2, [r7, #15]
 800655e:	4959      	ldr	r1, [pc, #356]	; (80066c4 <STRHAL_CAN_Send+0x1a0>)
 8006560:	4613      	mov	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	440b      	add	r3, r1
 800656a:	3304      	adds	r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	61bb      	str	r3, [r7, #24]

	if (!(can->TXFQS & FDCAN_TXFQS_TFFL))
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <STRHAL_CAN_Send+0x6a>
	{
		STRHAL_UART_Debug_Write_Blocking("CAN ERROR\n", 10, 50);
 800657e:	2232      	movs	r2, #50	; 0x32
 8006580:	210a      	movs	r1, #10
 8006582:	4851      	ldr	r0, [pc, #324]	; (80066c8 <STRHAL_CAN_Send+0x1a4>)
 8006584:	f002 fa2e 	bl	80089e4 <STRHAL_UART_Debug_Write_Blocking>

		return -1;
 8006588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800658c:	e096      	b.n	80066bc <STRHAL_CAN_Send+0x198>
	}
		if (n > FDCAN_ELMTS_ARRAY_SIZE)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d901      	bls.n	8006598 <STRHAL_CAN_Send+0x74>
		n = FDCAN_ELMTS_ARRAY_SIZE;
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	603b      	str	r3, [r7, #0]

	uint8_t i = ((can->TXFQS & FDCAN_TXFQS_TFQPI_Msk) >> FDCAN_TXFQS_TFQPI_Pos);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	75fb      	strb	r3, [r7, #23]

	Can_Tx_Element *frame = &can_ram->tx_buffer[i];
 80065a8:	7dfa      	ldrb	r2, [r7, #23]
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4413      	add	r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4413      	add	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
	frame->T0.bit.XTD = 0;
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	6813      	ldr	r3, [r2, #0]
 80065c0:	f36f 739e 	bfc	r3, #30, #1
 80065c4:	6013      	str	r3, [r2, #0]
	frame->T0.bit.ID = id << 18;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	049b      	lsls	r3, r3, #18
 80065ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	6813      	ldr	r3, [r2, #0]
 80065d2:	f361 031c 	bfi	r3, r1, #0, #29
 80065d6:	6013      	str	r3, [r2, #0]
	frame->T0.bit.RTR = 0;
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	f36f 735d 	bfc	r3, #29, #1
 80065e0:	6013      	str	r3, [r2, #0]
	frame->T1.bit.FDF = 1;
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	6853      	ldr	r3, [r2, #4]
 80065e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065ea:	6053      	str	r3, [r2, #4]
	frame->T1.bit.BRS = 1;
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	6853      	ldr	r3, [r2, #4]
 80065f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f4:	6053      	str	r3, [r2, #4]
	frame->T1.bit.DLC = Can_LengthToDlc[n];
 80065f6:	4a35      	ldr	r2, [pc, #212]	; (80066cc <STRHAL_CAN_Send+0x1a8>)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	b2d9      	uxtb	r1, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	6853      	ldr	r3, [r2, #4]
 8006608:	f361 4313 	bfi	r3, r1, #16, #4
 800660c:	6053      	str	r3, [r2, #4]
	frame->T1.bit.EFCC = 0;
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	6853      	ldr	r3, [r2, #4]
 8006612:	f36f 53d7 	bfc	r3, #23, #1
 8006616:	6053      	str	r3, [r2, #4]
	frame->T1.bit.MM = 0;
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	6853      	ldr	r3, [r2, #4]
 800661c:	f36f 631f 	bfc	r3, #24, #8
 8006620:	6053      	str	r3, [r2, #4]
	/*if(frame->T0.bit.ID == 0 || frame->T1.bit.DLC == 0) {
	 uint8_t temp = 1;
	 (void) temp;
	 }*/

	uint32_t j = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t c = 0; c < n; c += 4)
 8006626:	2300      	movs	r3, #0
 8006628:	623b      	str	r3, [r7, #32]
 800662a:	e025      	b.n	8006678 <STRHAL_CAN_Send+0x154>
		frame->data.word[j++] = data[c] | data[c + 1] << 8 | data[c + 2] << 16 | data[c + 3] << 24;
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4413      	add	r3, r2
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	4619      	mov	r1, r3
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	3301      	adds	r3, #1
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	ea41 0203 	orr.w	r2, r1, r3
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	3302      	adds	r3, #2
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	440b      	add	r3, r1
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	431a      	orrs	r2, r3
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	3303      	adds	r3, #3
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	440b      	add	r3, r1
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	ea42 0103 	orr.w	r1, r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	627a      	str	r2, [r7, #36]	; 0x24
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	3302      	adds	r3, #2
 800666e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t c = 0; c < n; c += 4)
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	3304      	adds	r3, #4
 8006676:	623b      	str	r3, [r7, #32]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d3d5      	bcc.n	800662c <STRHAL_CAN_Send+0x108>
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 8006680:	e007      	b.n	8006692 <STRHAL_CAN_Send+0x16e>
		frame->data.word[j++] = 0;
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	627a      	str	r2, [r7, #36]	; 0x24
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	3302      	adds	r3, #2
 800668c:	2100      	movs	r1, #0
 800668e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 8006692:	4a0e      	ldr	r2, [pc, #56]	; (80066cc <STRHAL_CAN_Send+0x1a8>)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800669a:	4a0d      	ldr	r2, [pc, #52]	; (80066d0 <STRHAL_CAN_Send+0x1ac>)
 800669c:	5cd3      	ldrb	r3, [r2, r3]
 800669e:	089b      	lsrs	r3, r3, #2
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d3eb      	bcc.n	8006682 <STRHAL_CAN_Send+0x15e>

	can->TXBAR = (1 << i);
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2201      	movs	r2, #1
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	return n;
 80066ba:	683b      	ldr	r3, [r7, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3728      	adds	r7, #40	; 0x28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000004 	.word	0x20000004
 80066c8:	080090c4 	.word	0x080090c4
 80066cc:	080098ec 	.word	0x080098ec
 80066d0:	080098dc 	.word	0x080098dc

080066d4 <STRHAL_CAN_Run>:

void STRHAL_CAN_Run()
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
	// End initialisation - start FDCANs
	STRHAL_CAN_Handle_t *fdcan1 = &_fdcans[STRHAL_FDCAN1];
 80066da:	4b55      	ldr	r3, [pc, #340]	; (8006830 <STRHAL_CAN_Run+0x15c>)
 80066dc:	607b      	str	r3, [r7, #4]
	STRHAL_CAN_Handle_t *fdcan2 = &_fdcans[STRHAL_FDCAN2];
 80066de:	4b55      	ldr	r3, [pc, #340]	; (8006834 <STRHAL_CAN_Run+0x160>)
 80066e0:	603b      	str	r3, [r7, #0]
	if (fdcan1->state == STRHAL_CAN_STATE_INITIALISING)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	7a1b      	ldrb	r3, [r3, #8]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d14b      	bne.n	8006784 <STRHAL_CAN_Run+0xb0>
	{
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	7d5b      	ldrb	r3, [r3, #21]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d011      	beq.n	800671c <STRHAL_CAN_Run+0x48>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO0);
 80066f8:	4b4f      	ldr	r3, [pc, #316]	; (8006838 <STRHAL_CAN_Run+0x164>)
 80066fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fc:	4a4e      	ldr	r2, [pc, #312]	; (8006838 <STRHAL_CAN_Run+0x164>)
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 8006704:	4b4c      	ldr	r3, [pc, #304]	; (8006838 <STRHAL_CAN_Run+0x164>)
 8006706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006708:	4a4b      	ldr	r2, [pc, #300]	; (8006838 <STRHAL_CAN_Run+0x164>)
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF0NE);
 8006710:	4b49      	ldr	r3, [pc, #292]	; (8006838 <STRHAL_CAN_Run+0x164>)
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	4a48      	ldr	r2, [pc, #288]	; (8006838 <STRHAL_CAN_Run+0x164>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7d5b      	ldrb	r3, [r3, #21]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d011      	beq.n	800674c <STRHAL_CAN_Run+0x78>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO1);
 8006728:	4b43      	ldr	r3, [pc, #268]	; (8006838 <STRHAL_CAN_Run+0x164>)
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	4a42      	ldr	r2, [pc, #264]	; (8006838 <STRHAL_CAN_Run+0x164>)
 800672e:	f023 0302 	bic.w	r3, r3, #2
 8006732:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 8006734:	4b40      	ldr	r3, [pc, #256]	; (8006838 <STRHAL_CAN_Run+0x164>)
 8006736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006738:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <STRHAL_CAN_Run+0x164>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF1NE);
 8006740:	4b3d      	ldr	r3, [pc, #244]	; (8006838 <STRHAL_CAN_Run+0x164>)
 8006742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006744:	4a3c      	ldr	r2, [pc, #240]	; (8006838 <STRHAL_CAN_Run+0x164>)
 8006746:	f043 0308 	orr.w	r3, r3, #8
 800674a:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN1_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 1));
 800674c:	f7ff fbee 	bl	8005f2c <__NVIC_GetPriorityGrouping>
 8006750:	4603      	mov	r3, r0
 8006752:	2201      	movs	r2, #1
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff fc3e 	bl	8005fd8 <NVIC_EncodePriority>
 800675c:	4603      	mov	r3, r0
 800675e:	4619      	mov	r1, r3
 8006760:	2015      	movs	r0, #21
 8006762:	f7ff fc0f 	bl	8005f84 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8006766:	2015      	movs	r0, #21
 8006768:	f7ff fbee 	bl	8005f48 <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN1->CCCR, FDCAN_CCCR_INIT);
 800676c:	4b32      	ldr	r3, [pc, #200]	; (8006838 <STRHAL_CAN_Run+0x164>)
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	4a31      	ldr	r2, [pc, #196]	; (8006838 <STRHAL_CAN_Run+0x164>)
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	6193      	str	r3, [r2, #24]

		_fdcans[STRHAL_FDCAN1].state = STRHAL_CAN_STATE_RUNNING;
 8006778:	4b2d      	ldr	r3, [pc, #180]	; (8006830 <STRHAL_CAN_Run+0x15c>)
 800677a:	2202      	movs	r2, #2
 800677c:	721a      	strb	r2, [r3, #8]
		LL_mDelay(100);
 800677e:	2064      	movs	r0, #100	; 0x64
 8006780:	f7fe f95c 	bl	8004a3c <LL_mDelay>
	}
	if (fdcan2->state == STRHAL_CAN_STATE_INITIALISING)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	7a1b      	ldrb	r3, [r3, #8]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d14c      	bne.n	8006828 <STRHAL_CAN_Run+0x154>
	{
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	7d5b      	ldrb	r3, [r3, #21]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d011      	beq.n	80067be <STRHAL_CAN_Run+0xea>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO0);
 800679a:	4b28      	ldr	r3, [pc, #160]	; (800683c <STRHAL_CAN_Run+0x168>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679e:	4a27      	ldr	r2, [pc, #156]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 80067a6:	4b25      	ldr	r3, [pc, #148]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067aa:	4a24      	ldr	r2, [pc, #144]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF0NE);
 80067b2:	4b22      	ldr	r3, [pc, #136]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	4a21      	ldr	r2, [pc, #132]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	7d5b      	ldrb	r3, [r3, #21]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d011      	beq.n	80067ee <STRHAL_CAN_Run+0x11a>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO1);
 80067ca:	4b1c      	ldr	r3, [pc, #112]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ce:	4a1b      	ldr	r2, [pc, #108]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067d0:	f023 0302 	bic.w	r3, r3, #2
 80067d4:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 80067d6:	4b19      	ldr	r3, [pc, #100]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067da:	4a18      	ldr	r2, [pc, #96]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF1NE);
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	4a15      	ldr	r2, [pc, #84]	; (800683c <STRHAL_CAN_Run+0x168>)
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN2_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 2));
 80067ee:	f7ff fb9d 	bl	8005f2c <__NVIC_GetPriorityGrouping>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2202      	movs	r2, #2
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fbed 	bl	8005fd8 <NVIC_EncodePriority>
 80067fe:	4603      	mov	r3, r0
 8006800:	4619      	mov	r1, r3
 8006802:	2056      	movs	r0, #86	; 0x56
 8006804:	f7ff fbbe 	bl	8005f84 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8006808:	2056      	movs	r0, #86	; 0x56
 800680a:	f7ff fb9d 	bl	8005f48 <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN2->CCCR, FDCAN_CCCR_INIT);
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <STRHAL_CAN_Run+0x168>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	4a0a      	ldr	r2, [pc, #40]	; (800683c <STRHAL_CAN_Run+0x168>)
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	6193      	str	r3, [r2, #24]
		_fdcans[STRHAL_FDCAN2].state = STRHAL_CAN_STATE_RUNNING;
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <STRHAL_CAN_Run+0x15c>)
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2020 	strb.w	r2, [r3, #32]
		LL_mDelay(100);
 8006822:	2064      	movs	r0, #100	; 0x64
 8006824:	f7fe f90a 	bl	8004a3c <LL_mDelay>
	}

}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000004 	.word	0x20000004
 8006834:	2000001c 	.word	0x2000001c
 8006838:	40006400 	.word	0x40006400
 800683c:	40006800 	.word	0x40006800

08006840 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08c      	sub	sp, #48	; 0x30
 8006844:	af00      	add	r7, sp, #0
	if (FDCAN1->IR & FDCAN_IR_RF0N)
 8006846:	4b47      	ldr	r3, [pc, #284]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 8006848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d03f      	beq.n	80068d2 <FDCAN1_IT0_IRQHandler+0x92>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF0N);
 8006852:	4b44      	ldr	r3, [pc, #272]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 8006854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006856:	4a43      	ldr	r2, [pc, #268]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[0];
 800685e:	4b42      	ldr	r3, [pc, #264]	; (8006968 <FDCAN1_IT0_IRQHandler+0x128>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 8006864:	4b40      	ldr	r3, [pc, #256]	; (8006968 <FDCAN1_IT0_IRQHandler+0x128>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN1->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 800686a:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 800686c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 800687c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	33b0      	adds	r3, #176	; 0xb0
 800688a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800688c:	4413      	add	r3, r2
 800688e:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8006898:	149b      	asrs	r3, r3, #18
 800689a:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	799b      	ldrb	r3, [r3, #6]
 80068a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <FDCAN1_IT0_IRQHandler+0x12c>)
 80068aa:	5c9b      	ldrb	r3, [r3, r2]
 80068ac:	61bb      	str	r3, [r7, #24]

		if (rec != NULL)
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <FDCAN1_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	f103 0108 	add.w	r1, r3, #8
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	1e9a      	subs	r2, r3, #2
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	69f8      	ldr	r0, [r7, #28]
 80068c2:	4798      	blx	r3

		FDCAN1->RXF0A = i & 0x7;
 80068c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c8:	4a26      	ldr	r2, [pc, #152]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	}
	if (FDCAN1->IR & FDCAN_IR_RF1N)
 80068d2:	4b24      	ldr	r3, [pc, #144]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 80068d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d03d      	beq.n	800695a <FDCAN1_IT0_IRQHandler+0x11a>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF1N);
 80068de:	4b21      	ldr	r3, [pc, #132]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 80068e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e2:	4a20      	ldr	r2, [pc, #128]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 80068e4:	f043 0308 	orr.w	r3, r3, #8
 80068e8:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[1];
 80068ea:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <FDCAN1_IT0_IRQHandler+0x128>)
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 80068f0:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <FDCAN1_IT0_IRQHandler+0x128>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN1->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 80068f6:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 80068f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 8006906:	7bfa      	ldrb	r2, [r7, #15]
 8006908:	4613      	mov	r3, r2
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4413      	add	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8006922:	149b      	asrs	r3, r3, #18
 8006924:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	799b      	ldrb	r3, [r3, #6]
 800692a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <FDCAN1_IT0_IRQHandler+0x12c>)
 8006934:	5c9b      	ldrb	r3, [r3, r2]
 8006936:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <FDCAN1_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f103 0108 	add.w	r1, r3, #8
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	1e9a      	subs	r2, r3, #2
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
		FDCAN1->RXF1A = i & 0x7;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	4a04      	ldr	r2, [pc, #16]	; (8006964 <FDCAN1_IT0_IRQHandler+0x124>)
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 800695a:	bf00      	nop
 800695c:	3730      	adds	r7, #48	; 0x30
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40006400 	.word	0x40006400
 8006968:	20000004 	.word	0x20000004
 800696c:	080098dc 	.word	0x080098dc

08006970 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08c      	sub	sp, #48	; 0x30
 8006974:	af00      	add	r7, sp, #0
	if (FDCAN2->IR & FDCAN_IR_RF0N)
 8006976:	4b47      	ldr	r3, [pc, #284]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d03f      	beq.n	8006a02 <FDCAN2_IT0_IRQHandler+0x92>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF0N);
 8006982:	4b44      	ldr	r3, [pc, #272]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	4a43      	ldr	r2, [pc, #268]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[0];
 800698e:	4b42      	ldr	r3, [pc, #264]	; (8006a98 <FDCAN2_IT0_IRQHandler+0x128>)
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 8006994:	4b40      	ldr	r3, [pc, #256]	; (8006a98 <FDCAN2_IT0_IRQHandler+0x128>)
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN2->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 800699a:	4b3e      	ldr	r3, [pc, #248]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a0:	0a1b      	lsrs	r3, r3, #8
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 80069ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80069b0:	4613      	mov	r3, r2
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	33b0      	adds	r3, #176	; 0xb0
 80069ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069bc:	4413      	add	r3, r2
 80069be:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80069c8:	149b      	asrs	r3, r3, #18
 80069ca:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	799b      	ldrb	r3, [r3, #6]
 80069d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	4b30      	ldr	r3, [pc, #192]	; (8006a9c <FDCAN2_IT0_IRQHandler+0x12c>)
 80069da:	5c9b      	ldrb	r3, [r3, r2]
 80069dc:	61bb      	str	r3, [r7, #24]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <FDCAN2_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	f103 0108 	add.w	r1, r3, #8
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	1e9a      	subs	r2, r3, #2
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	69f8      	ldr	r0, [r7, #28]
 80069f2:	4798      	blx	r3

		FDCAN2->RXF0A = i & 0x7;
 80069f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069f8:	4a26      	ldr	r2, [pc, #152]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	}
	if (FDCAN2->IR & FDCAN_IR_RF1N)
 8006a02:	4b24      	ldr	r3, [pc, #144]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d03d      	beq.n	8006a8a <FDCAN2_IT0_IRQHandler+0x11a>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF1N);
 8006a0e:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	4a20      	ldr	r2, [pc, #128]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006a14:	f023 0308 	bic.w	r3, r3, #8
 8006a18:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[1];
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <FDCAN2_IT0_IRQHandler+0x128>)
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <FDCAN2_IT0_IRQHandler+0x128>)
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN2->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 8006a36:	7bfa      	ldrb	r2, [r7, #15]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4413      	add	r3, r2
 8006a48:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8006a52:	149b      	asrs	r3, r3, #18
 8006a54:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	799b      	ldrb	r3, [r3, #6]
 8006a5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <FDCAN2_IT0_IRQHandler+0x12c>)
 8006a64:	5c9b      	ldrb	r3, [r3, r2]
 8006a66:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <FDCAN2_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f103 0108 	add.w	r1, r3, #8
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	1e9a      	subs	r2, r3, #2
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
		FDCAN2->RXF1A = i & 0x7;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <FDCAN2_IT0_IRQHandler+0x124>)
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 8006a8a:	bf00      	nop
 8006a8c:	3730      	adds	r7, #48	; 0x30
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	40006800 	.word	0x40006800
 8006a98:	20000004 	.word	0x20000004
 8006a9c:	080098dc 	.word	0x080098dc

08006aa0 <STRHAL_Clock_Init>:
#include <STRHAL_Clock.h>

void STRHAL_Clock_Init()
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0

}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <LL_GPIO_ReadOutputPort>:
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <LL_GPIO_SetOutputPin>:
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	619a      	str	r2, [r3, #24]
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <LL_GPIO_ResetOutputPin>:
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <LL_AHB2_GRP1_EnableClock>:
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006b08:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b0c:	4907      	ldr	r1, [pc, #28]	; (8006b2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	40021000 	.word	0x40021000

08006b30 <STRHAL_GPIO_Init>:
#include <stm32g4xx_ll_gpio.h>
#include <stm32g4xx_ll_rcc.h>
#include <STRHAL_GPIO.h>

void STRHAL_GPIO_Init()
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7ff ffe3 	bl	8006b00 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006b3a:	2002      	movs	r0, #2
 8006b3c:	f7ff ffe0 	bl	8006b00 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006b40:	2004      	movs	r0, #4
 8006b42:	f7ff ffdd 	bl	8006b00 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8006b46:	2008      	movs	r0, #8
 8006b48:	f7ff ffda 	bl	8006b00 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f7ff ffd7 	bl	8006b00 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006b52:	2020      	movs	r0, #32
 8006b54:	f7ff ffd4 	bl	8006b00 <LL_AHB2_GRP1_EnableClock>
}
 8006b58:	bf00      	nop
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <STRHAL_GPIO_SingleInit>:

// requires the type parameter and the gpio type to be the same TODO: find a better way to enforce that!
void STRHAL_GPIO_SingleInit(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Type_t type)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	791b      	ldrb	r3, [r3, #4]
 8006b6c:	2b1f      	cmp	r3, #31
 8006b6e:	d84d      	bhi.n	8006c0c <STRHAL_GPIO_SingleInit+0xb0>
		return;

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8006b70:	f107 0308 	add.w	r3, r7, #8
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	60da      	str	r2, [r3, #12]
 8006b7e:	611a      	str	r2, [r3, #16]
 8006b80:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	791b      	ldrb	r3, [r3, #4]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	408b      	lsls	r3, r1
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7ff ffa5 	bl	8006ae2 <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = (1 << gpio->pin);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	791b      	ldrb	r3, [r3, #4]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4093      	lsls	r3, r2
 8006ba2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	613b      	str	r3, [r7, #16]
	switch (type)
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d825      	bhi.n	8006bfa <STRHAL_GPIO_SingleInit+0x9e>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <STRHAL_GPIO_SingleInit+0x58>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bc9 	.word	0x08006bc9
 8006bb8:	08006bd3 	.word	0x08006bd3
 8006bbc:	08006bdd 	.word	0x08006bdd
 8006bc0:	08006be7 	.word	0x08006be7
 8006bc4:	08006bf1 	.word	0x08006bf1
	{
		case STRHAL_GPIO_TYPE_OPP:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
			break;
 8006bd0:	e013      	b.n	8006bfa <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_OOD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
			break;
 8006bda:	e00e      	b.n	8006bfa <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IHZ:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61bb      	str	r3, [r7, #24]
			break;
 8006be4:	e009      	b.n	8006bfa <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPU:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006bea:	2301      	movs	r3, #1
 8006bec:	61bb      	str	r3, [r7, #24]
			break;
 8006bee:	e004      	b.n	8006bfa <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	61bb      	str	r3, [r7, #24]
			break;
 8006bf8:	bf00      	nop
	}
	LL_GPIO_Init(gpio->port, &GPIO_InitStruct);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f107 0208 	add.w	r2, r7, #8
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fc fd5e 	bl	80036c6 <LL_GPIO_Init>
 8006c0a:	e000      	b.n	8006c0e <STRHAL_GPIO_SingleInit+0xb2>
		return;
 8006c0c:	bf00      	nop
	//gpio->type = type;
}
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <STRHAL_GPIO_Write>:
		STRHAL_GPIO_SingleInit(&gpios->gpios[i], type);
	}
}

inline void STRHAL_GPIO_Write(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Value_t value)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	791b      	ldrb	r3, [r3, #4]
 8006c24:	2b1f      	cmp	r3, #31
 8006c26:	d81a      	bhi.n	8006c5e <STRHAL_GPIO_Write+0x4a>
		return;

	if (value == STRHAL_GPIO_VALUE_H)
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d10b      	bne.n	8006c46 <STRHAL_GPIO_Write+0x32>
	{
		LL_GPIO_SetOutputPin(gpio->port, (1 << gpio->pin));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	791b      	ldrb	r3, [r3, #4]
 8006c36:	4619      	mov	r1, r3
 8006c38:	2301      	movs	r3, #1
 8006c3a:	408b      	lsls	r3, r1
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f7ff ff41 	bl	8006ac6 <LL_GPIO_SetOutputPin>
 8006c44:	e00c      	b.n	8006c60 <STRHAL_GPIO_Write+0x4c>
	}
	else
	{
		LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	791b      	ldrb	r3, [r3, #4]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	2301      	movs	r3, #1
 8006c52:	408b      	lsls	r3, r1
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7ff ff43 	bl	8006ae2 <LL_GPIO_ResetOutputPin>
 8006c5c:	e000      	b.n	8006c60 <STRHAL_GPIO_Write+0x4c>
		return;
 8006c5e:	bf00      	nop
	}

}
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <STRHAL_GPIO_ReadOutput>:

	return (LL_GPIO_ReadInputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
}

STRHAL_GPIO_Value_t STRHAL_GPIO_ReadOutput(const STRHAL_GPIO_t *gpio)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
	if (gpio->pin > 0x1F)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	2b1f      	cmp	r3, #31
 8006c74:	d901      	bls.n	8006c7a <STRHAL_GPIO_ReadOutput+0x14>
		return STRHAL_GPIO_VALUE_L;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e010      	b.n	8006c9c <STRHAL_GPIO_ReadOutput+0x36>

	return (LL_GPIO_ReadOutputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff ff15 	bl	8006aae <LL_GPIO_ReadOutputPort>
 8006c84:	4602      	mov	r2, r0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	408b      	lsls	r3, r1
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bf14      	ite	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	2300      	moveq	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <LL_AHB2_GRP1_EnableClock>:
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cb0:	4907      	ldr	r1, [pc, #28]	; (8006cd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40021000 	.word	0x40021000

08006cd4 <LL_APB2_GRP1_EnableClock>:
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006cdc:	4b08      	ldr	r3, [pc, #32]	; (8006d00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ce0:	4907      	ldr	r1, [pc, #28]	; (8006d00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
}
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	40021000 	.word	0x40021000

08006d04 <LL_GPIO_SetPinMode>:
{
 8006d04:	b480      	push	{r7}
 8006d06:	b08b      	sub	sp, #44	; 0x2c
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	fa93 f3a3 	rbit	r3, r3
 8006d1e:	613b      	str	r3, [r7, #16]
  return result;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006d2a:	2320      	movs	r3, #32
 8006d2c:	e003      	b.n	8006d36 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	fab3 f383 	clz	r3, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	2103      	movs	r1, #3
 8006d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	401a      	ands	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	fa93 f3a3 	rbit	r3, r3
 8006d4c:	61fb      	str	r3, [r7, #28]
  return result;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006d58:	2320      	movs	r3, #32
 8006d5a:	e003      	b.n	8006d64 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	fab3 f383 	clz	r3, r3
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	601a      	str	r2, [r3, #0]
}
 8006d72:	bf00      	nop
 8006d74:	372c      	adds	r7, #44	; 0x2c
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_OPAMP_SetFunctionalMode>:
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_BIAS
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_IO1_BIAS
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetFunctionalMode(OPAMP_TypeDef *OPAMPx, uint32_t FunctionalMode)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode */
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_4 | OPAMP_CSR_PGGAIN_3 | OPAMP_CSR_VMSEL | OPAMP_CSR_CALON, FunctionalMode);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8006d90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <LL_OPAMP_SetPGAGain>:
  *         @arg @ref LL_OPAMP_PGA_GAIN_32_OR_MINUS_31
  *         @arg @ref LL_OPAMP_PGA_GAIN_64_OR_MINUS_63
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetPGAGain(OPAMP_TypeDef *OPAMPx, uint32_t PGAGain)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f423 32e0 	bic.w	r2, r3, #114688	; 0x1c000
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <LL_OPAMP_SetInputNonInverting>:
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_IO3
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_DAC
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputNonInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputNonInverting)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_VPSEL, InputNonInverting);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f023 020c 	bic.w	r2, r3, #12
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	601a      	str	r2, [r3, #0]
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <LL_OPAMP_SetInputInverting>:
  *         @arg @ref LL_OPAMP_INPUT_INVERT_IO1
  *         @arg @ref LL_OPAMP_INPUT_INVERT_CONNECT_NO
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputInverting)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Manage cases of OPAMP inverting input not connected (0x10 and 0x11)      */
  /* to not modify OPAMP mode follower or PGA.                                */
  /* Bit OPAMP_CSR_VMSEL_1 is set by OPAMP mode (follower, PGA). */
  MODIFY_REG(OPAMPx->CSR, (~(InputInverting >> 1)) & OPAMP_CSR_VMSEL_0, InputInverting);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	43db      	mvns	r3, r3
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	401a      	ands	r2, r3
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	601a      	str	r2, [r3, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_OPAMP_SetInternalOutput>:
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_DISABLED
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <LL_OPAMP_Enable>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_Enable
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f043 0201 	orr.w	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <LL_OPAMP_IsEnabled>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_IsEnabled
  * @param  OPAMPx OPAMP instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_OPAMP_IsEnabled(OPAMP_TypeDef *OPAMPx)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN) == (OPAMP_CSR_OPAMPxEN)) ? 1UL : 0UL);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <LL_OPAMP_IsEnabled+0x18>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <LL_OPAMP_IsEnabled+0x1a>
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <STRHAL_OPAMP_Init>:
#include <STRHAL_OPAMP.h>

void STRHAL_OPAMP_Init()
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0

	// GPIO init
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006e94:	2004      	movs	r0, #4
 8006e96:	f7ff ff05 	bl	8006ca4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006e9a:	2020      	movs	r0, #32
 8006e9c:	f7ff ff02 	bl	8006ca4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f7ff feff 	bl	8006ca4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006ea6:	2002      	movs	r0, #2
 8006ea8:	f7ff fefc 	bl	8006ca4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8006eac:	2010      	movs	r0, #16
 8006eae:	f7ff fef9 	bl	8006ca4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8006eb2:	2008      	movs	r0, #8
 8006eb4:	f7ff fef6 	bl	8006ca4 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ANALOG);
 8006eb8:	2203      	movs	r2, #3
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ec0:	f7ff ff20 	bl	8006d04 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8006ec4:	2203      	movs	r2, #3
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4819      	ldr	r0, [pc, #100]	; (8006f30 <STRHAL_OPAMP_Init+0xa0>)
 8006eca:	f7ff ff1b 	bl	8006d04 <LL_GPIO_SetPinMode>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f7ff ff00 	bl	8006cd4 <LL_APB2_GRP1_EnableClock>

	LL_OPAMP_SetFunctionalMode(OPAMP2, LL_OPAMP_MODE_PGA);
 8006ed4:	2140      	movs	r1, #64	; 0x40
 8006ed6:	4817      	ldr	r0, [pc, #92]	; (8006f34 <STRHAL_OPAMP_Init+0xa4>)
 8006ed8:	f7ff ff51 	bl	8006d7e <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP2, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8006edc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006ee0:	4814      	ldr	r0, [pc, #80]	; (8006f34 <STRHAL_OPAMP_Init+0xa4>)
 8006ee2:	f7ff ff61 	bl	8006da8 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP2, LL_OPAMP_INPUT_NONINVERT_IO0);
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4812      	ldr	r0, [pc, #72]	; (8006f34 <STRHAL_OPAMP_Init+0xa4>)
 8006eea:	f7ff ff70 	bl	8006dce <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP2, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8006eee:	2140      	movs	r1, #64	; 0x40
 8006ef0:	4810      	ldr	r0, [pc, #64]	; (8006f34 <STRHAL_OPAMP_Init+0xa4>)
 8006ef2:	f7ff ff7f 	bl	8006df4 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP2, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 8006ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006efa:	480e      	ldr	r0, [pc, #56]	; (8006f34 <STRHAL_OPAMP_Init+0xa4>)
 8006efc:	f7ff ff92 	bl	8006e24 <LL_OPAMP_SetInternalOutput>
	LL_OPAMP_SetFunctionalMode(OPAMP3, LL_OPAMP_MODE_PGA);
 8006f00:	2140      	movs	r1, #64	; 0x40
 8006f02:	480d      	ldr	r0, [pc, #52]	; (8006f38 <STRHAL_OPAMP_Init+0xa8>)
 8006f04:	f7ff ff3b 	bl	8006d7e <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP3, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8006f08:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006f0c:	480a      	ldr	r0, [pc, #40]	; (8006f38 <STRHAL_OPAMP_Init+0xa8>)
 8006f0e:	f7ff ff4b 	bl	8006da8 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP3, LL_OPAMP_INPUT_NONINVERT_IO0);
 8006f12:	2100      	movs	r1, #0
 8006f14:	4808      	ldr	r0, [pc, #32]	; (8006f38 <STRHAL_OPAMP_Init+0xa8>)
 8006f16:	f7ff ff5a 	bl	8006dce <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP3, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8006f1a:	2140      	movs	r1, #64	; 0x40
 8006f1c:	4806      	ldr	r0, [pc, #24]	; (8006f38 <STRHAL_OPAMP_Init+0xa8>)
 8006f1e:	f7ff ff69 	bl	8006df4 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP3, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 8006f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f26:	4804      	ldr	r0, [pc, #16]	; (8006f38 <STRHAL_OPAMP_Init+0xa8>)
 8006f28:	f7ff ff7c 	bl	8006e24 <LL_OPAMP_SetInternalOutput>
}
 8006f2c:	bf00      	nop
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	48000400 	.word	0x48000400
 8006f34:	40010304 	.word	0x40010304
 8006f38:	40010308 	.word	0x40010308

08006f3c <STRHAL_OPAMP_Run>:

void STRHAL_OPAMP_Run()
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
	LL_OPAMP_Enable(OPAMP2);
 8006f40:	480b      	ldr	r0, [pc, #44]	; (8006f70 <STRHAL_OPAMP_Run+0x34>)
 8006f42:	f7ff ff82 	bl	8006e4a <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP2));
 8006f46:	bf00      	nop
 8006f48:	4809      	ldr	r0, [pc, #36]	; (8006f70 <STRHAL_OPAMP_Run+0x34>)
 8006f4a:	f7ff ff8e 	bl	8006e6a <LL_OPAMP_IsEnabled>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f9      	beq.n	8006f48 <STRHAL_OPAMP_Run+0xc>
	LL_OPAMP_Enable(OPAMP3);
 8006f54:	4807      	ldr	r0, [pc, #28]	; (8006f74 <STRHAL_OPAMP_Run+0x38>)
 8006f56:	f7ff ff78 	bl	8006e4a <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP3));
 8006f5a:	bf00      	nop
 8006f5c:	4805      	ldr	r0, [pc, #20]	; (8006f74 <STRHAL_OPAMP_Run+0x38>)
 8006f5e:	f7ff ff84 	bl	8006e6a <LL_OPAMP_IsEnabled>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f9      	beq.n	8006f5c <STRHAL_OPAMP_Run+0x20>
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40010304 	.word	0x40010304
 8006f74:	40010308 	.word	0x40010308

08006f78 <LL_AHB2_GRP1_EnableClock>:
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006f80:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f84:	4907      	ldr	r1, [pc, #28]	; (8006fa4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4013      	ands	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	40021000 	.word	0x40021000

08006fa8 <LL_AHB3_GRP1_EnableClock>:
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006fb0:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8006fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fb4:	4907      	ldr	r1, [pc, #28]	; (8006fd4 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8006fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40021000 	.word	0x40021000

08006fd8 <_init_GPIO>:
static inline int _wait_for_status(uint32_t flag, uint16_t tot);
static inline int _wait_for_status_clear(uint32_t flag, uint16_t);
static inline void _clear_status(uint32_t flags);

static void _init_GPIO()
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ffca 	bl	8006f78 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8006fe4:	463b      	mov	r3, r7
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	605a      	str	r2, [r3, #4]
 8006fec:	609a      	str	r2, [r3, #8]
 8006fee:	60da      	str	r2, [r3, #12]
 8006ff0:	611a      	str	r2, [r3, #16]
 8006ff2:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11 | LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8007000:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007004:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007006:	2302      	movs	r3, #2
 8007008:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 800700a:	230a      	movs	r3, #10
 800700c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800700e:	463b      	mov	r3, r7
 8007010:	4619      	mov	r1, r3
 8007012:	4803      	ldr	r0, [pc, #12]	; (8007020 <_init_GPIO+0x48>)
 8007014:	f7fc fb57 	bl	80036c6 <LL_GPIO_Init>
}
 8007018:	bf00      	nop
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	48001000 	.word	0x48001000

08007024 <STRHAL_QSPI_Init>:

void STRHAL_QSPI_Init()
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_QSPI);
 8007028:	f44f 7080 	mov.w	r0, #256	; 0x100
 800702c:	f7ff ffbc 	bl	8006fa8 <LL_AHB3_GRP1_EnableClock>
}
 8007030:	bf00      	nop
 8007032:	bd80      	pop	{r7, pc}

08007034 <STRHAL_QSPI_Flash_Init>:

int STRHAL_QSPI_Flash_Init(const STRHAL_QSPI_Config_t *config)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Reset();
 800703c:	f000 f848 	bl	80070d0 <STRHAL_QSPI_Reset>

	_init_GPIO();
 8007040:	f7ff ffca 	bl	8006fd8 <_init_GPIO>

	QUADSPI->CR |= STRHAL_QSPI_FIFO_THRESH << QUADSPI_CR_FTHRES_Pos;
 8007044:	4b21      	ldr	r3, [pc, #132]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 8007046:	4a21      	ldr	r2, [pc, #132]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6013      	str	r3, [r2, #0]

	if (_wait_for_status_clear(QUADSPI_SR_BUSY, 100) < 0)
 800704c:	2164      	movs	r1, #100	; 0x64
 800704e:	2020      	movs	r0, #32
 8007050:	f000 fa20 	bl	8007494 <_wait_for_status_clear>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	da02      	bge.n	8007060 <STRHAL_QSPI_Flash_Init+0x2c>
		return -1;
 800705a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800705e:	e031      	b.n	80070c4 <STRHAL_QSPI_Flash_Init+0x90>

	QUADSPI->CR |= config->psc << QUADSPI_CR_PRESCALER_Pos;
 8007060:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	f3c2 0204 	ubfx	r2, r2, #0, #5
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	0612      	lsls	r2, r2, #24
 8007070:	4611      	mov	r1, r2
 8007072:	4a16      	ldr	r2, [pc, #88]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 8007074:	430b      	orrs	r3, r1
 8007076:	6013      	str	r3, [r2, #0]
	QUADSPI->DCR |= config->flash_size << QUADSPI_DCR_FSIZE_Pos;
 8007078:	4b14      	ldr	r3, [pc, #80]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7852      	ldrb	r2, [r2, #1]
 8007080:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	0412      	lsls	r2, r2, #16
 8007088:	4611      	mov	r1, r2
 800708a:	4a10      	ldr	r2, [pc, #64]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 800708c:	430b      	orrs	r3, r1
 800708e:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->ncs_high_time << QUADSPI_DCR_CSHT_Pos;
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	7852      	ldrb	r2, [r2, #1]
 8007098:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	0212      	lsls	r2, r2, #8
 80070a0:	4611      	mov	r1, r2
 80070a2:	4a0a      	ldr	r2, [pc, #40]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->clk_level << QUADSPI_DCR_CKMODE_Pos;
 80070a8:	4b08      	ldr	r3, [pc, #32]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7892      	ldrb	r2, [r2, #2]
 80070b0:	f3c2 0200 	ubfx	r2, r2, #0, #1
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	4611      	mov	r1, r2
 80070b8:	4a04      	ldr	r2, [pc, #16]	; (80070cc <STRHAL_QSPI_Flash_Init+0x98>)
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6053      	str	r3, [r2, #4]

	STRHAL_QSPI_Run();
 80070be:	f000 f82b 	bl	8007118 <STRHAL_QSPI_Run>

	return 0;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	a0001000 	.word	0xa0001000

080070d0 <STRHAL_QSPI_Reset>:

void STRHAL_QSPI_Reset()
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
	if (QUADSPI->CR & QUADSPI_CR_EN)
 80070d4:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <STRHAL_QSPI_Reset+0x1c>
		QUADSPI->CR &= ~QUADSPI_CR_EN;
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a0b      	ldr	r2, [pc, #44]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	6013      	str	r3, [r2, #0]

	CLEAR_REG(QUADSPI->CR);
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
	CLEAR_REG(QUADSPI->DCR);
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]
	CLEAR_REG(QUADSPI->CCR);
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	615a      	str	r2, [r3, #20]

	QUADSPI->FCR |= (QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	4a04      	ldr	r2, [pc, #16]	; (8007114 <STRHAL_QSPI_Reset+0x44>)
 8007104:	f043 031b 	orr.w	r3, r3, #27
 8007108:	60d3      	str	r3, [r2, #12]
}
 800710a:	bf00      	nop
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	a0001000 	.word	0xa0001000

08007118 <STRHAL_QSPI_Run>:

void STRHAL_QSPI_Run()
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
	QUADSPI->CR |= QUADSPI_CR_EN; // Enable QSPI
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <STRHAL_QSPI_Run+0x1c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a04      	ldr	r2, [pc, #16]	; (8007134 <STRHAL_QSPI_Run+0x1c>)
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	6013      	str	r3, [r2, #0]
}
 8007128:	bf00      	nop
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	a0001000 	.word	0xa0001000

08007138 <STRHAL_QSPI_Indirect_Write>:
{
	QUADSPI->CR &= ~QUADSPI_CR_EN;  // Enable QSPI
}

uint32_t STRHAL_QSPI_Indirect_Write(const STRHAL_QSPI_Command_t *cmd, const uint8_t *data, uint32_t n, uint16_t tot)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 8007146:	887b      	ldrh	r3, [r7, #2]
 8007148:	4619      	mov	r1, r3
 800714a:	2020      	movs	r0, #32
 800714c:	f000 f9a2 	bl	8007494 <_wait_for_status_clear>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	da02      	bge.n	800715c <STRHAL_QSPI_Indirect_Write+0x24>
		return -1;
 8007156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800715a:	e09e      	b.n	800729a <STRHAL_QSPI_Indirect_Write+0x162>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 800715c:	4b51      	ldr	r3, [pc, #324]	; (80072a4 <STRHAL_QSPI_Indirect_Write+0x16c>)
 800715e:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8007160:	201b      	movs	r0, #27
 8007162:	f000 f9c3 	bl	80074ec <_clear_status>

	uint32_t ccr = 0x00000000;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <STRHAL_QSPI_Indirect_Write+0x48>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007176:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 8007178:	4a4b      	ldr	r2, [pc, #300]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3b01      	subs	r3, #1
 800717e:	6113      	str	r3, [r2, #16]
	}

	if (cmd->alt_size > 0)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	7a5b      	ldrb	r3, [r3, #9]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d010      	beq.n	80071aa <STRHAL_QSPI_Indirect_Write+0x72>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800718e:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	7a5b      	ldrb	r3, [r3, #9]
 8007194:	3b01      	subs	r3, #1
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	4313      	orrs	r3, r2
 80071a0:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 80071a2:	4a41      	ldr	r2, [pc, #260]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	7c1b      	ldrb	r3, [r3, #16]
 80071ae:	049b      	lsls	r3, r3, #18
 80071b0:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d026      	beq.n	8007210 <STRHAL_QSPI_Indirect_Write+0xd8>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c8:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	7a1b      	ldrb	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d014      	beq.n	8007208 <STRHAL_QSPI_Indirect_Write+0xd0>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071e4:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	7a1b      	ldrb	r3, [r3, #8]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	031b      	lsls	r3, r3, #12
 80071ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 80071f8:	4a2b      	ldr	r2, [pc, #172]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 80071fe:	4a2a      	ldr	r2, [pc, #168]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6193      	str	r3, [r2, #24]
 8007206:	e01f      	b.n	8007248 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007208:	4a27      	ldr	r2, [pc, #156]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	6153      	str	r3, [r2, #20]
 800720e:	e01b      	b.n	8007248 <STRHAL_QSPI_Indirect_Write+0x110>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	7a1b      	ldrb	r3, [r3, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d014      	beq.n	8007242 <STRHAL_QSPI_Indirect_Write+0x10a>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800721e:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	7a1b      	ldrb	r3, [r3, #8]
 8007224:	3b01      	subs	r3, #1
 8007226:	031b      	lsls	r3, r3, #12
 8007228:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	4313      	orrs	r3, r2
 8007230:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007232:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007238:	4a1b      	ldr	r2, [pc, #108]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	6193      	str	r3, [r2, #24]
 8007240:	e002      	b.n	8007248 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007242:	4a19      	ldr	r2, [pc, #100]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	6153      	str	r3, [r2, #20]
		}
	}

	uint32_t i;
	for (i = 0; i < n; ++i)
 8007248:	2300      	movs	r3, #0
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e012      	b.n	8007274 <STRHAL_QSPI_Indirect_Write+0x13c>
	{
		if (_wait_for_status(QUADSPI_SR_FTF, tot) < 0)
 800724e:	887b      	ldrh	r3, [r7, #2]
 8007250:	4619      	mov	r1, r3
 8007252:	2004      	movs	r0, #4
 8007254:	f000 f8f2 	bl	800743c <_wait_for_status>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	da01      	bge.n	8007262 <STRHAL_QSPI_Indirect_Write+0x12a>
			return i;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	e01b      	b.n	800729a <STRHAL_QSPI_Indirect_Write+0x162>

		*((__IO uint8_t*) data_reg) = data[i];
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	4413      	add	r3, r2
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	3301      	adds	r3, #1
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	429a      	cmp	r2, r3
 800727a:	d3e8      	bcc.n	800724e <STRHAL_QSPI_Indirect_Write+0x116>

	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 800727c:	887b      	ldrh	r3, [r7, #2]
 800727e:	4619      	mov	r1, r3
 8007280:	2002      	movs	r0, #2
 8007282:	f000 f8db 	bl	800743c <_wait_for_status>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <STRHAL_QSPI_Indirect_Write+0x160>
	{
		SET_BIT(QUADSPI->FCR, QUADSPI_FCR_CTCF);
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	4a05      	ldr	r2, [pc, #20]	; (80072a8 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007292:	f043 0302 	orr.w	r3, r3, #2
 8007296:	60d3      	str	r3, [r2, #12]
	}

	return i;
 8007298:	69bb      	ldr	r3, [r7, #24]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3720      	adds	r7, #32
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	a0001020 	.word	0xa0001020
 80072a8:	a0001000 	.word	0xa0001000

080072ac <STRHAL_QSPI_Indirect_Read>:

uint32_t STRHAL_QSPI_Indirect_Read(const STRHAL_QSPI_Command_t *cmd, uint8_t *data, uint32_t n, uint16_t tot)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 80072ba:	887b      	ldrh	r3, [r7, #2]
 80072bc:	4619      	mov	r1, r3
 80072be:	2020      	movs	r0, #32
 80072c0:	f000 f8e8 	bl	8007494 <_wait_for_status_clear>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da02      	bge.n	80072d0 <STRHAL_QSPI_Indirect_Read+0x24>
		return -1;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ce:	e0ad      	b.n	800742c <STRHAL_QSPI_Indirect_Read+0x180>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 80072d0:	4b58      	ldr	r3, [pc, #352]	; (8007434 <STRHAL_QSPI_Indirect_Read+0x188>)
 80072d2:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 80072d4:	201b      	movs	r0, #27
 80072d6:	f000 f909 	bl	80074ec <_clear_status>

	uint32_t ccr = 0x00000000;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]

	ccr |= QUADSPI_CCR_FMODE_0;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072e4:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d007      	beq.n	80072fc <STRHAL_QSPI_Indirect_Read+0x50>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072f2:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 80072f4:	4a50      	ldr	r2, [pc, #320]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	6113      	str	r3, [r2, #16]
	}
	if (cmd->alt_size > 0)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7a5b      	ldrb	r3, [r3, #9]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <STRHAL_QSPI_Indirect_Read+0x7a>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800730a:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	7a5b      	ldrb	r3, [r3, #9]
 8007310:	3b01      	subs	r3, #1
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	4313      	orrs	r3, r2
 800731c:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 800731e:	4a46      	ldr	r2, [pc, #280]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	7c1b      	ldrb	r3, [r3, #16]
 800732a:	049b      	lsls	r3, r3, #18
 800732c:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	4313      	orrs	r3, r2
 8007334:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d026      	beq.n	800738c <STRHAL_QSPI_Indirect_Read+0xe0>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007344:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4313      	orrs	r3, r2
 8007350:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	7a1b      	ldrb	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <STRHAL_QSPI_Indirect_Read+0xd8>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007360:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	7a1b      	ldrb	r3, [r3, #8]
 8007366:	3b01      	subs	r3, #1
 8007368:	031b      	lsls	r3, r3, #12
 800736a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	4313      	orrs	r3, r2
 8007372:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007374:	4a30      	ldr	r2, [pc, #192]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 800737a:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	6193      	str	r3, [r2, #24]
 8007382:	e01f      	b.n	80073c4 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007384:	4a2c      	ldr	r2, [pc, #176]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	6153      	str	r3, [r2, #20]
 800738a:	e01b      	b.n	80073c4 <STRHAL_QSPI_Indirect_Read+0x118>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	7a1b      	ldrb	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d014      	beq.n	80073be <STRHAL_QSPI_Indirect_Read+0x112>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800739a:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7a1b      	ldrb	r3, [r3, #8]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	031b      	lsls	r3, r3, #12
 80073a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 80073ae:	4a22      	ldr	r2, [pc, #136]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 80073b4:	4a20      	ldr	r2, [pc, #128]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	6193      	str	r3, [r2, #24]
 80073bc:	e002      	b.n	80073c4 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <STRHAL_QSPI_Indirect_Read+0x18c>)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	6153      	str	r3, [r2, #20]
		}
	}

	if (_wait_for_status(QUADSPI_SR_BUSY, tot) < 0)
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	4619      	mov	r1, r3
 80073c8:	2020      	movs	r0, #32
 80073ca:	f000 f837 	bl	800743c <_wait_for_status>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da01      	bge.n	80073d8 <STRHAL_QSPI_Indirect_Read+0x12c>
		return 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e029      	b.n	800742c <STRHAL_QSPI_Indirect_Read+0x180>

	uint32_t i;
	for (i = 0; i < n; ++i)
 80073d8:	2300      	movs	r3, #0
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	e016      	b.n	800740c <STRHAL_QSPI_Indirect_Read+0x160>
	{
		if (_wait_for_status(QUADSPI_SR_FTF | QUADSPI_SR_TCF, tot) < 0)
 80073de:	887b      	ldrh	r3, [r7, #2]
 80073e0:	4619      	mov	r1, r3
 80073e2:	2006      	movs	r0, #6
 80073e4:	f000 f82a 	bl	800743c <_wait_for_status>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da04      	bge.n	80073f8 <STRHAL_QSPI_Indirect_Read+0x14c>
		{
			_clear_status(QUADSPI_SR_TCF);
 80073ee:	2002      	movs	r0, #2
 80073f0:	f000 f87c 	bl	80074ec <_clear_status>
			return i;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	e019      	b.n	800742c <STRHAL_QSPI_Indirect_Read+0x180>
		}
		data[i] = *((__IO uint8_t*) data_reg);
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	4413      	add	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	3301      	adds	r3, #1
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d3e4      	bcc.n	80073de <STRHAL_QSPI_Indirect_Read+0x132>
	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8007414:	887b      	ldrh	r3, [r7, #2]
 8007416:	4619      	mov	r1, r3
 8007418:	2002      	movs	r0, #2
 800741a:	f000 f80f 	bl	800743c <_wait_for_status>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <STRHAL_QSPI_Indirect_Read+0x17e>
	{
		_clear_status(QUADSPI_SR_TCF);
 8007424:	2002      	movs	r0, #2
 8007426:	f000 f861 	bl	80074ec <_clear_status>
	}
	return i;
 800742a:	69bb      	ldr	r3, [r7, #24]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3720      	adds	r7, #32
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	a0001020 	.word	0xa0001020
 8007438:	a0001000 	.word	0xa0001000

0800743c <_wait_for_status>:

int _wait_for_status(uint32_t flag, uint16_t tot)
{
 800743c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 800744a:	f000 f91f 	bl	800768c <STRHAL_Systick_GetTick>
 800744e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (!(QUADSPI->SR & flag))
 8007452:	e011      	b.n	8007478 <_wait_for_status+0x3c>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 8007454:	f000 f91a 	bl	800768c <STRHAL_Systick_GetTick>
 8007458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800745c:	1a84      	subs	r4, r0, r2
 800745e:	eb61 0503 	sbc.w	r5, r1, r3
 8007462:	887b      	ldrh	r3, [r7, #2]
 8007464:	2200      	movs	r2, #0
 8007466:	4698      	mov	r8, r3
 8007468:	4691      	mov	r9, r2
 800746a:	45a0      	cmp	r8, r4
 800746c:	eb79 0305 	sbcs.w	r3, r9, r5
 8007470:	d202      	bcs.n	8007478 <_wait_for_status+0x3c>
			return -1;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007476:	e006      	b.n	8007486 <_wait_for_status+0x4a>
	while (!(QUADSPI->SR & flag))
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <_wait_for_status+0x54>)
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4013      	ands	r3, r2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0e7      	beq.n	8007454 <_wait_for_status+0x18>
	}
	return 0;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007490:	a0001000 	.word	0xa0001000

08007494 <_wait_for_status_clear>:

int _wait_for_status_clear(uint32_t flag, uint16_t tot)
{
 8007494:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 80074a2:	f000 f8f3 	bl	800768c <STRHAL_Systick_GetTick>
 80074a6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (QUADSPI->SR & flag)
 80074aa:	e011      	b.n	80074d0 <_wait_for_status_clear+0x3c>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 80074ac:	f000 f8ee 	bl	800768c <STRHAL_Systick_GetTick>
 80074b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074b4:	1a84      	subs	r4, r0, r2
 80074b6:	eb61 0503 	sbc.w	r5, r1, r3
 80074ba:	887b      	ldrh	r3, [r7, #2]
 80074bc:	2200      	movs	r2, #0
 80074be:	4698      	mov	r8, r3
 80074c0:	4691      	mov	r9, r2
 80074c2:	45a0      	cmp	r8, r4
 80074c4:	eb79 0305 	sbcs.w	r3, r9, r5
 80074c8:	d202      	bcs.n	80074d0 <_wait_for_status_clear+0x3c>
			return -1;
 80074ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ce:	e006      	b.n	80074de <_wait_for_status_clear+0x4a>
	while (QUADSPI->SR & flag)
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <_wait_for_status_clear+0x54>)
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4013      	ands	r3, r2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e7      	bne.n	80074ac <_wait_for_status_clear+0x18>
	}
	return 0;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80074e8:	a0001000 	.word	0xa0001000

080074ec <_clear_status>:

void _clear_status(uint32_t flags)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	QUADSPI->FCR |= (flags);
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <_clear_status+0x20>)
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	4904      	ldr	r1, [pc, #16]	; (800750c <_clear_status+0x20>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60cb      	str	r3, [r1, #12]
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	a0001000 	.word	0xa0001000

08007510 <LL_AHB2_GRP1_EnableClock>:
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007518:	4b08      	ldr	r3, [pc, #32]	; (800753c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800751a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800751c:	4907      	ldr	r1, [pc, #28]	; (800753c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4313      	orrs	r3, r2
 8007522:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007524:	4b05      	ldr	r3, [pc, #20]	; (800753c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4013      	ands	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	40021000 	.word	0x40021000

08007540 <LL_APB1_GRP1_EnableClock>:
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007548:	4b08      	ldr	r3, [pc, #32]	; (800756c <LL_APB1_GRP1_EnableClock+0x2c>)
 800754a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800754c:	4907      	ldr	r1, [pc, #28]	; (800756c <LL_APB1_GRP1_EnableClock+0x2c>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4313      	orrs	r3, r2
 8007552:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007556:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4013      	ands	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800755e:	68fb      	ldr	r3, [r7, #12]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40021000 	.word	0x40021000

08007570 <LL_APB2_GRP1_EnableClock>:
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007578:	4b08      	ldr	r3, [pc, #32]	; (800759c <LL_APB2_GRP1_EnableClock+0x2c>)
 800757a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800757c:	4907      	ldr	r1, [pc, #28]	; (800759c <LL_APB2_GRP1_EnableClock+0x2c>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4313      	orrs	r3, r2
 8007582:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4013      	ands	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800758e:	68fb      	ldr	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	40021000 	.word	0x40021000

080075a0 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <STRHAL_SPI_Init>:
static inline int _wait_for_rxtxend(SPI_TypeDef *spix, uint16_t tot);
static inline int _wait_for_rxne(SPI_TypeDef *spix, uint16_t tot);
static inline int _rx_flush(SPI_TypeDef *spix, uint16_t tot);

void STRHAL_SPI_Init()
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80075c4:	2004      	movs	r0, #4
 80075c6:	f7ff ffa3 	bl	8007510 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80075ca:	2020      	movs	r0, #32
 80075cc:	f7ff ffa0 	bl	8007510 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80075d0:	2001      	movs	r0, #1
 80075d2:	f7ff ff9d 	bl	8007510 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80075d6:	2002      	movs	r0, #2
 80075d8:	f7ff ff9a 	bl	8007510 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80075dc:	2010      	movs	r0, #16
 80075de:	f7ff ff97 	bl	8007510 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80075e2:	2008      	movs	r0, #8
 80075e4:	f7ff ff94 	bl	8007510 <LL_AHB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80075e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80075ec:	f7ff ffc0 	bl	8007570 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80075f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80075f4:	f7ff ffa4 	bl	8007540 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80075f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80075fc:	f7ff ffa0 	bl	8007540 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8007600:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007604:	f7ff ff9c 	bl	8007540 <LL_APB1_GRP1_EnableClock>

	LL_SPI_DeInit(SPI1);
 8007608:	480c      	ldr	r0, [pc, #48]	; (800763c <STRHAL_SPI_Init+0x7c>)
 800760a:	f7fc fbc5 	bl	8003d98 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI2);
 800760e:	480c      	ldr	r0, [pc, #48]	; (8007640 <STRHAL_SPI_Init+0x80>)
 8007610:	f7fc fbc2 	bl	8003d98 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI3);
 8007614:	480b      	ldr	r0, [pc, #44]	; (8007644 <STRHAL_SPI_Init+0x84>)
 8007616:	f7fc fbbf 	bl	8003d98 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI4);
 800761a:	480b      	ldr	r0, [pc, #44]	; (8007648 <STRHAL_SPI_Init+0x88>)
 800761c:	f7fc fbbc 	bl	8003d98 <LL_SPI_DeInit>

	LL_SPI_Disable(SPI1);
 8007620:	4806      	ldr	r0, [pc, #24]	; (800763c <STRHAL_SPI_Init+0x7c>)
 8007622:	f7ff ffbd 	bl	80075a0 <LL_SPI_Disable>
	LL_SPI_Disable(SPI2);
 8007626:	4806      	ldr	r0, [pc, #24]	; (8007640 <STRHAL_SPI_Init+0x80>)
 8007628:	f7ff ffba 	bl	80075a0 <LL_SPI_Disable>
	LL_SPI_Disable(SPI3);
 800762c:	4805      	ldr	r0, [pc, #20]	; (8007644 <STRHAL_SPI_Init+0x84>)
 800762e:	f7ff ffb7 	bl	80075a0 <LL_SPI_Disable>
	LL_SPI_Disable(SPI4);
 8007632:	4805      	ldr	r0, [pc, #20]	; (8007648 <STRHAL_SPI_Init+0x88>)
 8007634:	f7ff ffb4 	bl	80075a0 <LL_SPI_Disable>
}
 8007638:	bf00      	nop
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40013000 	.word	0x40013000
 8007640:	40003800 	.word	0x40003800
 8007644:	40003c00 	.word	0x40003c00
 8007648:	40013c00 	.word	0x40013c00

0800764c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <LL_SYSTICK_EnableIT+0x1c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a04      	ldr	r2, [pc, #16]	; (8007668 <LL_SYSTICK_EnableIT+0x1c>)
 8007656:	f043 0302 	orr.w	r3, r3, #2
 800765a:	6013      	str	r3, [r2, #0]
}
 800765c:	bf00      	nop
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	e000e010 	.word	0xe000e010

0800766c <STRHAL_SysTick_Init>:
#include <STRHAL_SysTick.h>

static volatile uint64_t systick_count = 0;

void STRHAL_SysTick_Init()
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
	//LL_Init1msTick(SystemCoreClock);
	//1ms tick already in STRHAL.c sysclock init
	LL_SYSTICK_EnableIT();
 8007670:	f7ff ffec 	bl	800764c <LL_SYSTICK_EnableIT>
	systick_count = 0;
 8007674:	4904      	ldr	r1, [pc, #16]	; (8007688 <STRHAL_SysTick_Init+0x1c>)
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000b58 	.word	0x20000b58

0800768c <STRHAL_Systick_GetTick>:
	uint64_t end = systick_count + ticks;
	while (systick_count < end);
}

uint64_t STRHAL_Systick_GetTick()
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
	return systick_count;
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <STRHAL_Systick_GetTick+0x18>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8007696:	4610      	mov	r0, r2
 8007698:	4619      	mov	r1, r3
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000b58 	.word	0x20000b58

080076a8 <SysTick_Handler>:

void SysTick_Handler()
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
	systick_count++;
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <SysTick_Handler+0x20>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	1c50      	adds	r0, r2, #1
 80076b4:	f143 0100 	adc.w	r1, r3, #0
 80076b8:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <SysTick_Handler+0x20>)
 80076ba:	e9c3 0100 	strd	r0, r1, [r3]
}
 80076be:	bf00      	nop
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20000b58 	.word	0x20000b58

080076cc <__NVIC_GetPriorityGrouping>:
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076d0:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <__NVIC_GetPriorityGrouping+0x18>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	f003 0307 	and.w	r3, r3, #7
}
 80076da:	4618      	mov	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	e000ed00 	.word	0xe000ed00

080076e8 <__NVIC_EnableIRQ>:
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	db0b      	blt.n	8007712 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076fa:	79fb      	ldrb	r3, [r7, #7]
 80076fc:	f003 021f 	and.w	r2, r3, #31
 8007700:	4907      	ldr	r1, [pc, #28]	; (8007720 <__NVIC_EnableIRQ+0x38>)
 8007702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	2001      	movs	r0, #1
 800770a:	fa00 f202 	lsl.w	r2, r0, r2
 800770e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	e000e100 	.word	0xe000e100

08007724 <__NVIC_SetPriority>:
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007734:	2b00      	cmp	r3, #0
 8007736:	db0a      	blt.n	800774e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	490c      	ldr	r1, [pc, #48]	; (8007770 <__NVIC_SetPriority+0x4c>)
 800773e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007742:	0112      	lsls	r2, r2, #4
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	440b      	add	r3, r1
 8007748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800774c:	e00a      	b.n	8007764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4908      	ldr	r1, [pc, #32]	; (8007774 <__NVIC_SetPriority+0x50>)
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	3b04      	subs	r3, #4
 800775c:	0112      	lsls	r2, r2, #4
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	440b      	add	r3, r1
 8007762:	761a      	strb	r2, [r3, #24]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	e000e100 	.word	0xe000e100
 8007774:	e000ed00 	.word	0xe000ed00

08007778 <NVIC_EncodePriority>:
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	; 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f1c3 0307 	rsb	r3, r3, #7
 8007792:	2b04      	cmp	r3, #4
 8007794:	bf28      	it	cs
 8007796:	2304      	movcs	r3, #4
 8007798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3304      	adds	r3, #4
 800779e:	2b06      	cmp	r3, #6
 80077a0:	d902      	bls.n	80077a8 <NVIC_EncodePriority+0x30>
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3b03      	subs	r3, #3
 80077a6:	e000      	b.n	80077aa <NVIC_EncodePriority+0x32>
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	43da      	mvns	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	401a      	ands	r2, r3
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	43d9      	mvns	r1, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077d0:	4313      	orrs	r3, r2
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3724      	adds	r7, #36	; 0x24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <LL_AHB2_GRP1_EnableClock>:
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80077e8:	4b08      	ldr	r3, [pc, #32]	; (800780c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80077ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ec:	4907      	ldr	r1, [pc, #28]	; (800780c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80077f4:	4b05      	ldr	r3, [pc, #20]	; (800780c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80077f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4013      	ands	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40021000 	.word	0x40021000

08007810 <LL_APB1_GRP1_EnableClock>:
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007818:	4b08      	ldr	r3, [pc, #32]	; (800783c <LL_APB1_GRP1_EnableClock+0x2c>)
 800781a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800781c:	4907      	ldr	r1, [pc, #28]	; (800783c <LL_APB1_GRP1_EnableClock+0x2c>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4313      	orrs	r3, r2
 8007822:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007824:	4b05      	ldr	r3, [pc, #20]	; (800783c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4013      	ands	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	40021000 	.word	0x40021000

08007840 <LL_APB2_GRP1_EnableClock>:
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007848:	4b08      	ldr	r3, [pc, #32]	; (800786c <LL_APB2_GRP1_EnableClock+0x2c>)
 800784a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800784c:	4907      	ldr	r1, [pc, #28]	; (800786c <LL_APB2_GRP1_EnableClock+0x2c>)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4313      	orrs	r3, r2
 8007852:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4013      	ands	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800785e:	68fb      	ldr	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40021000 	.word	0x40021000

08007870 <LL_TIM_EnableCounter>:
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f043 0201 	orr.w	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <LL_TIM_IsEnabledCounter>:
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <LL_TIM_IsEnabledCounter+0x18>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <LL_TIM_IsEnabledCounter+0x1a>
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <LL_TIM_EnableARRPreload>:
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <LL_TIM_CC_EnableChannel>:
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	621a      	str	r2, [r3, #32]
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <LL_TIM_CC_DisableChannel>:
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1a      	ldr	r2, [r3, #32]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	43db      	mvns	r3, r3
 800790a:	401a      	ands	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	621a      	str	r2, [r3, #32]
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <LL_TIM_OC_DisableFast>:
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d02e      	beq.n	800798a <LL_TIM_OC_DisableFast+0x6e>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b04      	cmp	r3, #4
 8007930:	d029      	beq.n	8007986 <LL_TIM_OC_DisableFast+0x6a>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b10      	cmp	r3, #16
 8007936:	d024      	beq.n	8007982 <LL_TIM_OC_DisableFast+0x66>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d01f      	beq.n	800797e <LL_TIM_OC_DisableFast+0x62>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007944:	d019      	beq.n	800797a <LL_TIM_OC_DisableFast+0x5e>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794c:	d013      	beq.n	8007976 <LL_TIM_OC_DisableFast+0x5a>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007954:	d00d      	beq.n	8007972 <LL_TIM_OC_DisableFast+0x56>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800795c:	d007      	beq.n	800796e <LL_TIM_OC_DisableFast+0x52>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007964:	d101      	bne.n	800796a <LL_TIM_OC_DisableFast+0x4e>
 8007966:	2308      	movs	r3, #8
 8007968:	e010      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 800796a:	2309      	movs	r3, #9
 800796c:	e00e      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 800796e:	2307      	movs	r3, #7
 8007970:	e00c      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 8007972:	2306      	movs	r3, #6
 8007974:	e00a      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 8007976:	2305      	movs	r3, #5
 8007978:	e008      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 800797a:	2304      	movs	r3, #4
 800797c:	e006      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 800797e:	2303      	movs	r3, #3
 8007980:	e004      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 8007982:	2302      	movs	r3, #2
 8007984:	e002      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <LL_TIM_OC_DisableFast+0x70>
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3318      	adds	r3, #24
 8007992:	4619      	mov	r1, r3
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	4a0b      	ldr	r2, [pc, #44]	; (80079c4 <LL_TIM_OC_DisableFast+0xa8>)
 8007998:	5cd3      	ldrb	r3, [r2, r3]
 800799a:	440b      	add	r3, r1
 800799c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	4908      	ldr	r1, [pc, #32]	; (80079c8 <LL_TIM_OC_DisableFast+0xac>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	4619      	mov	r1, r3
 80079aa:	2304      	movs	r3, #4
 80079ac:	408b      	lsls	r3, r1
 80079ae:	43db      	mvns	r3, r3
 80079b0:	401a      	ands	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	601a      	str	r2, [r3, #0]
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	080099f0 	.word	0x080099f0
 80079c8:	080099fc 	.word	0x080099fc

080079cc <LL_TIM_OC_EnablePreload>:
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d02e      	beq.n	8007a3a <LL_TIM_OC_EnablePreload+0x6e>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d029      	beq.n	8007a36 <LL_TIM_OC_EnablePreload+0x6a>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d024      	beq.n	8007a32 <LL_TIM_OC_EnablePreload+0x66>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	d01f      	beq.n	8007a2e <LL_TIM_OC_EnablePreload+0x62>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f4:	d019      	beq.n	8007a2a <LL_TIM_OC_EnablePreload+0x5e>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fc:	d013      	beq.n	8007a26 <LL_TIM_OC_EnablePreload+0x5a>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a04:	d00d      	beq.n	8007a22 <LL_TIM_OC_EnablePreload+0x56>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a0c:	d007      	beq.n	8007a1e <LL_TIM_OC_EnablePreload+0x52>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a14:	d101      	bne.n	8007a1a <LL_TIM_OC_EnablePreload+0x4e>
 8007a16:	2308      	movs	r3, #8
 8007a18:	e010      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a1a:	2309      	movs	r3, #9
 8007a1c:	e00e      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a1e:	2307      	movs	r3, #7
 8007a20:	e00c      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a22:	2306      	movs	r3, #6
 8007a24:	e00a      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a26:	2305      	movs	r3, #5
 8007a28:	e008      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a2a:	2304      	movs	r3, #4
 8007a2c:	e006      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e004      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e002      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <LL_TIM_OC_EnablePreload+0x70>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4619      	mov	r1, r3
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <LL_TIM_OC_EnablePreload+0xa4>)
 8007a48:	5cd3      	ldrb	r3, [r2, r3]
 8007a4a:	440b      	add	r3, r1
 8007a4c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	4907      	ldr	r1, [pc, #28]	; (8007a74 <LL_TIM_OC_EnablePreload+0xa8>)
 8007a56:	5ccb      	ldrb	r3, [r1, r3]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	408b      	lsls	r3, r1
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	080099f0 	.word	0x080099f0
 8007a74:	080099fc 	.word	0x080099fc

08007a78 <LL_TIM_DisableMasterSlaveMode>:
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	609a      	str	r2, [r3, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <LL_TIM_EnableAutomaticOutput>:
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <LL_TIM_ClearFlag_UPDATE>:
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f06f 0201 	mvn.w	r2, #1
 8007ac6:	611a      	str	r2, [r3, #16]
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <LL_TIM_EnableIT_UPDATE>:
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f043 0201 	orr.w	r2, r3, #1
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60da      	str	r2, [r3, #12]
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <STRHAL_TIM_Init>:
 [STRHAL_TIM_TIM8_CH4N_PC13] = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_13, .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4N_PD0]  = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_0,  .afn = LL_GPIO_AF_6,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4_PD1]   = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_1,  .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4,  .ccr = &TIM8->CCR4, }, };

void STRHAL_TIM_Init()
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f7ff fe5e 	bl	80077e0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007b24:	2002      	movs	r0, #2
 8007b26:	f7ff fe5b 	bl	80077e0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007b2a:	2004      	movs	r0, #4
 8007b2c:	f7ff fe58 	bl	80077e0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8007b30:	2008      	movs	r0, #8
 8007b32:	f7ff fe55 	bl	80077e0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8007b36:	2010      	movs	r0, #16
 8007b38:	f7ff fe52 	bl	80077e0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007b3c:	2020      	movs	r0, #32
 8007b3e:	f7ff fe4f 	bl	80077e0 <LL_AHB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8007b42:	2001      	movs	r0, #1
 8007b44:	f7ff fe64 	bl	8007810 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8007b48:	2002      	movs	r0, #2
 8007b4a:	f7ff fe61 	bl	8007810 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8007b4e:	2004      	movs	r0, #4
 8007b50:	f7ff fe5e 	bl	8007810 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8007b54:	2010      	movs	r0, #16
 8007b56:	f7ff fe5b 	bl	8007810 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8007b5a:	2020      	movs	r0, #32
 8007b5c:	f7ff fe58 	bl	8007810 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8007b60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b64:	f7ff fe6c 	bl	8007840 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8007b68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007b6c:	f7ff fe68 	bl	8007840 <LL_APB2_GRP1_EnableClock>

	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007b70:	2036      	movs	r0, #54	; 0x36
 8007b72:	f7ff fdb9 	bl	80076e8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8007b76:	2037      	movs	r0, #55	; 0x37
 8007b78:	f7ff fdb6 	bl	80076e8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 3));
 8007b7c:	f7ff fda6 	bl	80076cc <__NVIC_GetPriorityGrouping>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2203      	movs	r2, #3
 8007b84:	2101      	movs	r1, #1
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fdf6 	bl	8007778 <NVIC_EncodePriority>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	4619      	mov	r1, r3
 8007b90:	2036      	movs	r0, #54	; 0x36
 8007b92:	f7ff fdc7 	bl	8007724 <__NVIC_SetPriority>
	NVIC_SetPriority(TIM7_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2)); //TODO check priorities
 8007b96:	f7ff fd99 	bl	80076cc <__NVIC_GetPriorityGrouping>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fde9 	bl	8007778 <NVIC_EncodePriority>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4619      	mov	r1, r3
 8007baa:	2037      	movs	r0, #55	; 0x37
 8007bac:	f7ff fdba 	bl	8007724 <__NVIC_SetPriority>
}
 8007bb0:	bf00      	nop
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <STRHAL_TIM_PWM_Init>:

int32_t STRHAL_TIM_PWM_Init(STRHAL_TIM_TimerId_t id, uint16_t psc, uint16_t res)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	80bb      	strh	r3, [r7, #4]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_TIM || id < 0)
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	d902      	bls.n	8007bd2 <STRHAL_TIM_PWM_Init+0x1e>
		return -1;
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd0:	e06e      	b.n	8007cb0 <STRHAL_TIM_PWM_Init+0xfc>

	STRHAL_TIM_Timer_t *tim = &_tims[id];
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	4a38      	ldr	r2, [pc, #224]	; (8007cb8 <STRHAL_TIM_PWM_Init+0x104>)
 8007bd8:	4413      	add	r3, r2
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype == STRHAL_TIM_USAGE_PWM)
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	79db      	ldrb	r3, [r3, #7]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d101      	bne.n	8007be8 <STRHAL_TIM_PWM_Init+0x34>
		return 0; //TODO: return actual hardware Frequency
 8007be4:	2300      	movs	r3, #0
 8007be6:	e063      	b.n	8007cb0 <STRHAL_TIM_PWM_Init+0xfc>

	if (tim->utype != STRHAL_TIM_USAGE_000)
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	79db      	ldrb	r3, [r3, #7]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <STRHAL_TIM_PWM_Init+0x42>
		return -1;
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bf4:	e05c      	b.n	8007cb0 <STRHAL_TIM_PWM_Init+0xfc>

	LL_TIM_InitTypeDef TIM_InitStruct =
 8007bf6:	f107 030c 	add.w	r3, r7, #12
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	605a      	str	r2, [r3, #4]
 8007c00:	609a      	str	r2, [r3, #8]
 8007c02:	60da      	str	r2, [r3, #12]
 8007c04:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 8007c0e:	887b      	ldrh	r3, [r7, #2]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 8007c14:	88bb      	ldrh	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <STRHAL_TIM_PWM_Init+0x6e>
 8007c1a:	88bb      	ldrh	r3, [r7, #4]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	e000      	b.n	8007c24 <STRHAL_TIM_PWM_Init+0x70>
 8007c22:	88bb      	ldrh	r3, [r7, #4]
 8007c24:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f107 020c 	add.w	r2, r7, #12
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fc f98d 	bl	8003f50 <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fe3b 	bl	80078b6 <LL_TIM_EnableARRPreload>
	if (IS_TIM_BREAK_INSTANCE(tim->timx))
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1d      	ldr	r2, [pc, #116]	; (8007cbc <STRHAL_TIM_PWM_Init+0x108>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d018      	beq.n	8007c7c <STRHAL_TIM_PWM_Init+0xc8>
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <STRHAL_TIM_PWM_Init+0x10c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d013      	beq.n	8007c7c <STRHAL_TIM_PWM_Init+0xc8>
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <STRHAL_TIM_PWM_Init+0x110>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00e      	beq.n	8007c7c <STRHAL_TIM_PWM_Init+0xc8>
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <STRHAL_TIM_PWM_Init+0x114>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d009      	beq.n	8007c7c <STRHAL_TIM_PWM_Init+0xc8>
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <STRHAL_TIM_PWM_Init+0x118>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <STRHAL_TIM_PWM_Init+0xc8>
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a16      	ldr	r2, [pc, #88]	; (8007cd0 <STRHAL_TIM_PWM_Init+0x11c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d104      	bne.n	8007c86 <STRHAL_TIM_PWM_Init+0xd2>
		LL_TIM_EnableAutomaticOutput(tim->timx);
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff09 	bl	8007a98 <LL_TIM_EnableAutomaticOutput>

	LL_TIM_DisableMasterSlaveMode(tim->timx);
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fef4 	bl	8007a78 <LL_TIM_DisableMasterSlaveMode>

	tim->cfreq = 0;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	2200      	movs	r2, #0
 8007c94:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_PWM;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	2202      	movs	r2, #2
 8007c9a:	71da      	strb	r2, [r3, #7]

	uint16_t freq = SystemCoreClock / (res * psc);
 8007c9c:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <STRHAL_TIM_PWM_Init+0x120>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	887a      	ldrh	r2, [r7, #2]
 8007ca2:	88b9      	ldrh	r1, [r7, #4]
 8007ca4:	fb01 f202 	mul.w	r2, r1, r2
 8007ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cac:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 8007cae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3728      	adds	r7, #40	; 0x28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	2000004c 	.word	0x2000004c
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40013400 	.word	0x40013400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	40014400 	.word	0x40014400
 8007ccc:	40014800 	.word	0x40014800
 8007cd0:	40015000 	.word	0x40015000
 8007cd4:	20000000 	.word	0x20000000

08007cd8 <STRHAL_TIM_PWM_AddChannel>:

int STRHAL_TIM_PWM_AddChannel(STRHAL_TIM_PWM_Channel_t *pwmChannel, STRHAL_TIM_ChannelId_t channelId, STRHAL_TIM_PWM_ChannelType_t pwmType)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b092      	sub	sp, #72	; 0x48
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	70bb      	strb	r3, [r7, #2]
	if (channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	2b5b      	cmp	r3, #91	; 0x5b
 8007cec:	d902      	bls.n	8007cf4 <STRHAL_TIM_PWM_AddChannel+0x1c>
		return -1;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cf2:	e060      	b.n	8007db6 <STRHAL_TIM_PWM_AddChannel+0xde>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[channelId];
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	4413      	add	r3, r2
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	4a30      	ldr	r2, [pc, #192]	; (8007dc0 <STRHAL_TIM_PWM_AddChannel+0xe8>)
 8007d00:	4413      	add	r3, r2
 8007d02:	647b      	str	r3, [r7, #68]	; 0x44
	if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_SO)
 8007d04:	78bb      	ldrb	r3, [r7, #2]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d14e      	bne.n	8007da8 <STRHAL_TIM_PWM_AddChannel+0xd0>
	{

		LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	605a      	str	r2, [r3, #4]
 8007d14:	609a      	str	r2, [r3, #8]
 8007d16:	60da      	str	r2, [r3, #12]
 8007d18:	611a      	str	r2, [r3, #16]
 8007d1a:	615a      	str	r2, [r3, #20]
		{ 0 };
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = ch->afn;
 8007d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Pin = ch->pin;
 8007d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007d30:	2300      	movs	r3, #0
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8007d34:	2302      	movs	r3, #2
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
		LL_GPIO_Init(ch->port, &GPIO_InitStruct);
 8007d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007d40:	4611      	mov	r1, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fb fcbf 	bl	80036c6 <LL_GPIO_Init>

		LL_TIM_OC_InitTypeDef OC_InitStruct =
 8007d48:	f107 030c 	add.w	r3, r7, #12
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 f86b 	bl	8008e2c <memset>
		{ 0 };
		OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007d56:	2360      	movs	r3, #96	; 0x60
 8007d58:	60fb      	str	r3, [r7, #12]
		OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
		OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	61fb      	str	r3, [r7, #28]
		OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_LOW;
 8007d62:	2302      	movs	r3, #2
 8007d64:	623b      	str	r3, [r7, #32]
		OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007d66:	2300      	movs	r3, #0
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
		OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_HIGH;
 8007d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28
		LL_TIM_OC_Init(ch->tim->timx, ch->n, &OC_InitStruct);
 8007d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f107 020c 	add.w	r2, r7, #12
 8007d7e:	4619      	mov	r1, r3
 8007d80:	f7fc f988 	bl	8004094 <LL_TIM_OC_Init>
		LL_TIM_OC_EnablePreload(ch->tim->timx, ch->n);
 8007d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f7ff fe1b 	bl	80079cc <LL_TIM_OC_EnablePreload>
		LL_TIM_OC_DisableFast(ch->tim->timx, ch->n);
 8007d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f7ff fdba 	bl	800791c <LL_TIM_OC_DisableFast>
	else if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_IN)
	{
		//LL_TIM_IC_InitTypeDef IC_InitStruct = {0};
	}

	pwmChannel->channelId = channelId;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	78fa      	ldrb	r2, [r7, #3]
 8007dac:	701a      	strb	r2, [r3, #0]
	pwmChannel->type = pwmType;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	78ba      	ldrb	r2, [r7, #2]
 8007db2:	705a      	strb	r2, [r3, #1]
	return 0;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3748      	adds	r7, #72	; 0x48
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08009a08 	.word	0x08009a08

08007dc4 <STRHAL_TIM_PWM_SetDuty>:
	LL_TIM_SetAutoReload(tim->timx, res - 1);
	return SystemCoreClock / (psc * res);
}

int32_t STRHAL_TIM_PWM_SetDuty(STRHAL_TIM_PWM_Channel_t *pwmChannel, uint16_t duty)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	807b      	strh	r3, [r7, #2]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b5b      	cmp	r3, #91	; 0x5b
 8007dd6:	d902      	bls.n	8007dde <STRHAL_TIM_PWM_SetDuty+0x1a>
		return -1;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ddc:	e016      	b.n	8007e0c <STRHAL_TIM_PWM_SetDuty+0x48>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	4613      	mov	r3, r2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	4413      	add	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4a0a      	ldr	r2, [pc, #40]	; (8007e18 <STRHAL_TIM_PWM_SetDuty+0x54>)
 8007dee:	4413      	add	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	79db      	ldrb	r3, [r3, #7]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d002      	beq.n	8007e02 <STRHAL_TIM_PWM_SetDuty+0x3e>
		return -1;
 8007dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e00:	e004      	b.n	8007e0c <STRHAL_TIM_PWM_SetDuty+0x48>

	*ch->ccr = duty;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	887a      	ldrh	r2, [r7, #2]
 8007e08:	601a      	str	r2, [r3, #0]
	return duty;
 8007e0a:	887b      	ldrh	r3, [r7, #2]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	08009a08 	.word	0x08009a08

08007e1c <STRHAL_TIM_PWM_Enable>:

int STRHAL_TIM_PWM_Enable(STRHAL_TIM_PWM_Channel_t *pwmChannel, int enable)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b5b      	cmp	r3, #91	; 0x5b
 8007e2c:	d902      	bls.n	8007e34 <STRHAL_TIM_PWM_Enable+0x18>
		return -1;
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e32:	e037      	b.n	8007ea4 <STRHAL_TIM_PWM_Enable+0x88>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	4413      	add	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <STRHAL_TIM_PWM_Enable+0x90>)
 8007e44:	4413      	add	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	79db      	ldrb	r3, [r3, #7]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d002      	beq.n	8007e58 <STRHAL_TIM_PWM_Enable+0x3c>
		return -1;
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e56:	e025      	b.n	8007ea4 <STRHAL_TIM_PWM_Enable+0x88>

	if (enable)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d018      	beq.n	8007e90 <STRHAL_TIM_PWM_Enable+0x74>
	{
		LL_TIM_CC_EnableChannel(ch->tim->timx, ch->n);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7ff fd33 	bl	80078d6 <LL_TIM_CC_EnableChannel>
		if (!LL_TIM_IsEnabledCounter(ch->tim->timx))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fd0a 	bl	8007890 <LL_TIM_IsEnabledCounter>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10f      	bne.n	8007ea2 <STRHAL_TIM_PWM_Enable+0x86>
			LL_TIM_EnableCounter(ch->tim->timx);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fcf1 	bl	8007870 <LL_TIM_EnableCounter>
 8007e8e:	e008      	b.n	8007ea2 <STRHAL_TIM_PWM_Enable+0x86>
	}
	else
	{
		LL_TIM_CC_DisableChannel(ch->tim->timx, ch->n);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7ff fd2b 	bl	80078f8 <LL_TIM_CC_DisableChannel>
	}

	return enable;
 8007ea2:	683b      	ldr	r3, [r7, #0]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	08009a08 	.word	0x08009a08

08007eb0 <STRHAL_TIM_Heartbeat_Init>:

int32_t STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_BasicTimerId_t id, uint16_t psc, uint16_t res)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	; 0x28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	80bb      	strh	r3, [r7, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d902      	bls.n	8007ece <STRHAL_TIM_Heartbeat_Init+0x1e>
		return -1;
 8007ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ecc:	e043      	b.n	8007f56 <STRHAL_TIM_Heartbeat_Init+0xa6>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8007ece:	79fa      	ldrb	r2, [r7, #7]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4a21      	ldr	r2, [pc, #132]	; (8007f60 <STRHAL_TIM_Heartbeat_Init+0xb0>)
 8007eda:	4413      	add	r3, r2
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype != STRHAL_TIM_USAGE_000)
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	799b      	ldrb	r3, [r3, #6]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <STRHAL_TIM_Heartbeat_Init+0x3c>
		return -1;
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eea:	e034      	b.n	8007f56 <STRHAL_TIM_Heartbeat_Init+0xa6>

	LL_TIM_InitTypeDef TIM_InitStruct =
 8007eec:	f107 030c 	add.w	r3, r7, #12
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	609a      	str	r2, [r3, #8]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 8007f04:	887b      	ldrh	r3, [r7, #2]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 8007f0a:	88bb      	ldrh	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <STRHAL_TIM_Heartbeat_Init+0x68>
 8007f10:	88bb      	ldrh	r3, [r7, #4]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	e000      	b.n	8007f1a <STRHAL_TIM_Heartbeat_Init+0x6a>
 8007f18:	88bb      	ldrh	r3, [r7, #4]
 8007f1a:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f107 020c 	add.w	r2, r7, #12
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fc f812 	bl	8003f50 <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff fcc0 	bl	80078b6 <LL_TIM_EnableARRPreload>

	tim->cfreq = 0;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	2200      	movs	r2, #0
 8007f3a:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_BRN;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	2203      	movs	r2, #3
 8007f40:	719a      	strb	r2, [r3, #6]

	uint16_t freq = SystemCoreClock / (res * psc);
 8007f42:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <STRHAL_TIM_Heartbeat_Init+0xb4>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	887a      	ldrh	r2, [r7, #2]
 8007f48:	88b9      	ldrh	r1, [r7, #4]
 8007f4a:	fb01 f202 	mul.w	r2, r1, r2
 8007f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f52:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 8007f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3728      	adds	r7, #40	; 0x28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000034 	.word	0x20000034
 8007f64:	20000000 	.word	0x20000000

08007f68 <STRHAL_TIM_Heartbeat_Subscribe>:

int STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_BasicTimerId_t id, STRHAL_TIM_Burnable_t burn)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d902      	bls.n	8007f80 <STRHAL_TIM_Heartbeat_Subscribe+0x18>
		return -1;
 8007f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f7e:	e012      	b.n	8007fa6 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	4613      	mov	r3, r2
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	; (8007fb4 <STRHAL_TIM_Heartbeat_Subscribe+0x4c>)
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	799b      	ldrb	r3, [r3, #6]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d002      	beq.n	8007f9e <STRHAL_TIM_Heartbeat_Subscribe+0x36>
		return -1;
 8007f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f9c:	e003      	b.n	8007fa6 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	tim->burnie = burn;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	609a      	str	r2, [r3, #8]
	return 0;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000034 	.word	0x20000034

08007fb8 <STRHAL_TIM_Heartbeat_StartHeartbeat>:

int STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_BasicTimerId_t id)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d902      	bls.n	8007fce <STRHAL_TIM_Heartbeat_StartHeartbeat+0x16>
		return -1;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fcc:	e01e      	b.n	800800c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8007fce:	79fa      	ldrb	r2, [r7, #7]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4a0e      	ldr	r2, [pc, #56]	; (8008014 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x5c>)
 8007fda:	4413      	add	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	799b      	ldrb	r3, [r3, #6]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d002      	beq.n	8007fec <STRHAL_TIM_Heartbeat_StartHeartbeat+0x34>
		return -1;
 8007fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fea:	e00f      	b.n	800800c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	LL_TIM_ClearFlag_UPDATE(tim->timx);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff fd61 	bl	8007ab8 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(tim->timx);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fd7d 	bl	8007afa <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(tim->timx);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fc33 	bl	8007870 <LL_TIM_EnableCounter>
	return 0;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20000034 	.word	0x20000034

08008018 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6))
 800801e:	480b      	ldr	r0, [pc, #44]	; (800804c <TIM6_DAC_IRQHandler+0x34>)
 8008020:	f7ff fd58 	bl	8007ad4 <LL_TIM_IsActiveFlag_UPDATE>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00b      	beq.n	8008042 <TIM6_DAC_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM6];
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <TIM6_DAC_IRQHandler+0x38>)
 800802c:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <TIM6_DAC_IRQHandler+0x24>
			tim->burnie();
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM6);
 800803c:	4803      	ldr	r0, [pc, #12]	; (800804c <TIM6_DAC_IRQHandler+0x34>)
 800803e:	f7ff fd3b 	bl	8007ab8 <LL_TIM_ClearFlag_UPDATE>
	}
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	40001000 	.word	0x40001000
 8008050:	20000034 	.word	0x20000034

08008054 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800805a:	480b      	ldr	r0, [pc, #44]	; (8008088 <TIM7_IRQHandler+0x34>)
 800805c:	f7ff fd3a 	bl	8007ad4 <LL_TIM_IsActiveFlag_UPDATE>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <TIM7_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM7];
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <TIM7_IRQHandler+0x38>)
 8008068:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <TIM7_IRQHandler+0x24>
			tim->burnie();
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM7);
 8008078:	4803      	ldr	r0, [pc, #12]	; (8008088 <TIM7_IRQHandler+0x34>)
 800807a:	f7ff fd1d 	bl	8007ab8 <LL_TIM_ClearFlag_UPDATE>
	}
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40001400 	.word	0x40001400
 800808c:	20000040 	.word	0x20000040

08008090 <__NVIC_GetPriorityGrouping>:
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008094:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <__NVIC_GetPriorityGrouping+0x18>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	0a1b      	lsrs	r3, r3, #8
 800809a:	f003 0307 	and.w	r3, r3, #7
}
 800809e:	4618      	mov	r0, r3
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	e000ed00 	.word	0xe000ed00

080080ac <__NVIC_EnableIRQ>:
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	db0b      	blt.n	80080d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	f003 021f 	and.w	r2, r3, #31
 80080c4:	4907      	ldr	r1, [pc, #28]	; (80080e4 <__NVIC_EnableIRQ+0x38>)
 80080c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	2001      	movs	r0, #1
 80080ce:	fa00 f202 	lsl.w	r2, r0, r2
 80080d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	e000e100 	.word	0xe000e100

080080e8 <__NVIC_SetPriority>:
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	db0a      	blt.n	8008112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	490c      	ldr	r1, [pc, #48]	; (8008134 <__NVIC_SetPriority+0x4c>)
 8008102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008106:	0112      	lsls	r2, r2, #4
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	440b      	add	r3, r1
 800810c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008110:	e00a      	b.n	8008128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	4908      	ldr	r1, [pc, #32]	; (8008138 <__NVIC_SetPriority+0x50>)
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	3b04      	subs	r3, #4
 8008120:	0112      	lsls	r2, r2, #4
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	440b      	add	r3, r1
 8008126:	761a      	strb	r2, [r3, #24]
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	e000e100 	.word	0xe000e100
 8008138:	e000ed00 	.word	0xe000ed00

0800813c <NVIC_EncodePriority>:
{
 800813c:	b480      	push	{r7}
 800813e:	b089      	sub	sp, #36	; 0x24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	f1c3 0307 	rsb	r3, r3, #7
 8008156:	2b04      	cmp	r3, #4
 8008158:	bf28      	it	cs
 800815a:	2304      	movcs	r3, #4
 800815c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	3304      	adds	r3, #4
 8008162:	2b06      	cmp	r3, #6
 8008164:	d902      	bls.n	800816c <NVIC_EncodePriority+0x30>
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	3b03      	subs	r3, #3
 800816a:	e000      	b.n	800816e <NVIC_EncodePriority+0x32>
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	fa02 f303 	lsl.w	r3, r2, r3
 800817a:	43da      	mvns	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	401a      	ands	r2, r3
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	fa01 f303 	lsl.w	r3, r1, r3
 800818e:	43d9      	mvns	r1, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008194:	4313      	orrs	r3, r2
}
 8008196:	4618      	mov	r0, r3
 8008198:	3724      	adds	r7, #36	; 0x24
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
	...

080081a4 <LL_AHB1_GRP1_EnableClock>:
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80081ac:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80081ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081b0:	4907      	ldr	r1, [pc, #28]	; (80081d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80081ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4013      	ands	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80081c2:	68fb      	ldr	r3, [r7, #12]
}
 80081c4:	bf00      	nop
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	40021000 	.word	0x40021000

080081d4 <LL_AHB2_GRP1_EnableClock>:
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80081dc:	4b08      	ldr	r3, [pc, #32]	; (8008200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80081de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081e0:	4907      	ldr	r1, [pc, #28]	; (8008200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80081ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4013      	ands	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	40021000 	.word	0x40021000

08008204 <LL_APB1_GRP1_EnableClock>:
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800820c:	4b08      	ldr	r3, [pc, #32]	; (8008230 <LL_APB1_GRP1_EnableClock+0x2c>)
 800820e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008210:	4907      	ldr	r1, [pc, #28]	; (8008230 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4313      	orrs	r3, r2
 8008216:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <LL_APB1_GRP1_EnableClock+0x2c>)
 800821a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4013      	ands	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008222:	68fb      	ldr	r3, [r7, #12]
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	40021000 	.word	0x40021000

08008234 <LL_DMA_GetDataLength>:
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8008242:	4a07      	ldr	r2, [pc, #28]	; (8008260 <LL_DMA_GetDataLength+0x2c>)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	4413      	add	r3, r2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	b29b      	uxth	r3, r3
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	0800a290 	.word	0x0800a290

08008264 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b02      	cmp	r3, #2
 8008276:	d101      	bne.n	800827c <LL_DMA_IsActiveFlag_TC1+0x18>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <LL_DMA_IsActiveFlag_TC1+0x1a>
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b20      	cmp	r3, #32
 800829c:	d101      	bne.n	80082a2 <LL_DMA_IsActiveFlag_TC2+0x18>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <LL_DMA_IsActiveFlag_TC2+0x1a>
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d101      	bne.n	80082c8 <LL_DMA_IsActiveFlag_TE1+0x18>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <LL_DMA_IsActiveFlag_TE1+0x1a>
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e6:	2b80      	cmp	r3, #128	; 0x80
 80082e8:	d101      	bne.n	80082ee <LL_DMA_IsActiveFlag_TE2+0x18>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <LL_DMA_IsActiveFlag_TE2+0x1a>
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	605a      	str	r2, [r3, #4]
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	605a      	str	r2, [r3, #4]
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2208      	movs	r2, #8
 800833c:	605a      	str	r2, [r3, #4]
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2280      	movs	r2, #128	; 0x80
 8008356:	605a      	str	r2, [r3, #4]
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8008372:	4a0c      	ldr	r2, [pc, #48]	; (80083a4 <LL_DMA_EnableIT_TC+0x40>)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	4413      	add	r3, r2
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4908      	ldr	r1, [pc, #32]	; (80083a4 <LL_DMA_EnableIT_TC+0x40>)
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	440a      	add	r2, r1
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	4611      	mov	r1, r2
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	440a      	add	r2, r1
 8008390:	f043 0302 	orr.w	r3, r3, #2
 8008394:	6013      	str	r3, [r2, #0]
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	0800a290 	.word	0x0800a290

080083a8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 80083b6:	4a0c      	ldr	r2, [pc, #48]	; (80083e8 <LL_DMA_EnableIT_TE+0x40>)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4413      	add	r3, r2
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4908      	ldr	r1, [pc, #32]	; (80083e8 <LL_DMA_EnableIT_TE+0x40>)
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	440a      	add	r2, r1
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	4611      	mov	r1, r2
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	440a      	add	r2, r1
 80083d4:	f043 0308 	orr.w	r3, r3, #8
 80083d8:	6013      	str	r3, [r2, #0]
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	0800a290 	.word	0x0800a290

080083ec <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80083fa:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <LL_DMA_IsEnabledIT_TC+0x38>)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0302 	and.w	r3, r3, #2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 800840e:	2b02      	cmp	r3, #2
 8008410:	d101      	bne.n	8008416 <LL_DMA_IsEnabledIT_TC+0x2a>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <LL_DMA_IsEnabledIT_TC+0x2c>
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	0800a290 	.word	0x0800a290

08008428 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8008436:	4a0a      	ldr	r2, [pc, #40]	; (8008460 <LL_DMA_IsEnabledIT_TE+0x38>)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	4413      	add	r3, r2
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0308 	and.w	r3, r3, #8
                    DMA_CCR_TEIE) == (DMA_CCR_TEIE)) ? 1UL : 0UL);
 800844a:	2b08      	cmp	r3, #8
 800844c:	d101      	bne.n	8008452 <LL_DMA_IsEnabledIT_TE+0x2a>
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <LL_DMA_IsEnabledIT_TE+0x2c>
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	0800a290 	.word	0x0800a290

08008464 <LL_USART_Enable>:
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f043 0201 	orr.w	r2, r3, #1
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <LL_USART_Disable>:
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f023 0201 	bic.w	r2, r3, #1
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	601a      	str	r2, [r3, #0]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <LL_USART_DisableFIFO>:
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <LL_USART_SetTXFIFOThreshold>:
{
 80084c4:	b480      	push	{r7}
 80084c6:	b089      	sub	sp, #36	; 0x24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3308      	adds	r3, #8
 80084d2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60bb      	str	r3, [r7, #8]
   return(result);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	075b      	lsls	r3, r3, #29
 80084e6:	4313      	orrs	r3, r2
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3308      	adds	r3, #8
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	61ba      	str	r2, [r7, #24]
 80084f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6979      	ldr	r1, [r7, #20]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	613b      	str	r3, [r7, #16]
   return(result);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e4      	bne.n	80084ce <LL_USART_SetTXFIFOThreshold+0xa>
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	3724      	adds	r7, #36	; 0x24
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <LL_USART_SetRXFIFOThreshold>:
{
 8008512:	b480      	push	{r7}
 8008514:	b089      	sub	sp, #36	; 0x24
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3308      	adds	r3, #8
 8008520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	60bb      	str	r3, [r7, #8]
   return(result);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	065b      	lsls	r3, r3, #25
 8008534:	4313      	orrs	r3, r2
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3308      	adds	r3, #8
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	61ba      	str	r2, [r7, #24]
 8008540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	6979      	ldr	r1, [r7, #20]
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	613b      	str	r3, [r7, #16]
   return(result);
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e4      	bne.n	800851c <LL_USART_SetRXFIFOThreshold+0xa>
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	3724      	adds	r7, #36	; 0x24
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <LL_USART_EnableDirectionRx>:
{
 8008560:	b480      	push	{r7}
 8008562:	b089      	sub	sp, #36	; 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	60bb      	str	r3, [r7, #8]
   return(result);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f043 0304 	orr.w	r3, r3, #4
 800857a:	61fb      	str	r3, [r7, #28]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	61ba      	str	r2, [r7, #24]
 8008582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6979      	ldr	r1, [r7, #20]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	613b      	str	r3, [r7, #16]
   return(result);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e9      	bne.n	8008568 <LL_USART_EnableDirectionRx+0x8>
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	3724      	adds	r7, #36	; 0x24
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <LL_USART_EnableDirectionTx>:
{
 80085a2:	b480      	push	{r7}
 80085a4:	b089      	sub	sp, #36	; 0x24
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f043 0308 	orr.w	r3, r3, #8
 80085bc:	61fb      	str	r3, [r7, #28]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	61ba      	str	r2, [r7, #24]
 80085c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	613b      	str	r3, [r7, #16]
   return(result);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e9      	bne.n	80085aa <LL_USART_EnableDirectionTx+0x8>
}
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	3724      	adds	r7, #36	; 0x24
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <LL_USART_SetTXRXSwap>:
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	605a      	str	r2, [r3, #4]
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	609a      	str	r2, [r3, #8]
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008646:	2b40      	cmp	r3, #64	; 0x40
 8008648:	d101      	bne.n	800864e <LL_USART_IsActiveFlag_TC+0x18>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <LL_USART_IsActiveFlag_TC+0x1a>
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866c:	2b80      	cmp	r3, #128	; 0x80
 800866e:	d101      	bne.n	8008674 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8008682:	b480      	push	{r7}
 8008684:	b089      	sub	sp, #36	; 0x24
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3308      	adds	r3, #8
 800868e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	60bb      	str	r3, [r7, #8]
   return(result);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3308      	adds	r3, #8
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	61ba      	str	r2, [r7, #24]
 80086a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6979      	ldr	r1, [r7, #20]
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	613b      	str	r3, [r7, #16]
   return(result);
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e7      	bne.n	800868a <LL_USART_EnableDMAReq_RX+0x8>
}
 80086ba:	bf00      	nop
 80086bc:	bf00      	nop
 80086be:	3724      	adds	r7, #36	; 0x24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b089      	sub	sp, #36	; 0x24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3308      	adds	r3, #8
 80086d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3308      	adds	r3, #8
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	61ba      	str	r2, [r7, #24]
 80086ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6979      	ldr	r1, [r7, #20]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	613b      	str	r3, [r7, #16]
   return(result);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e7      	bne.n	80086d0 <LL_USART_EnableDMAReq_TX+0x8>
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	3724      	adds	r7, #36	; 0x24
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <STRHAL_UART_Init>:
//{ .uart = USART3, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_USART3_RX, .dma_tx_request = LL_DMAMUX_REQ_USART3_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 },
[STRHAL_UART4] =
{ .uart = UART4, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_UART4_RX, .dma_tx_request = LL_DMAMUX_REQ_UART4_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 } };

void STRHAL_UART_Init()
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
	//LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART3);
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8008716:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800871a:	f7ff fd73 	bl	8008204 <LL_APB1_GRP1_EnableClock>
	//LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800871e:	2004      	movs	r0, #4
 8008720:	f7ff fd58 	bl	80081d4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8008724:	2004      	movs	r0, #4
 8008726:	f7ff fd3d 	bl	80081a4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800872a:	2001      	movs	r0, #1
 800872c:	f7ff fd3a 	bl	80081a4 <LL_AHB1_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8008730:	463b      	mov	r3, r7
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	605a      	str	r2, [r3, #4]
 8008738:	609a      	str	r2, [r3, #8]
 800873a:	60da      	str	r2, [r3, #12]
 800873c:	611a      	str	r2, [r3, #16]
 800873e:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11;
 8008740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008744:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008746:	2302      	movs	r3, #2
 8008748:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800874a:	2302      	movs	r3, #2
 800874c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008752:	2301      	movs	r3, #1
 8008754:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8008756:	2305      	movs	r3, #5
 8008758:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800875a:	463b      	mov	r3, r7
 800875c:	4619      	mov	r1, r3
 800875e:	4803      	ldr	r0, [pc, #12]	; (800876c <STRHAL_UART_Init+0x5c>)
 8008760:	f7fa ffb1 	bl	80036c6 <LL_GPIO_Init>

//	GPIO_InitStruct.Pin = LL_GPIO_PIN_3 | LL_GPIO_PIN_4;
//	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8008764:	bf00      	nop
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	48000800 	.word	0x48000800

08008770 <STRHAL_UART_Instance_Init>:

int STRHAL_UART_Instance_Init(STRHAL_UART_Id_t uart_id)
{
 8008770:	b590      	push	{r4, r7, lr}
 8008772:	b097      	sub	sp, #92	; 0x5c
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d902      	bls.n	8008786 <STRHAL_UART_Instance_Init+0x16>
		return -1;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008784:	e126      	b.n	80089d4 <STRHAL_UART_Instance_Init+0x264>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	f44f 720e 	mov.w	r2, #568	; 0x238
 800878c:	fb02 f303 	mul.w	r3, r2, r3
 8008790:	4a92      	ldr	r2, [pc, #584]	; (80089dc <STRHAL_UART_Instance_Init+0x26c>)
 8008792:	4413      	add	r3, r2
 8008794:	657b      	str	r3, [r7, #84]	; 0x54

	LL_USART_Disable(_uart->uart);
 8008796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff fe72 	bl	8008484 <LL_USART_Disable>

	LL_USART_InitTypeDef UART_InitStruct =
 80087a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087a4:	2220      	movs	r2, #32
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fb3f 	bl	8008e2c <memset>
	{ 0 };
	UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80087ae:	2300      	movs	r3, #0
 80087b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80087b2:	2300      	movs	r3, #0
 80087b4:	643b      	str	r3, [r7, #64]	; 0x40
	UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	647b      	str	r3, [r7, #68]	; 0x44
	UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80087ba:	230c      	movs	r3, #12
 80087bc:	64bb      	str	r3, [r7, #72]	; 0x48
	UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80087be:	2300      	movs	r3, #0
 80087c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	UART_InitStruct.BaudRate = _uart->baud_rate;
 80087c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c4:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80087c8:	63bb      	str	r3, [r7, #56]	; 0x38
	UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80087ca:	2300      	movs	r3, #0
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34
	UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80087ce:	2300      	movs	r3, #0
 80087d0:	653b      	str	r3, [r7, #80]	; 0x50
	LL_USART_Init(_uart->uart, &UART_InitStruct);
 80087d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80087da:	4611      	mov	r1, r2
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fc f84f 	bl	8004880 <LL_USART_Init>

	LL_USART_SetTXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 80087e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fe6b 	bl	80084c4 <LL_USART_SetTXFIFOThreshold>
	LL_USART_SetRXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 80087ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fe8c 	bl	8008512 <LL_USART_SetRXFIFOThreshold>
	LL_USART_DisableFIFO(_uart->uart);
 80087fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff fe50 	bl	80084a4 <LL_USART_DisableFIFO>
	LL_USART_ConfigAsyncMode(_uart->uart);
 8008804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fefe 	bl	800860a <LL_USART_ConfigAsyncMode>
	if (_uart->swap)
 800880e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008810:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <STRHAL_UART_Instance_Init+0xb6>
		LL_USART_SetTXRXSwap(_uart->uart, LL_USART_TXRX_SWAPPED);
 8008818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fedf 	bl	80085e4 <LL_USART_SetTXRXSwap>

	LL_DMA_InitTypeDef DMA_InitStruct =
 8008826:	f107 0308 	add.w	r3, r7, #8
 800882a:	222c      	movs	r2, #44	; 0x2c
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fafc 	bl	8008e2c <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8008834:	2300      	movs	r3, #0
 8008836:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->rx_buf.data;
 8008838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800883a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800883e:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8008840:	2300      	movs	r3, #0
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8008844:	2380      	movs	r3, #128	; 0x80
 8008846:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 8008848:	2320      	movs	r3, #32
 800884a:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 800884c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008850:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->RDR);
 8008852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3324      	adds	r3, #36	; 0x24
 8008858:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = (uint32_t) LL_DMA_PDATAALIGN_BYTE;
 800885a:	2300      	movs	r3, #0
 800885c:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 800885e:	2300      	movs	r3, #0
 8008860:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_rx_request;
 8008862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008864:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800886a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800886e:	633b      	str	r3, [r7, #48]	; 0x30

	LL_DMA_Init(DMA1, _uart->dma_rx_channel, &DMA_InitStruct);
 8008870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008872:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008876:	f107 0208 	add.w	r2, r7, #8
 800887a:	4619      	mov	r1, r3
 800887c:	4858      	ldr	r0, [pc, #352]	; (80089e0 <STRHAL_UART_Instance_Init+0x270>)
 800887e:	f7fa fd97 	bl	80033b0 <LL_DMA_Init>

	LL_USART_EnableDMAReq_RX(_uart->uart);
 8008882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fefb 	bl	8008682 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_rx_channel);
 800888c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800888e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008892:	4619      	mov	r1, r3
 8008894:	4852      	ldr	r0, [pc, #328]	; (80089e0 <STRHAL_UART_Instance_Init+0x270>)
 8008896:	f7ff fd65 	bl	8008364 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_rx_channel);
 800889a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800889c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088a0:	4619      	mov	r1, r3
 80088a2:	484f      	ldr	r0, [pc, #316]	; (80089e0 <STRHAL_UART_Instance_Init+0x270>)
 80088a4:	f7ff fd80 	bl	80083a8 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_rx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 1));
 80088a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088aa:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80088ae:	b25c      	sxtb	r4, r3
 80088b0:	f7ff fbee 	bl	8008090 <__NVIC_GetPriorityGrouping>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2201      	movs	r2, #1
 80088b8:	2101      	movs	r1, #1
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fc3e 	bl	800813c <NVIC_EncodePriority>
 80088c0:	4603      	mov	r3, r0
 80088c2:	4619      	mov	r1, r3
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7ff fc0f 	bl	80080e8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_rx_handler);
 80088ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088cc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fbea 	bl	80080ac <__NVIC_EnableIRQ>

	/*DMA configuration for TX */
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80088d8:	2310      	movs	r3, #16
 80088da:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->tx_buf.data;
 80088dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088de:	3304      	adds	r3, #4
 80088e0:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80088e2:	2300      	movs	r3, #0
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80088e6:	2380      	movs	r3, #128	; 0x80
 80088e8:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 80088ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->TDR);
 80088f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3328      	adds	r3, #40	; 0x28
 80088fa:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 8008900:	2300      	movs	r3, #0
 8008902:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_tx_request;
 8008904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008906:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800890a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800890c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008910:	633b      	str	r3, [r7, #48]	; 0x30
	LL_DMA_Init(DMA1, _uart->dma_tx_channel, &DMA_InitStruct);
 8008912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008914:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008918:	f107 0208 	add.w	r2, r7, #8
 800891c:	4619      	mov	r1, r3
 800891e:	4830      	ldr	r0, [pc, #192]	; (80089e0 <STRHAL_UART_Instance_Init+0x270>)
 8008920:	f7fa fd46 	bl	80033b0 <LL_DMA_Init>

	LL_USART_EnableDMAReq_TX(_uart->uart);
 8008924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fecd 	bl	80086c8 <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_tx_channel);
 800892e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008930:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008934:	4619      	mov	r1, r3
 8008936:	482a      	ldr	r0, [pc, #168]	; (80089e0 <STRHAL_UART_Instance_Init+0x270>)
 8008938:	f7ff fd14 	bl	8008364 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_tx_channel);
 800893c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800893e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008942:	4619      	mov	r1, r3
 8008944:	4826      	ldr	r0, [pc, #152]	; (80089e0 <STRHAL_UART_Instance_Init+0x270>)
 8008946:	f7ff fd2f 	bl	80083a8 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_tx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2));
 800894a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800894c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8008950:	b25c      	sxtb	r4, r3
 8008952:	f7ff fb9d 	bl	8008090 <__NVIC_GetPriorityGrouping>
 8008956:	4603      	mov	r3, r0
 8008958:	2202      	movs	r2, #2
 800895a:	2101      	movs	r1, #1
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff fbed 	bl	800813c <NVIC_EncodePriority>
 8008962:	4603      	mov	r3, r0
 8008964:	4619      	mov	r1, r3
 8008966:	4620      	mov	r0, r4
 8008968:	f7ff fbbe 	bl	80080e8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_tx_handler);
 800896c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800896e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8008972:	b25b      	sxtb	r3, r3
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fb99 	bl	80080ac <__NVIC_EnableIRQ>

	LL_USART_EnableDirectionTx(_uart->uart);
 800897a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fe0f 	bl	80085a2 <LL_USART_EnableDirectionTx>
	LL_USART_EnableDirectionRx(_uart->uart);
 8008984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fde9 	bl	8008560 <LL_USART_EnableDirectionRx>
	LL_USART_Enable(_uart->uart);
 800898e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fd66 	bl	8008464 <LL_USART_Enable>

	_uart->state = STRHAL_UART_STATE_00;
 8008998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->rx_buf.h = _uart->rx_buf.n = _uart->tx_buf.n = 0;
 80089a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80089a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80089ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80089b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80089ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 80089c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	_uart->tx_buf.n = 0;
 80089ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	return 0;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	375c      	adds	r7, #92	; 0x5c
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd90      	pop	{r4, r7, pc}
 80089dc:	20000074 	.word	0x20000074
 80089e0:	40020000 	.word	0x40020000

080089e4 <STRHAL_UART_Debug_Write_Blocking>:
{
	return STRHAL_UART_Write_DMA(STRHAL_UART_DEBUG, data, n);
}

int32_t STRHAL_UART_Debug_Write_Blocking(const char *data, uint32_t n, uint16_t timeout)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
	return STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, data, n, timeout);
 80089f2:	88fb      	ldrh	r3, [r7, #6]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	2002      	movs	r0, #2
 80089fa:	f000 f805 	bl	8008a08 <STRHAL_UART_Write_Blocking>
 80089fe:	4603      	mov	r3, r0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <STRHAL_UART_Write_Blocking>:

	return n;
}

int32_t STRHAL_UART_Write_Blocking(STRHAL_UART_Id_t uart_id, const char *data, uint32_t n, uint16_t timeout)
{
 8008a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a0c:	b08c      	sub	sp, #48	; 0x30
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6139      	str	r1, [r7, #16]
 8008a12:	60fa      	str	r2, [r7, #12]
 8008a14:	461a      	mov	r2, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	75fb      	strb	r3, [r7, #23]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	82bb      	strh	r3, [r7, #20]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d902      	bls.n	8008a2a <STRHAL_UART_Write_Blocking+0x22>
		return -1;
 8008a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a28:	e0a7      	b.n	8008b7a <STRHAL_UART_Write_Blocking+0x172>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	f44f 720e 	mov.w	r2, #568	; 0x238
 8008a30:	fb02 f303 	mul.w	r3, r2, r3
 8008a34:	4a53      	ldr	r2, [pc, #332]	; (8008b84 <STRHAL_UART_Write_Blocking+0x17c>)
 8008a36:	4413      	add	r3, r2
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24

	if (_uart->state & (STRHAL_UART_STATE_TX | STRHAL_UART_STATE_TE) || n > STRHAL_UART_BUF_SIZE)
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008a40:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d103      	bne.n	8008a50 <STRHAL_UART_Write_Blocking+0x48>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a4e:	d901      	bls.n	8008a54 <STRHAL_UART_Write_Blocking+0x4c>
		return 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	e092      	b.n	8008b7a <STRHAL_UART_Write_Blocking+0x172>

	uint32_t i;
	for (i = 0; i < n; ++i)
 8008a54:	2300      	movs	r3, #0
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a58:	e00c      	b.n	8008a74 <STRHAL_UART_Write_Blocking+0x6c>
		_uart->tx_buf.data[i] = data[i];
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	4413      	add	r3, r2
 8008a60:	7819      	ldrb	r1, [r3, #0]
 8008a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	4413      	add	r3, r2
 8008a68:	3304      	adds	r3, #4
 8008a6a:	460a      	mov	r2, r1
 8008a6c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	3301      	adds	r3, #1
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d3ee      	bcc.n	8008a5a <STRHAL_UART_Write_Blocking+0x52>

	_uart->tx_buf.n = n;
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	_uart->state &= ~STRHAL_UART_STATE_TC;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TX;
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	uint8_t *tx_data = (uint8_t*) _uart->tx_buf.data;
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	3304      	adds	r3, #4
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28

	uint64_t tx_starttime = STRHAL_Systick_GetTick();
 8008aae:	f7fe fded 	bl	800768c <STRHAL_Systick_GetTick>
 8008ab2:	e9c7 0106 	strd	r0, r1, [r7, #24]

	while (_uart->tx_buf.n > 0)
 8008ab6:	e02d      	b.n	8008b14 <STRHAL_UART_Write_Blocking+0x10c>
	{
		// wait until byte transmitted, or timeout
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
		{
			if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 8008ab8:	f7fe fde8 	bl	800768c <STRHAL_Systick_GetTick>
 8008abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ac0:	ebb0 0802 	subs.w	r8, r0, r2
 8008ac4:	eb61 0903 	sbc.w	r9, r1, r3
 8008ac8:	8abb      	ldrh	r3, [r7, #20]
 8008aca:	2200      	movs	r2, #0
 8008acc:	603b      	str	r3, [r7, #0]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4543      	cmp	r3, r8
 8008ad8:	4613      	mov	r3, r2
 8008ada:	eb73 0309 	sbcs.w	r3, r3, r9
 8008ade:	d202      	bcs.n	8008ae6 <STRHAL_UART_Write_Blocking+0xde>
				return -1;
 8008ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ae4:	e049      	b.n	8008b7a <STRHAL_UART_Write_Blocking+0x172>
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fdb6 	bl	800865c <LL_USART_IsActiveFlag_TXE_TXFNF>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0e0      	beq.n	8008ab8 <STRHAL_UART_Write_Blocking+0xb0>
		}
		_uart->uart->TDR = (uint8_t) (*tx_data & 0xFFU);
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	629a      	str	r2, [r3, #40]	; 0x28
		tx_data++;
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	3301      	adds	r3, #1
 8008b04:	62bb      	str	r3, [r7, #40]	; 0x28
		_uart->tx_buf.n--;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008b0c:	1e5a      	subs	r2, r3, #1
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	while (_uart->tx_buf.n > 0)
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e3      	bne.n	8008ae6 <STRHAL_UART_Write_Blocking+0xde>
	}

	// wait until transmission complete, or timeout
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 8008b1e:	e011      	b.n	8008b44 <STRHAL_UART_Write_Blocking+0x13c>
	{
		if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 8008b20:	f7fe fdb4 	bl	800768c <STRHAL_Systick_GetTick>
 8008b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b28:	1a84      	subs	r4, r0, r2
 8008b2a:	eb61 0503 	sbc.w	r5, r1, r3
 8008b2e:	8abb      	ldrh	r3, [r7, #20]
 8008b30:	2200      	movs	r2, #0
 8008b32:	469a      	mov	sl, r3
 8008b34:	4693      	mov	fp, r2
 8008b36:	45a2      	cmp	sl, r4
 8008b38:	eb7b 0305 	sbcs.w	r3, fp, r5
 8008b3c:	d202      	bcs.n	8008b44 <STRHAL_UART_Write_Blocking+0x13c>
			return -1;
 8008b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b42:	e01a      	b.n	8008b7a <STRHAL_UART_Write_Blocking+0x172>
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff fd74 	bl	8008636 <LL_USART_IsActiveFlag_TC>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0e5      	beq.n	8008b20 <STRHAL_UART_Write_Blocking+0x118>
	}

	_uart->state &= ~STRHAL_UART_STATE_TX;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TC;
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	return n;
 8008b78:	68fb      	ldr	r3, [r7, #12]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b84:	20000074 	.word	0x20000074

08008b88 <DMA1_Channel1_IRQHandler>:
{
	return _uarts[uart_id].state;
}

void DMA1_Channel1_IRQHandler(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 8008b8e:	4b3f      	ldr	r3, [pc, #252]	; (8008c8c <DMA1_Channel1_IRQHandler+0x104>)
 8008b90:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 8008b92:	2100      	movs	r1, #0
 8008b94:	483e      	ldr	r0, [pc, #248]	; (8008c90 <DMA1_Channel1_IRQHandler+0x108>)
 8008b96:	f7ff fc29 	bl	80083ec <LL_DMA_IsEnabledIT_TC>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d037      	beq.n	8008c10 <DMA1_Channel1_IRQHandler+0x88>
 8008ba0:	483b      	ldr	r0, [pc, #236]	; (8008c90 <DMA1_Channel1_IRQHandler+0x108>)
 8008ba2:	f7ff fb5f 	bl	8008264 <LL_DMA_IsActiveFlag_TC1>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d031      	beq.n	8008c10 <DMA1_Channel1_IRQHandler+0x88>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 8008bac:	4838      	ldr	r0, [pc, #224]	; (8008c90 <DMA1_Channel1_IRQHandler+0x108>)
 8008bae:	f7ff fba5 	bl	80082fc <LL_DMA_ClearFlag_TC1>
		_uart->rx_buf.n += _uart->rx_buf.n_dma;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008bbe:	441a      	add	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bda:	d953      	bls.n	8008c84 <DMA1_Channel1_IRQHandler+0xfc>
		{
			_uart->rx_buf.h += _uart->rx_buf.n % STRHAL_UART_BUF_SIZE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	441a      	add	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			_uart->rx_buf.n = STRHAL_UART_BUF_SIZE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			_uart->state |= STRHAL_UART_STATE_RO;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008c02:	f043 0308 	orr.w	r3, r3, #8
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 8008c0e:	e039      	b.n	8008c84 <DMA1_Channel1_IRQHandler+0xfc>
		}
	}

	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 8008c10:	2100      	movs	r1, #0
 8008c12:	481f      	ldr	r0, [pc, #124]	; (8008c90 <DMA1_Channel1_IRQHandler+0x108>)
 8008c14:	f7ff fc08 	bl	8008428 <LL_DMA_IsEnabledIT_TE>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d032      	beq.n	8008c84 <DMA1_Channel1_IRQHandler+0xfc>
 8008c1e:	481c      	ldr	r0, [pc, #112]	; (8008c90 <DMA1_Channel1_IRQHandler+0x108>)
 8008c20:	f7ff fb46 	bl	80082b0 <LL_DMA_IsActiveFlag_TE1>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d02c      	beq.n	8008c84 <DMA1_Channel1_IRQHandler+0xfc>
	{
		LL_DMA_ClearFlag_TE1(DMA1);
 8008c2a:	4819      	ldr	r0, [pc, #100]	; (8008c90 <DMA1_Channel1_IRQHandler+0x108>)
 8008c2c:	f7ff fb80 	bl	8008330 <LL_DMA_ClearFlag_TE1>
		_uart->rx_buf.n = STRHAL_UART_BUF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 8008c30:	2100      	movs	r1, #0
 8008c32:	4817      	ldr	r0, [pc, #92]	; (8008c90 <DMA1_Channel1_IRQHandler+0x108>)
 8008c34:	f7ff fafe 	bl	8008234 <LL_DMA_GetDataLength>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

		_uart->state &= ~STRHAL_UART_STATE_RX;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008c4a:	f023 0302 	bic.w	r3, r3, #2
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_RC;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008c5c:	f023 0304 	bic.w	r3, r3, #4
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_RE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008c6e:	f043 0310 	orr.w	r3, r3, #16
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		STRHAL_OofHandler(STRHAL_OOF_UART, "DMA FAIL");
 8008c7a:	4906      	ldr	r1, [pc, #24]	; (8008c94 <DMA1_Channel1_IRQHandler+0x10c>)
 8008c7c:	2008      	movs	r0, #8
 8008c7e:	f7f8 fa1d 	bl	80010bc <STRHAL_OofHandler>
	}
}
 8008c82:	e7ff      	b.n	8008c84 <DMA1_Channel1_IRQHandler+0xfc>
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	200004e4 	.word	0x200004e4
 8008c90:	40020000 	.word	0x40020000
 8008c94:	080090d0 	.word	0x080090d0

08008c98 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 8008c9e:	4b2a      	ldr	r3, [pc, #168]	; (8008d48 <DMA1_Channel2_IRQHandler+0xb0>)
 8008ca0:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TC2(DMA1))
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	4829      	ldr	r0, [pc, #164]	; (8008d4c <DMA1_Channel2_IRQHandler+0xb4>)
 8008ca6:	f7ff fba1 	bl	80083ec <LL_DMA_IsEnabledIT_TC>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01b      	beq.n	8008ce8 <DMA1_Channel2_IRQHandler+0x50>
 8008cb0:	4826      	ldr	r0, [pc, #152]	; (8008d4c <DMA1_Channel2_IRQHandler+0xb4>)
 8008cb2:	f7ff faea 	bl	800828a <LL_DMA_IsActiveFlag_TC2>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d015      	beq.n	8008ce8 <DMA1_Channel2_IRQHandler+0x50>
	{
		LL_DMA_ClearFlag_TC2(DMA1);
 8008cbc:	4823      	ldr	r0, [pc, #140]	; (8008d4c <DMA1_Channel2_IRQHandler+0xb4>)
 8008cbe:	f7ff fb2a 	bl	8008316 <LL_DMA_ClearFlag_TC2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008cc8:	f023 0320 	bic.w	r3, r3, #32
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TC;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		LL_DMA_ClearFlag_TE2(DMA1);
		_uart->state &= ~STRHAL_UART_STATE_TX;
		_uart->state &= ~STRHAL_UART_STATE_TC;
		_uart->state |= STRHAL_UART_STATE_TE;
	}
}
 8008ce6:	e02a      	b.n	8008d3e <DMA1_Channel2_IRQHandler+0xa6>
	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TE2(DMA1))
 8008ce8:	2101      	movs	r1, #1
 8008cea:	4818      	ldr	r0, [pc, #96]	; (8008d4c <DMA1_Channel2_IRQHandler+0xb4>)
 8008cec:	f7ff fb9c 	bl	8008428 <LL_DMA_IsEnabledIT_TE>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d023      	beq.n	8008d3e <DMA1_Channel2_IRQHandler+0xa6>
 8008cf6:	4815      	ldr	r0, [pc, #84]	; (8008d4c <DMA1_Channel2_IRQHandler+0xb4>)
 8008cf8:	f7ff faed 	bl	80082d6 <LL_DMA_IsActiveFlag_TE2>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01d      	beq.n	8008d3e <DMA1_Channel2_IRQHandler+0xa6>
		LL_DMA_ClearFlag_TE2(DMA1);
 8008d02:	4812      	ldr	r0, [pc, #72]	; (8008d4c <DMA1_Channel2_IRQHandler+0xb4>)
 8008d04:	f7ff fb21 	bl	800834a <LL_DMA_ClearFlag_TE2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008d0e:	f023 0320 	bic.w	r3, r3, #32
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_TC;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8008d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	200004e4 	.word	0x200004e4
 8008d4c:	40020000 	.word	0x40020000

08008d50 <_ZdlPvj>:
 8008d50:	f000 b812 	b.w	8008d78 <_ZdlPv>

08008d54 <__cxa_guard_acquire>:
 8008d54:	6803      	ldr	r3, [r0, #0]
 8008d56:	07db      	lsls	r3, r3, #31
 8008d58:	d406      	bmi.n	8008d68 <__cxa_guard_acquire+0x14>
 8008d5a:	7843      	ldrb	r3, [r0, #1]
 8008d5c:	b103      	cbz	r3, 8008d60 <__cxa_guard_acquire+0xc>
 8008d5e:	deff      	udf	#255	; 0xff
 8008d60:	2301      	movs	r3, #1
 8008d62:	7043      	strb	r3, [r0, #1]
 8008d64:	4618      	mov	r0, r3
 8008d66:	4770      	bx	lr
 8008d68:	2000      	movs	r0, #0
 8008d6a:	4770      	bx	lr

08008d6c <__cxa_guard_release>:
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	6003      	str	r3, [r0, #0]
 8008d70:	4770      	bx	lr

08008d72 <__cxa_pure_virtual>:
 8008d72:	b508      	push	{r3, lr}
 8008d74:	f000 f80e 	bl	8008d94 <_ZSt9terminatev>

08008d78 <_ZdlPv>:
 8008d78:	f000 b842 	b.w	8008e00 <free>

08008d7c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008d7c:	b508      	push	{r3, lr}
 8008d7e:	4780      	blx	r0
 8008d80:	f000 f80d 	bl	8008d9e <abort>

08008d84 <_ZSt13get_terminatev>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <_ZSt13get_terminatev+0xc>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	f3bf 8f5b 	dmb	ish
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	2000071c 	.word	0x2000071c

08008d94 <_ZSt9terminatev>:
 8008d94:	b508      	push	{r3, lr}
 8008d96:	f7ff fff5 	bl	8008d84 <_ZSt13get_terminatev>
 8008d9a:	f7ff ffef 	bl	8008d7c <_ZN10__cxxabiv111__terminateEPFvvE>

08008d9e <abort>:
 8008d9e:	b508      	push	{r3, lr}
 8008da0:	2006      	movs	r0, #6
 8008da2:	f000 f8bf 	bl	8008f24 <raise>
 8008da6:	2001      	movs	r0, #1
 8008da8:	f7f8 f9ea 	bl	8001180 <_exit>

08008dac <__errno>:
 8008dac:	4b01      	ldr	r3, [pc, #4]	; (8008db4 <__errno+0x8>)
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	20000720 	.word	0x20000720

08008db8 <__libc_init_array>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4d0d      	ldr	r5, [pc, #52]	; (8008df0 <__libc_init_array+0x38>)
 8008dbc:	4c0d      	ldr	r4, [pc, #52]	; (8008df4 <__libc_init_array+0x3c>)
 8008dbe:	1b64      	subs	r4, r4, r5
 8008dc0:	10a4      	asrs	r4, r4, #2
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	d109      	bne.n	8008ddc <__libc_init_array+0x24>
 8008dc8:	4d0b      	ldr	r5, [pc, #44]	; (8008df8 <__libc_init_array+0x40>)
 8008dca:	4c0c      	ldr	r4, [pc, #48]	; (8008dfc <__libc_init_array+0x44>)
 8008dcc:	f000 f8d4 	bl	8008f78 <_init>
 8008dd0:	1b64      	subs	r4, r4, r5
 8008dd2:	10a4      	asrs	r4, r4, #2
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	42a6      	cmp	r6, r4
 8008dd8:	d105      	bne.n	8008de6 <__libc_init_array+0x2e>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de0:	4798      	blx	r3
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7ee      	b.n	8008dc4 <__libc_init_array+0xc>
 8008de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dea:	4798      	blx	r3
 8008dec:	3601      	adds	r6, #1
 8008dee:	e7f2      	b.n	8008dd6 <__libc_init_array+0x1e>
 8008df0:	0800a298 	.word	0x0800a298
 8008df4:	0800a298 	.word	0x0800a298
 8008df8:	0800a298 	.word	0x0800a298
 8008dfc:	0800a29c 	.word	0x0800a29c

08008e00 <free>:
 8008e00:	4b02      	ldr	r3, [pc, #8]	; (8008e0c <free+0xc>)
 8008e02:	4601      	mov	r1, r0
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	f000 b819 	b.w	8008e3c <_free_r>
 8008e0a:	bf00      	nop
 8008e0c:	20000720 	.word	0x20000720

08008e10 <memcpy>:
 8008e10:	440a      	add	r2, r1
 8008e12:	4291      	cmp	r1, r2
 8008e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e18:	d100      	bne.n	8008e1c <memcpy+0xc>
 8008e1a:	4770      	bx	lr
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e26:	4291      	cmp	r1, r2
 8008e28:	d1f9      	bne.n	8008e1e <memcpy+0xe>
 8008e2a:	bd10      	pop	{r4, pc}

08008e2c <memset>:
 8008e2c:	4402      	add	r2, r0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d100      	bne.n	8008e36 <memset+0xa>
 8008e34:	4770      	bx	lr
 8008e36:	f803 1b01 	strb.w	r1, [r3], #1
 8008e3a:	e7f9      	b.n	8008e30 <memset+0x4>

08008e3c <_free_r>:
 8008e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e3e:	2900      	cmp	r1, #0
 8008e40:	d044      	beq.n	8008ecc <_free_r+0x90>
 8008e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e46:	9001      	str	r0, [sp, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e4e:	bfb8      	it	lt
 8008e50:	18e4      	addlt	r4, r4, r3
 8008e52:	f000 f883 	bl	8008f5c <__malloc_lock>
 8008e56:	4a1e      	ldr	r2, [pc, #120]	; (8008ed0 <_free_r+0x94>)
 8008e58:	9801      	ldr	r0, [sp, #4]
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	b933      	cbnz	r3, 8008e6c <_free_r+0x30>
 8008e5e:	6063      	str	r3, [r4, #4]
 8008e60:	6014      	str	r4, [r2, #0]
 8008e62:	b003      	add	sp, #12
 8008e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e68:	f000 b87e 	b.w	8008f68 <__malloc_unlock>
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	d908      	bls.n	8008e82 <_free_r+0x46>
 8008e70:	6825      	ldr	r5, [r4, #0]
 8008e72:	1961      	adds	r1, r4, r5
 8008e74:	428b      	cmp	r3, r1
 8008e76:	bf01      	itttt	eq
 8008e78:	6819      	ldreq	r1, [r3, #0]
 8008e7a:	685b      	ldreq	r3, [r3, #4]
 8008e7c:	1949      	addeq	r1, r1, r5
 8008e7e:	6021      	streq	r1, [r4, #0]
 8008e80:	e7ed      	b.n	8008e5e <_free_r+0x22>
 8008e82:	461a      	mov	r2, r3
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	b10b      	cbz	r3, 8008e8c <_free_r+0x50>
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	d9fa      	bls.n	8008e82 <_free_r+0x46>
 8008e8c:	6811      	ldr	r1, [r2, #0]
 8008e8e:	1855      	adds	r5, r2, r1
 8008e90:	42a5      	cmp	r5, r4
 8008e92:	d10b      	bne.n	8008eac <_free_r+0x70>
 8008e94:	6824      	ldr	r4, [r4, #0]
 8008e96:	4421      	add	r1, r4
 8008e98:	1854      	adds	r4, r2, r1
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	6011      	str	r1, [r2, #0]
 8008e9e:	d1e0      	bne.n	8008e62 <_free_r+0x26>
 8008ea0:	681c      	ldr	r4, [r3, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	6053      	str	r3, [r2, #4]
 8008ea6:	4421      	add	r1, r4
 8008ea8:	6011      	str	r1, [r2, #0]
 8008eaa:	e7da      	b.n	8008e62 <_free_r+0x26>
 8008eac:	d902      	bls.n	8008eb4 <_free_r+0x78>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	6003      	str	r3, [r0, #0]
 8008eb2:	e7d6      	b.n	8008e62 <_free_r+0x26>
 8008eb4:	6825      	ldr	r5, [r4, #0]
 8008eb6:	1961      	adds	r1, r4, r5
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	bf04      	itt	eq
 8008ebc:	6819      	ldreq	r1, [r3, #0]
 8008ebe:	685b      	ldreq	r3, [r3, #4]
 8008ec0:	6063      	str	r3, [r4, #4]
 8008ec2:	bf04      	itt	eq
 8008ec4:	1949      	addeq	r1, r1, r5
 8008ec6:	6021      	streq	r1, [r4, #0]
 8008ec8:	6054      	str	r4, [r2, #4]
 8008eca:	e7ca      	b.n	8008e62 <_free_r+0x26>
 8008ecc:	b003      	add	sp, #12
 8008ece:	bd30      	pop	{r4, r5, pc}
 8008ed0:	20000b60 	.word	0x20000b60

08008ed4 <_raise_r>:
 8008ed4:	291f      	cmp	r1, #31
 8008ed6:	b538      	push	{r3, r4, r5, lr}
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	d904      	bls.n	8008ee8 <_raise_r+0x14>
 8008ede:	2316      	movs	r3, #22
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008eea:	b112      	cbz	r2, 8008ef2 <_raise_r+0x1e>
 8008eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ef0:	b94b      	cbnz	r3, 8008f06 <_raise_r+0x32>
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 f830 	bl	8008f58 <_getpid_r>
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4601      	mov	r1, r0
 8008efc:	4620      	mov	r0, r4
 8008efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f02:	f000 b817 	b.w	8008f34 <_kill_r>
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d00a      	beq.n	8008f20 <_raise_r+0x4c>
 8008f0a:	1c59      	adds	r1, r3, #1
 8008f0c:	d103      	bne.n	8008f16 <_raise_r+0x42>
 8008f0e:	2316      	movs	r3, #22
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	2001      	movs	r0, #1
 8008f14:	e7e7      	b.n	8008ee6 <_raise_r+0x12>
 8008f16:	2400      	movs	r4, #0
 8008f18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	4798      	blx	r3
 8008f20:	2000      	movs	r0, #0
 8008f22:	e7e0      	b.n	8008ee6 <_raise_r+0x12>

08008f24 <raise>:
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <raise+0xc>)
 8008f26:	4601      	mov	r1, r0
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f7ff bfd3 	b.w	8008ed4 <_raise_r>
 8008f2e:	bf00      	nop
 8008f30:	20000720 	.word	0x20000720

08008f34 <_kill_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d07      	ldr	r5, [pc, #28]	; (8008f54 <_kill_r+0x20>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	4611      	mov	r1, r2
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	f7f8 f90d 	bl	8001160 <_kill>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	d102      	bne.n	8008f50 <_kill_r+0x1c>
 8008f4a:	682b      	ldr	r3, [r5, #0]
 8008f4c:	b103      	cbz	r3, 8008f50 <_kill_r+0x1c>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	bd38      	pop	{r3, r4, r5, pc}
 8008f52:	bf00      	nop
 8008f54:	20000b64 	.word	0x20000b64

08008f58 <_getpid_r>:
 8008f58:	f7f8 b8fa 	b.w	8001150 <_getpid>

08008f5c <__malloc_lock>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	; (8008f64 <__malloc_lock+0x8>)
 8008f5e:	f000 b809 	b.w	8008f74 <__retarget_lock_acquire_recursive>
 8008f62:	bf00      	nop
 8008f64:	20000b68 	.word	0x20000b68

08008f68 <__malloc_unlock>:
 8008f68:	4801      	ldr	r0, [pc, #4]	; (8008f70 <__malloc_unlock+0x8>)
 8008f6a:	f000 b804 	b.w	8008f76 <__retarget_lock_release_recursive>
 8008f6e:	bf00      	nop
 8008f70:	20000b68 	.word	0x20000b68

08008f74 <__retarget_lock_acquire_recursive>:
 8008f74:	4770      	bx	lr

08008f76 <__retarget_lock_release_recursive>:
 8008f76:	4770      	bx	lr

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
